/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/config/appConfig.js":
/*!*********************************!*\
  !*** ./app/config/appConfig.js ***!
  \*********************************/
/***/ ((module) => {

module.exports = {
  contentPath: "../../../uploads/staticfile/",
  fileName: "content.json"
};

/***/ }),

/***/ "./app/config/authConfig.js":
/*!**********************************!*\
  !*** ./app/config/authConfig.js ***!
  \**********************************/
/***/ ((module) => {

module.exports = {
  secret: "client-secret-key",
  userName: "ClientApi",
  password: "ClientApi"
};

/***/ }),

/***/ "./app/config/dbConfig.js":
/*!********************************!*\
  !*** ./app/config/dbConfig.js ***!
  \********************************/
/***/ ((module) => {

module.exports = {
  HOST: localhost,
  PORT: 27017,
  DB: client_db
};

/***/ }),

/***/ "./app/controllers/admin/contentController.js":
/*!****************************************************!*\
  !*** ./app/controllers/admin/contentController.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var fs = __webpack_require__(/*! fs */ "fs");
var _require = __webpack_require__(/*! util */ "util"),
  promisify = _require.promisify;
var path = __webpack_require__(/*! path */ "path");
var _require2 = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require2.logger;
var AppConfig = __webpack_require__(/*! ../../config/appConfig.js */ "./app/config/appConfig.js");
var readFileAsync = promisify(fs.readFile);
exports.getStaticContentJson = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var contentPath, content, jsonData;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          contentPath = path.join(__dirname, AppConfig.contentPath, AppConfig.fileName);
          _context.next = 4;
          return readFileAsync(contentPath, 'utf-8');
        case 4:
          content = _context.sent;
          jsonData = JSON.parse(content);
          res.status(200).json({
            success: true,
            message: 'Valid JSON Content',
            data: jsonData
          });
          _context.next = 13;
          break;
        case 9:
          _context.prev = 9;
          _context.t0 = _context["catch"](0);
          logger.error('getStaticContentJson Error:', _context.t0);
          if (_context.t0 instanceof SyntaxError) {
            res.status(400).json({
              success: false,
              message: 'Invalid JSON format',
              details: _context.t0.message
            });
          } else {
            res.status(500).json({
              success: false,
              message: 'Internal server error (Content)'
            });
          }
        case 13:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 9]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.uploadStaticFile = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          data = {
            success: true,
            message: "Static file uploded succesfully!"
          };
          return _context2.abrupt("return", res.status(200).json(data));
        case 5:
          _context2.prev = 5;
          _context2.t0 = _context2["catch"](0);
          logger.error("uploadStaticFile Error:", _context2.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (uploadStaticFile)"
          });
        case 9:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 5]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/admin/donationController.js":
/*!*****************************************************!*\
  !*** ./app/controllers/admin/donationController.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/admin/donationService */ "./app/services/admin/donationService.js"),
  addDonationType = _require2.addDonationType,
  getDonationTypesByFrequency = _require2.getDonationTypesByFrequency,
  updateDonationTypeDetails = _require2.updateDonationTypeDetails,
  deleteDonationTypeDetails = _require2.deleteDonationTypeDetails,
  getDonationTypeDetailsById = _require2.getDonationTypeDetailsById,
  getDonationTypeDetailsByType = _require2.getDonationTypeDetailsByType;
exports.addDonationTypeController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return addDonationType(req);
        case 3:
          result = _context.sent;
          return _context.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("addDonationType Error:", error);
          res.status(500).json({
            success: false,
            error: "Internal server error (addDonationTypeController)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getDonationTypesByFrequencyController = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getDonationTypesByFrequency(req);
        case 3:
          serviceResult = _context2.sent;
          return _context2.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getDonationTypesByFrequencyController Error:", _context2.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getDonationTypesByFrequency)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.updateDonationTypeDetailsController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return updateDonationTypeDetails(req);
        case 3:
          serviceResult = _context3.sent;
          return _context3.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("updateDonationTypeDetailsController Error:", _context3.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (updateDonationTypeDetails)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.deleteDonationTypeDetailsController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return deleteDonationTypeDetails(req);
        case 3:
          serviceResult = _context4.sent;
          return _context4.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("deleteDonationTypeDetails Error:", _context4.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (deleteDonationTypeDetails)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
exports.getDonationTypeDetailsByIdController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return getDonationTypeDetailsById(req);
        case 3:
          serviceResult = _context5.sent;
          return _context5.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("getDonationTypeDetailsByIdController Error:", _context5.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getDonationTypeDetailsById)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();
exports.getDonationTypeDetailsByTypeController = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.prev = 0;
          _context6.next = 3;
          return getDonationTypeDetailsByType(req);
        case 3:
          serviceResult = _context6.sent;
          return _context6.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context6.prev = 7;
          _context6.t0 = _context6["catch"](0);
          logger.error("getDonationTypeDetailsByTypeController Error:", _context6.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getDonationTypeDetailsByTypeController)"
          });
        case 11:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[0, 7]]);
  }));
  return function (_x11, _x12) {
    return _ref6.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/admin/eventController.js":
/*!**************************************************!*\
  !*** ./app/controllers/admin/eventController.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/admin/eventService */ "./app/services/admin/eventService.js"),
  getAllEvents = _require2.getAllEvents,
  addEvents = _require2.addEvents,
  getEventById = _require2.getEventById,
  getEventsByDateFilter = _require2.getEventsByDateFilter,
  updateEvent = _require2.updateEvent,
  deleteEvent = _require2.deleteEvent,
  createBookings = _require2.createBookings;
exports.getAllEventsController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res, next) {
    var getAllEventService;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getAllEvents();
        case 3:
          getAllEventService = _context.sent;
          return _context.abrupt("return", res.status(200).json(getAllEventService));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getAllEventService Error:", _context.t0);
          res.status(500).json({
            error: "Internal server error (getAllEventService)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
exports.getEventByIdController = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next) {
    var event;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getEventById(req);
        case 3:
          event = _context2.sent;
          return _context2.abrupt("return", res.status(200).json(event));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getEventById Error:", _context2.t0);
          res.status(500).json({
            error: "Internal server error (getEventById)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
exports.getEventsByFilterController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res, next) {
    var events;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return getEventsByDateFilter(req.body);
        case 3:
          events = _context3.sent;
          return _context3.abrupt("return", res.status(200).json(events));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("getEventsByDateFilter Error:", _context3.t0);
          res.status(500).json({
            error: "Internal server error (getEventsByDateFilter)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();
exports.addEventsController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res, next) {
    var events;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return addEvents(req);
        case 3:
          events = _context4.sent;
          return _context4.abrupt("return", res.status(200).json(events));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("addEventsController Error:", _context4.t0);
          res.status(500).json({
            error: "Internal server error (addEvents)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x10, _x11, _x12) {
    return _ref4.apply(this, arguments);
  };
}();
exports.updateEventController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var event;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return updateEvent(req);
        case 3:
          event = _context5.sent;
          return _context5.abrupt("return", res.status(200).json(event));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("updateProduct Error:", _context5.t0);
          res.status(500).json({
            error: "Something went wrong please try again (updateEvent)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x13, _x14) {
    return _ref5.apply(this, arguments);
  };
}();
exports.deleteEventController = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {
    var event;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.prev = 0;
          _context6.next = 3;
          return deleteEvent(req);
        case 3:
          event = _context6.sent;
          return _context6.abrupt("return", res.status(200).json(event));
        case 7:
          _context6.prev = 7;
          _context6.t0 = _context6["catch"](0);
          logger.error("deleteProduct Error:", _context6.t0);
          res.status(500).json({
            error: "Something went wrong please try again (deleteEvent)"
          });
        case 11:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[0, 7]]);
  }));
  return function (_x15, _x16) {
    return _ref6.apply(this, arguments);
  };
}();
exports.bookEventController = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res) {
    var event;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.prev = 0;
          _context7.next = 3;
          return createBookings(req);
        case 3:
          event = _context7.sent;
          return _context7.abrupt("return", res.status(event.status).json(event.data));
        case 7:
          _context7.prev = 7;
          _context7.t0 = _context7["catch"](0);
          logger.error("deleteProduct Error:", _context7.t0);
          res.status(500).json({
            error: "Something went wrong please try again (bookEventController)"
          });
        case 11:
        case "end":
          return _context7.stop();
      }
    }, _callee7, null, [[0, 7]]);
  }));
  return function (_x17, _x18) {
    return _ref7.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/admin/godController.js":
/*!************************************************!*\
  !*** ./app/controllers/admin/godController.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/admin/godService */ "./app/services/admin/godService.js"),
  getAllGodsList = _require2.getAllGodsList,
  getGodDetailsById = _require2.getGodDetailsById,
  addGodDetails = _require2.addGodDetails,
  updateGodDetails = _require2.updateGodDetails,
  deleteGodDetails = _require2.deleteGodDetails;
exports.getAllGodsListController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res, next) {
    var gods;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getAllGodsList();
        case 3:
          gods = _context.sent;
          return _context.abrupt("return", res.status(200).json(gods));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getAllGodsList Error:", _context.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (getAllGodsList)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
exports.addGodDetailsController = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return addGodDetails(req);
        case 3:
          serviceResult = _context2.sent;
          return _context2.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("addGodDetailsController Error:", _context2.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (addGodDetails)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
exports.getGodDetailsByIdController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return getGodDetailsById(req);
        case 3:
          serviceResult = _context3.sent;
          return _context3.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getGodDetailsById)"
          });
        case 10:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();
exports.updateGodDetailsController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return updateGodDetails(req);
        case 3:
          serviceResult = _context4.sent;
          return _context4.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("addGodDetailsController Error:", _context4.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (updateGodDetails)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();
exports.deleteGodDetailsController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return deleteGodDetails(req);
        case 3:
          serviceResult = _context5.sent;
          return _context5.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("deleteGodDetails Error:", _context5.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (deleteGodDetails)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/admin/productController.js":
/*!****************************************************!*\
  !*** ./app/controllers/admin/productController.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/admin/productService */ "./app/services/admin/productService.js"),
  getAllProducts = _require2.getAllProducts,
  createProduct = _require2.createProduct,
  getProductById = _require2.getProductById,
  updateProduct = _require2.updateProduct,
  deleteProduct = _require2.deleteProduct;
exports.getAllProductsController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res, next) {
    var getAllProductsService;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getAllProducts();
        case 3:
          getAllProductsService = _context.sent;
          return _context.abrupt("return", res.status(200).json(getAllProductsService));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getAllProducts Error:", _context.t0);
          res.status(500).json({
            error: "Internal server error (getAllProducts)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
exports.createProductController = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next) {
    var newProductService;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return createProduct(req);
        case 3:
          newProductService = _context2.sent;
          return _context2.abrupt("return", res.status(newProductService.status).json(newProductService.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("createProductController Error:", _context2.t0);
          res.status(500).json({
            error: "Internal server error (createProduct)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
exports.getProductByIdController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var getProductByIdService;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return getProductById(req);
        case 3:
          getProductByIdService = _context3.sent;
          return _context3.abrupt("return", res.status(getProductByIdService.status).json(getProductByIdService.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("getSingleProduct Error:", _context3.t0);
          res.status(500).json({
            error: "Something went wrong please try again (getProductById)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();
exports.updateProductController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var productService;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return updateProduct(req);
        case 3:
          productService = _context4.sent;
          return _context4.abrupt("return", res.status(productService.status).json(productService.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("updateProduct Error:", _context4.t0);
          res.status(500).json({
            error: "Something went wrong please try again (updateProduct)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();
exports.deleteProductController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var productService;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return deleteProduct(req);
        case 3:
          productService = _context5.sent;
          return _context5.abrupt("return", res.status(productService.status).json(productService.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("deleteProduct Error:", _context5.t0);
          res.status(500).json({
            error: "Something went wrong please try again (deleteProduct)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/admin/serviceController.js":
/*!****************************************************!*\
  !*** ./app/controllers/admin/serviceController.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/admin/servicesBookingService */ "./app/services/admin/servicesBookingService.js"),
  getAllServices = _require2.getAllServices,
  getServicesByGodId = _require2.getServicesByGodId,
  addServiceDetails = _require2.addServiceDetails,
  updateServiceDetailsByGodId = _require2.updateServiceDetailsByGodId,
  inactivateServiceByServiceId = _require2.inactivateServiceByServiceId,
  inactivateServiceByGodId = _require2.inactivateServiceByGodId,
  getServiceByServiceId = _require2.getServiceByServiceId,
  createBookings = _require2.createBookings;
exports.getAllServicesController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res, next) {
    var gods;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getAllServices();
        case 3:
          gods = _context.sent;
          return _context.abrupt("return", res.status(200).json(gods));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getAllServices Error:", _context.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (getAllServices)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
exports.getServiceByServiceIdController = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getServiceByServiceId(req.params._id);
        case 3:
          serviceResult = _context2.sent;
          return _context2.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getServiceByServiceId Error:", _context2.t0);
          res.status(500).json({
            error: "Internal server error (getServiceByServiceIdController)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
exports.getServicesByGodIdController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return getServicesByGodId(req.params.godId);
        case 3:
          serviceResult = _context3.sent;
          return _context3.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("getServicesByGodIdService Error:", _context3.t0);
          res.status(500).json({
            error: "Internal server error (getServicesByGodIdController)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();
exports.addServiceDetailsController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res, next) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return addServiceDetails(req);
        case 3:
          serviceResult = _context4.sent;
          return _context4.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("addServiceDetailsController Error:", _context4.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (addServiceDetails)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x8, _x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();
exports.getGodDetailsByIdController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return getGodDetailsById(req);
        case 3:
          serviceResult = _context5.sent;
          return _context5.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("getGodDetailsByIdController Error:", _context5.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getGodDetailsById)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();
exports.updateServiceDetailsController = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.prev = 0;
          _context6.next = 3;
          return updateServiceDetailsByGodId(req);
        case 3:
          serviceResult = _context6.sent;
          return _context6.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context6.prev = 7;
          _context6.t0 = _context6["catch"](0);
          logger.error("updateGodDetails Error:", _context6.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (updateGodDetails)"
          });
        case 11:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[0, 7]]);
  }));
  return function (_x13, _x14) {
    return _ref6.apply(this, arguments);
  };
}();
exports.inActivateServiceByServiceIdController = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.prev = 0;
          _context7.next = 3;
          return inactivateServiceByServiceId(req);
        case 3:
          serviceResult = _context7.sent;
          return _context7.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context7.prev = 7;
          _context7.t0 = _context7["catch"](0);
          logger.error("deleteGodDetails Error:", _context7.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (inActivateServiceByServiceIdController)"
          });
        case 11:
        case "end":
          return _context7.stop();
      }
    }, _callee7, null, [[0, 7]]);
  }));
  return function (_x15, _x16) {
    return _ref7.apply(this, arguments);
  };
}();
exports.inActivateServiceByGodIdController = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          _context8.prev = 0;
          _context8.next = 3;
          return inactivateServiceByGodId(req);
        case 3:
          serviceResult = _context8.sent;
          return _context8.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context8.prev = 7;
          _context8.t0 = _context8["catch"](0);
          logger.error("deleteGodDetails Error:", _context8.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (inActivateServiceByGodIdController)"
          });
        case 11:
        case "end":
          return _context8.stop();
      }
    }, _callee8, null, [[0, 7]]);
  }));
  return function (_x17, _x18) {
    return _ref8.apply(this, arguments);
  };
}();
exports.createServiceBookController = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          _context9.prev = 0;
          _context9.next = 3;
          return createBookings(req);
        case 3:
          result = _context9.sent;
          return _context9.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context9.prev = 7;
          _context9.t0 = _context9["catch"](0);
          logger.error("createBookingsController Error:", error);
          res.status(500).json({
            success: false,
            error: "Internal server error (createServiceBookController)"
          });
        case 11:
        case "end":
          return _context9.stop();
      }
    }, _callee9, null, [[0, 7]]);
  }));
  return function (_x19, _x20) {
    return _ref9.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/admin/sevaController.js":
/*!*************************************************!*\
  !*** ./app/controllers/admin/sevaController.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/admin/sevaService */ "./app/services/admin/sevaService.js"),
  addSevaBookingDetails = _require2.addSevaBookingDetails,
  getSevaBookingDetailsByBookingType = _require2.getSevaBookingDetailsByBookingType,
  updateSevaBookingDetails = _require2.updateSevaBookingDetails,
  deleteSevaBookingDetails = _require2.deleteSevaBookingDetails,
  getSevaBookingDetailsById = _require2.getSevaBookingDetailsById;
exports.addSevaBookingDetailsController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return addSevaBookingDetails(req);
        case 3:
          result = _context.sent;
          return _context.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("addSevaBookingDetails Error:", error);
          res.status(500).json({
            success: false,
            error: "Internal server error (addSevaBookingDetails)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getSevaBookingDetailsController = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getSevaBookingDetailsByBookingType(req);
        case 3:
          serviceResult = _context2.sent;
          return _context2.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getSevaBookingDetailsByBookingType)"
          });
        case 10:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.updateSevaBookingDetailsController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return updateSevaBookingDetails(req);
        case 3:
          serviceResult = _context3.sent;
          return _context3.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("updateSevaBooking Error:", _context3.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (updateSevaBookingDetails)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.deleteSevaBookingDetailsController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return deleteSevaBookingDetails(req);
        case 3:
          serviceResult = _context4.sent;
          return _context4.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("deleteSevaBooking Error:", _context4.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (deleteSevaBookingDetails)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
exports.getSevaBookingDetailsByIdController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return getSevaBookingDetailsById(req);
        case 3:
          serviceResult = _context5.sent;
          return _context5.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getSevaBookingDetailsById)"
          });
        case 10:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/admin/userController.js":
/*!*************************************************!*\
  !*** ./app/controllers/admin/userController.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../utils/index */ "./app/utils/index.js"),
  generateRandomPassword = _require2.generateRandomPassword;
var db = __webpack_require__(/*! ../../models/auth */ "./app/models/auth/index.js");
var User = db.user;
var Role = db.role;
var Counter = __webpack_require__(/*! ../../models/member/userProfile/counterModel */ "./app/models/member/userProfile/counterModel.js");
var bcrypt = __webpack_require__(/*! bcryptjs */ "bcryptjs");
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var _require3 = __webpack_require__(/*! ../../services/admin/userService */ "./app/services/admin/userService.js"),
  getAllUsers = _require3.getAllUsers,
  getUserByUserId = _require3.getUserByUserId,
  updateUserRole = _require3.updateUserRole,
  activateOrDeActivateUserByUserId = _require3.activateOrDeActivateUserByUserId;
exports.getAllUsers = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getAllUsers();
        case 3:
          result = _context.sent;
          return _context.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getAllUsers Error:", _context.t0);
          res.status(500).json({
            error: "Internal server error (getAllUsers)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getUserByUserId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getUserByUserId(req.params.userId);
        case 3:
          result = _context2.sent;
          return _context2.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getUserByUserId Error:", _context2.t0);
          res.status(500).json({
            error: "Internal server error (getUserByUserId)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.addUserByAdmin = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var counter, ranPass, user, emailObject;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return Counter.findByIdAndUpdate({
            _id: "devoteeId"
          }, {
            $inc: {
              seq: 1
            }
          }, {
            "new": true,
            upsert: true
          });
        case 3:
          counter = _context3.sent;
          ranPass = generateRandomPassword();
          user = new User({
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            email: req.body.email,
            devoteeId: counter.seq,
            countrycode: req.body.countrycode,
            TermConcent: true,
            phonenumber: req.body.countrycode + "" + req.body.phonenumber,
            password: bcrypt.hashSync(ranPass, 8),
            activated: true
          });
          emailObject = {
            name: req.body.firstName + "" + req.body.lastName,
            email: req.body.email,
            bodyData: {
              password: ranPass,
              phonenumber: req.body.countrycode + "" + req.body.phonenumber
            }
          };
          user.save(function (err, user) {
            if (err) {
              res.status(500).send({
                message: err
              });
              return;
            }
            if (!user.firstName) {
              res.status(500).send({
                message: "First Name is required"
              });
              return;
            }
            if (req.body.roles) {
              Role.find({
                name: {
                  $in: req.body.roles
                }
              }, function (err, roles) {
                if (err) {
                  res.status(500).send({
                    message: err
                  });
                  return;
                }
                user.roles = roles.map(function (role) {
                  return role._id;
                });
                user.save(function (err) {
                  if (err) {
                    res.status(500).send({
                      message: err
                    });
                    return;
                  }
                  SendConfirmationEmail(emailObject, "");
                  res.send({
                    success: true,
                    message: "User has registered and initial password has been sent to user for login"
                  });
                });
              });
            } else {
              Role.findOne({
                name: "user"
              }, function (err, role) {
                if (err) {
                  res.status(500).send({
                    message: err
                  });
                  return;
                }
                user.roles = [role._id];
                user.save(function (err) {
                  if (err) {
                    res.status(500).send({
                      message: err
                    });
                    return;
                  }
                  SendConfirmationEmail(emailObject, "");
                  res.send({
                    success: true,
                    message: "User has registered and initial password has been sent to user for login"
                  });
                });
              });
            }
          });
          _context3.next = 14;
          break;
        case 10:
          _context3.prev = 10;
          _context3.t0 = _context3["catch"](0);
          logger.error("getUserByUserId Error:", _context3.t0);
          res.status(500).json({
            error: "Internal server error (addUserByAdmin)"
          });
        case 14:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 10]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
var SendConfirmationEmail = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(user, activationLink) {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          new Email(user, activationLink, "admin registration for user").adminRegistrationConfirm();
        case 1:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function SendConfirmationEmail(_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
exports.updateUserRole = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return updateUserRole(req);
        case 3:
          result = _context5.sent;
          return _context5.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("updateUserRole Error:", _context5.t0);
          res.status(500).json({
            error: "Something went wrong please try again (updateUserRole)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();
exports.activateOrDeActivateUserByUserId = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.prev = 0;
          _context6.next = 3;
          return activateOrDeActivateUserByUserId(req);
        case 3:
          result = _context6.sent;
          return _context6.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context6.prev = 7;
          _context6.t0 = _context6["catch"](0);
          logger.error("activateOrDeActivateUserByUserId Error:", _context6.t0);
          res.status(500).json({
            error: "Something went wrong please try again (activateOrDeActivateUserByUserId)"
          });
        case 11:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[0, 7]]);
  }));
  return function (_x11, _x12) {
    return _ref6.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/auth/authController.js":
/*!************************************************!*\
  !*** ./app/controllers/auth/authController.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _this = this;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var config = __webpack_require__(/*! ../../config/authConfig */ "./app/config/authConfig.js");
var db = __webpack_require__(/*! ../../models/auth */ "./app/models/auth/index.js");
var User = db.user;
var Role = db.role;
var UserProfile = __webpack_require__(/*! ../../models/member/userProfile/userProfileModel */ "./app/models/member/userProfile/userProfileModel.js");
var Counter = __webpack_require__(/*! ../../models/member/userProfile/counterModel */ "./app/models/member/userProfile/counterModel.js");
var jwt = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
var bcrypt = __webpack_require__(/*! bcryptjs */ "bcryptjs");
var crypto = __webpack_require__(/*! crypto */ "crypto");
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var _require = __webpack_require__(/*! ../../utils/sendSMS */ "./app/utils/sendSMS.js"),
  sendSMS = _require.sendSMS;
var _require2 = __webpack_require__(/*! ../../services/auth/authService */ "./app/services/auth/authService.js"),
  requestPasswordReset = _require2.requestPasswordReset,
  resetPassword = _require2.resetPassword,
  generateandSaveOTP = _require2.generateandSaveOTP,
  VerifyOTP = _require2.VerifyOTP;
exports.signup = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var activationToken, clientURL, activationLink, activationTokenExpiry, counter, existingUsers, rolesData, user;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          // Generate a random activation token
          activationToken = crypto.randomBytes(20).toString("hex");
          clientURL = process.env.CLIENT_URL;
          activationLink = "".concat(http://localhost:3000, "/useractivation/").concat(activationToken);
          activationTokenExpiry = new Date();
          activationTokenExpiry.setHours(activationTokenExpiry.getHours() + 24); // Set expiration to 24 hour from now
          _context.next = 7;
          return Counter.findByIdAndUpdate({
            _id: "devoteeId"
          }, {
            $inc: {
              seq: 1
            }
          }, {
            "new": true,
            upsert: true
          });
        case 7:
          counter = _context.sent;
          _context.next = 10;
          return User.find({});
        case 10:
          existingUsers = _context.sent;
          if (existingUsers.length === 0) {
            rolesData = ["admin", "user"];
          } else {
            rolesData = req.body.roles;
          }
          user = new User({
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            email: req.body.email,
            devoteeId: counter.seq,
            countrycode: req.body.countrycode,
            TermConcent: req.body.TermConcent,
            phonenumber: req.body.countrycode + "" + req.body.phonenumber,
            password: bcrypt.hashSync(req.body.password, 8),
            activationToken: activationToken,
            activationTokenExpiry: activationTokenExpiry,
            activated: false
          });
          try {
            user.save(function (err, user) {
              if (err) {
                res.status(500).send({
                  message: err
                });
                return;
              }
              if (!user.firstName) {
                res.status(500).send({
                  message: "First Name is required"
                });
                return;
              }
              if (rolesData) {
                Role.find({
                  name: {
                    $in: rolesData
                  }
                }, function (err, roles) {
                  if (err) {
                    res.status(500).send({
                      message: err
                    });
                    return;
                  }
                  user.roles = roles.map(function (role) {
                    return role._id;
                  });
                  user.save(function (err) {
                    if (err) {
                      res.status(500).send({
                        message: err
                      });
                      return;
                    }
                    var mobileNumber = req.body.countrycode + "" + req.body.phonenumber;
                    SendOTP(mobileNumber);
                    SendAccountActivationEmail(user, activationLink);
                    res.send({
                      success: true,
                      message: "User was registered successfully! Activation email sent to your registered email and it expires in 24 hours"
                    });
                  });
                });
              } else {
                Role.findOne({
                  name: "user"
                }, function (err, role) {
                  if (err) {
                    res.status(500).send({
                      message: err
                    });
                    return;
                  }
                  user.roles = [role._id];
                  user.save(function (err) {
                    if (err) {
                      res.status(500).send({
                        message: err
                      });
                      return;
                    }
                    var mobileNumber = req.body.countrycode + "" + req.body.phonenumber;
                    SendOTP(mobileNumber);
                    SendAccountActivationEmail(user, activationLink);
                    res.send({
                      success: true,
                      message: "User was registered successfully! Activation email sent. Please check your email."
                    });
                  });
                });
              }
            });
          } catch (error) {
            console.log(error);
          }
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.activateEmail = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var token, user, profileData;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          token = req.params.token; // Find the user by activation token
          _context2.next = 4;
          return User.findOne({
            activationToken: token,
            activationTokenExpiry: {
              $gt: new Date()
            }
          });
        case 4:
          user = _context2.sent;
          if (user) {
            _context2.next = 7;
            break;
          }
          return _context2.abrupt("return", res.status(404).send({
            success: false,
            message: "Invalid or expired activation token"
          }));
        case 7:
          // Activate the user
          user.activated = true;
          user.IsEmailActive = true;
          user.activationToken = undefined;
          profileData = _objectSpread(_objectSpread({
            userId: user._id,
            firstName: user.firstName,
            countryCode: req.body.countrycode,
            lastName: user.lastName,
            mobileNumber: user.phonenumber,
            email: user.email
          }, req.body), {}, {
            createdAt: Date.now(),
            modifiedAt: Date.now()
          });
          _context2.next = 13;
          return new UserProfile(profileData).save();
        case 13:
          _context2.next = 15;
          return user.save();
        case 15:
          return _context2.abrupt("return", res.send({
            success: true,
            message: "Account activated successfully!"
          }));
        case 18:
          _context2.prev = 18;
          _context2.t0 = _context2["catch"](0);
          return _context2.abrupt("return", res.status(500).send({
            success: false,
            message: "something went wrong (activateEmail)"
          }));
        case 21:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 18]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.signin = function (req, res) {
  User.findOne({
    email: req.body.email
  }).populate("roles", "-__v").exec(function (err, user) {
    if (err) {
      res.status(500).send({
        success: false,
        message: err
      });
      return;
    }
    if (!user) {
      return res.status(404).send({
        success: false,
        message: "User Not found."
      });
    }
    var passwordIsValid = bcrypt.compareSync(req.body.password, user.password);
    if (!passwordIsValid) {
      return res.status(401).send({
        success: false,
        message: "Invalid Password!"
      });
    }
    if (!user.activated) {
      return res.status(401).send({
        success: false,
        message: "Account Not Activated"
      });
    }
    var token = jwt.sign({
      id: user.id
    }, config.secret, {
      algorithm: "HS256",
      allowInsecureKeySizes: true,
      expiresIn: 86400 // 24 hours
    });
    var authorities = [];
    for (var i = 0; i < user.roles.length; i++) {
      authorities.push("ROLE_" + user.roles[i].name.toUpperCase());
    }
    req.session.token = token;
    res.status(200).send({
      id: user._id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      userName: user.firstName + "" + user.lastName,
      countrycode: user.countrycode,
      devoteeId: user.devoteeId,
      phonenumber: user.phonenumber,
      roles: authorities,
      success: true,
      message: "login successful"
    });
  });
};
exports.signout = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          req.session = null;
          return _context3.abrupt("return", res.status(200).send({
            message: "You've been signed out!"
          }));
        case 5:
          _context3.prev = 5;
          _context3.t0 = _context3["catch"](0);
          _this.next(_context3.t0);
        case 8:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 5]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.resetPasswordRequestController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res, next) {
    var requestPasswordResetService;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return requestPasswordReset(req.body.email);
        case 2:
          requestPasswordResetService = _context4.sent;
          return _context4.abrupt("return", res.status(requestPasswordResetService.status).json(requestPasswordResetService.data));
        case 4:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function (_x7, _x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();
exports.resetPasswordController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res, next) {
    var resetPasswordService;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return resetPassword(req.body.userid, req.body.identifier, req.body.password);
        case 2:
          resetPasswordService = _context5.sent;
          return _context5.abrupt("return", res.status(resetPasswordService.status).send({
            success: resetPasswordService.success,
            message: resetPasswordService.message
          }));
        case 4:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function (_x10, _x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();
exports.getOTP = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {
    var result, toPhoneNumber, message, messageText;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.prev = 0;
          _context6.next = 3;
          return generateandSaveOTP(req.body.phoneNumber);
        case 3:
          result = _context6.sent;
          toPhoneNumber = "+918123192799";
          message = "Please enter the below otp:";
          messageText = "Hello ".concat(message, ". OTP:").concat(result.data.otp);
          sendSMS(toPhoneNumber, messageText);
          return _context6.abrupt("return", res.status(result.status).json(result.data));
        case 11:
          _context6.prev = 11;
          _context6.t0 = _context6["catch"](0);
          logger.error("getOTP Error:", _context6.t0);
          res.status(500).json({
            error: "Something went wrong please try again (getOTP)"
          });
        case 15:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[0, 11]]);
  }));
  return function (_x13, _x14) {
    return _ref6.apply(this, arguments);
  };
}();
exports.verifyOTP = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.prev = 0;
          _context7.next = 3;
          return VerifyOTP(req.body.phoneNumber, req.body.otp);
        case 3:
          result = _context7.sent;
          return _context7.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context7.prev = 7;
          _context7.t0 = _context7["catch"](0);
          logger.error("verifyOTP Error:", _context7.t0);
          res.status(500).json({
            error: "Something went wrong please try again (verifyOTP)"
          });
        case 11:
        case "end":
          return _context7.stop();
      }
    }, _callee7, null, [[0, 7]]);
  }));
  return function (_x15, _x16) {
    return _ref7.apply(this, arguments);
  };
}();
var SendOTP = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(mobileNumber) {
    var result, message, messageText;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          _context8.prev = 0;
          _context8.next = 3;
          return generateandSaveOTP(mobileNumber);
        case 3:
          result = _context8.sent;
          message = "Please enter the below OTP";
          messageText = "Hello ".concat(message, ".:").concat(result.data.otp);
          return _context8.abrupt("return", sendSMS(mobileNumber, messageText));
        case 9:
          _context8.prev = 9;
          _context8.t0 = _context8["catch"](0);
          logger.error("SendOTP Error:", _context8.t0);
          res.status(500).json({
            error: "Something went wrong please try again (SendOTP)"
          });
        case 13:
        case "end":
          return _context8.stop();
      }
    }, _callee8, null, [[0, 9]]);
  }));
  return function SendOTP(_x17) {
    return _ref8.apply(this, arguments);
  };
}();
var SendAccountActivationEmail = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(user, activationLink) {
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          new Email(user, activationLink, "email activation").verifyEmailAddress();
        case 1:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return function SendAccountActivationEmail(_x18, _x19) {
    return _ref9.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/cartController.js":
/*!**************************************************!*\
  !*** ./app/controllers/member/cartController.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var Cart = __webpack_require__(/*! ../../models/member/cartModel */ "./app/models/member/cartModel.js");
var User = __webpack_require__(/*! ../../models/auth/userModel */ "./app/models/auth/userModel.js");
var Product = __webpack_require__(/*! ../../models/admin/productModel */ "./app/models/admin/productModel.js");
var _require2 = __webpack_require__(/*! ../../services/member/cartService */ "./app/services/member/cartService.js"),
  AddBookingHistory = _require2.AddBookingHistory;

//get cart
exports.getCart = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var userId, user, sessionId, owner, cart;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          userId = req.params.id;
          _context.next = 3;
          return User.findOne({
            _id: userId
          });
        case 3:
          user = _context.sent;
          sessionId = req.headers["session"];
          owner = user != null ? user._id : null;
          _context.prev = 6;
          if (!(owner != null)) {
            _context.next = 13;
            break;
          }
          _context.next = 10;
          return Cart.findOne({
            owner: userId
          });
        case 10:
          cart = _context.sent;
          _context.next = 16;
          break;
        case 13:
          _context.next = 15;
          return Cart.findOne({
            sessionId: sessionId
          });
        case 15:
          cart = _context.sent;
        case 16:
          if (cart && cart.items.length > 0) {
            res.status(200).send(cart);
          } else {
            res.send(null);
          }
          _context.next = 23;
          break;
        case 19:
          _context.prev = 19;
          _context.t0 = _context["catch"](6);
          logger.error("getCart Error:", _context.t0);
          res.status(500).send();
        case 23:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[6, 19]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

//add item to cart (and create cart [in db] if it's the first item)
exports.addCart = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var userId, user, sessionId, owner, _req$body, productId, quantity, product, price, name, stock, image, cart, itemIndex, item, newCart;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          userId = req.body["userid"];
          _context2.next = 3;
          return User.findOne({
            _id: userId
          });
        case 3:
          user = _context2.sent;
          sessionId = req.headers["session"];
          owner = user != null ? user._id : null;
          _req$body = req.body, productId = _req$body.productId, quantity = _req$body.quantity;
          _context2.prev = 7;
          _context2.next = 10;
          return Product.findOne({
            _id: productId
          });
        case 10:
          product = _context2.sent;
          if (product) {
            _context2.next = 14;
            break;
          }
          res.status(404).send({
            message: "product not found"
          });
          return _context2.abrupt("return");
        case 14:
          price = product.price;
          name = product.name;
          stock = product.stock;
          image = product.image;
          _context2.next = 20;
          return setHeaderQuery(owner, sessionId);
        case 20:
          cart = _context2.sent;
          if (!(quantity > stock)) {
            _context2.next = 24;
            break;
          }
          res.status(400).send({
            message: "Only ".concat(stock, " quantity available")
          });
          return _context2.abrupt("return");
        case 24:
          if (!cart) {
            _context2.next = 48;
            break;
          }
          itemIndex = cart.items.findIndex(function (item) {
            return item.productId == productId;
          }); //check if product exists or not
          if (!(itemIndex != -1)) {
            _context2.next = 39;
            break;
          }
          item = cart.items[itemIndex];
          if (req.body.type === "decrease") {
            item.quantity -= quantity;
          } else {
            item.quantity += quantity;
          }
          cart.totalPrice = cart.items.reduce(function (acc, curr) {
            return acc + curr.quantity * curr.price;
          }, 0);
          cart.totalQuantity = cart.items.reduce(function (acc, curr) {
            return acc + curr.quantity;
          }, 0);
          console.log("item", cart);
          cart.sessionId = sessionId;
          cart.items[itemIndex] = item;
          _context2.next = 36;
          return cart.save();
        case 36:
          res.status(200).send(cart);
          _context2.next = 46;
          break;
        case 39:
          cart.items.push({
            productId: productId,
            name: name,
            quantity: quantity,
            price: price,
            image: image
          });
          cart.totalQuantity = cart.items.reduce(function (acc, curr) {
            return acc + curr.quantity;
          }, 0);
          cart.totalPrice = cart.items.reduce(function (acc, curr) {
            return acc + curr.quantity * curr.price;
          }, 0);
          cart.sessionId = sessionId;
          _context2.next = 45;
          return cart.save();
        case 45:
          res.status(200).send(cart);
        case 46:
          _context2.next = 52;
          break;
        case 48:
          _context2.next = 50;
          return Cart.create({
            owner: owner,
            sessionId: sessionId,
            items: [{
              productId: productId,
              name: name,
              quantity: quantity,
              price: price,
              image: image
            }],
            totalPrice: quantity * price
          });
        case 50:
          newCart = _context2.sent;
          return _context2.abrupt("return", res.status(201).send(newCart));
        case 52:
          _context2.next = 58;
          break;
        case 54:
          _context2.prev = 54;
          _context2.t0 = _context2["catch"](7);
          logger.error("addCart Error:", _context2.t0);
          res.status(500).send("something went wrong");
        case 58:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[7, 54]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.deleteCart = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var userId, user, sessionId, owner, productId, cart, itemIndex;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          userId = req.params.userid;
          _context3.next = 3;
          return User.findOne({
            _id: userId
          });
        case 3:
          user = _context3.sent;
          sessionId = req.headers["session"];
          owner = user != null ? user._id : null;
          productId = req.params.productId;
          console.log(productId);
          _context3.prev = 8;
          _context3.next = 11;
          return setHeaderQuery(owner, sessionId);
        case 11:
          cart = _context3.sent;
          if (!(req.params.productId == 0)) {
            _context3.next = 22;
            break;
          }
          cart.items = [];
          cart.totalPrice = 0;
          cart.totalQuantity = 0;
          _context3.next = 18;
          return cart.save();
        case 18:
          cart = _context3.sent;
          res.status(200).send(cart);
          _context3.next = 34;
          break;
        case 22:
          itemIndex = cart.items.findIndex(function (item) {
            return item.productId == productId;
          });
          if (!(itemIndex > -1)) {
            _context3.next = 33;
            break;
          }
          cart.items = cart.items.filter(function (item) {
            return item.productId != productId;
          });
          cart.totalPrice = cart.items.reduce(function (acc, curr) {
            return acc + curr.quantity * curr.price;
          }, 0);
          cart.totalQuantity = cart.items.reduce(function (acc, curr) {
            return acc + curr.quantity;
          }, 0);
          _context3.next = 29;
          return cart.save();
        case 29:
          cart = _context3.sent;
          res.status(200).send(cart);
          _context3.next = 34;
          break;
        case 33:
          res.status(404).send("item not found");
        case 34:
          _context3.next = 40;
          break;
        case 36:
          _context3.prev = 36;
          _context3.t0 = _context3["catch"](8);
          logger.error("deleteCart Error:", _context3.t0);
          res.status(400).send();
        case 40:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[8, 36]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.AddBookingHistory = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var bookinhService;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return AddBookingHistory(req);
        case 3:
          bookinhService = _context4.sent;
          return _context4.abrupt("return", res.status(bookinhService.status).json(bookinhService.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("updateProduct Error:", _context4.t0);
          res.status(500).json({
            error: "Something went wrong please try again (AddBookingHistory)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
exports.GetOrderHistory = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var bookinhService;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return getOrderDetailsByUserId(req);
        case 3:
          bookinhService = _context5.sent;
          return _context5.abrupt("return", res.status(bookinhService.status).json(bookinhService.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("GetOrderHistory Error:", _context5.t0);
          res.status(500).json({
            error: "Something went wrong please try again (GetOrderHistory)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();
function setHeaderQuery(_x11, _x12) {
  return _setHeaderQuery.apply(this, arguments);
}
function _setHeaderQuery() {
  _setHeaderQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(owner, sessionId) {
    var cart;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          if (!(owner != null)) {
            _context6.next = 6;
            break;
          }
          _context6.next = 3;
          return Cart.findOne({
            owner: owner
          });
        case 3:
          cart = _context6.sent;
          _context6.next = 9;
          break;
        case 6:
          _context6.next = 8;
          return Cart.findOne({
            sessionId: sessionId
          });
        case 8:
          cart = _context6.sent;
        case 9:
          return _context6.abrupt("return", cart);
        case 10:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return _setHeaderQuery.apply(this, arguments);
}

/***/ }),

/***/ "./app/controllers/member/deceasedDetailsController.js":
/*!*************************************************************!*\
  !*** ./app/controllers/member/deceasedDetailsController.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/member/userProfile/deceasedDetailsService */ "./app/services/member/userProfile/deceasedDetailsService.js"),
  getDeceasedDetailsByUserId = _require2.getDeceasedDetailsByUserId,
  createDeceasedDetails = _require2.createDeceasedDetails,
  updateDeceasedDetails = _require2.updateDeceasedDetails,
  deleteDeceasedDetails = _require2.deleteDeceasedDetails,
  getDeceasedListByUserId = _require2.getDeceasedListByUserId;
exports.getDeceasedDetailsByUserId = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var Deceased;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getDeceasedDetailsByUserId(req);
        case 3:
          Deceased = _context.sent;
          return _context.abrupt("return", res.status(Deceased.status).json(Deceased.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getDeceasedDetailsService Error:", _context.t0);
          res.status(500).json({
            error: "Internal server error (getDeceasedDetailsService)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getDeceasedListByUserId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var Deceased;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getDeceasedListByUserId(req);
        case 3:
          Deceased = _context2.sent;
          return _context2.abrupt("return", res.status(Deceased.status).json(Deceased.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getDeceasedListByUserId Error:", _context2.t0);
          res.status(500).json({
            error: "Internal server error (getDeceasedListByUserId)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.createDeceasedDetailsController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return createDeceasedDetails(req);
        case 3:
          result = _context3.sent;
          return _context3.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("DeceasedDetailsController Error:", _context3.t0);
          res.status(500).json({
            message: "Internal server error (createDeceasedDetails)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.updateDeceasedDetailsController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return updateDeceasedDetails(req);
        case 3:
          result = _context4.sent;
          return _context4.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("updateDeceasedDetails Error:", _context4.t0);
          res.status(500).json({
            error: "Something went wrong please try again (updateDeceasedDetails)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
exports.deleteDeceasedDetailsController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return deleteDeceasedDetails(req);
        case 3:
          result = _context5.sent;
          return _context5.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("deleteDeceasedDetails Error:", _context5.t0);
          res.status(500).json({
            error: "Something went wrong please try again (deleteDeceasedDetails)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/donationController.js":
/*!******************************************************!*\
  !*** ./app/controllers/member/donationController.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/member/donationService */ "./app/services/member/donationService.js"),
  addDonationDetails = _require2.addDonationDetails,
  getDonationDetailsByUserId = _require2.getDonationDetailsByUserId,
  getDonationDetailsByDonationId = _require2.getDonationDetailsByDonationId;
exports.getDonationDetailsByUserId = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getDonationDetailsByUserId(req);
        case 3:
          result = _context.sent;
          return _context.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getDonationDetailsByUserId Error:", _context.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (getDonationDetailsByUserId)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getDonationDetailsByDonationId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getDonationDetailsByDonationId(req);
        case 3:
          result = _context2.sent;
          return _context2.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getDonationDetailsByUserId Error:", _context2.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (getDonationDetailsByUserId)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.addDonationDetailsController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return addDonationDetails(req);
        case 3:
          result = _context3.sent;
          return _context3.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("addDonationController Error:", _context3.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (addDonationDetails)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/enquiryController.js":
/*!*****************************************************!*\
  !*** ./app/controllers/member/enquiryController.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares/logger */ "./app/middlewares/logger.js"),
  logger = _require.logger;
var validator = __webpack_require__(/*! validator */ "validator");
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var _require2 = __webpack_require__(/*! ../../services/member/enquiryService */ "./app/services/member/enquiryService.js"),
  sendEnquiry = _require2.sendEnquiry;
exports.sendEnquiryController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res, next) {
    var _req$body, name, email, message, subject, sendEnquiryService, emailbody;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _req$body = req.body, name = _req$body.name, email = _req$body.email, message = _req$body.message, subject = _req$body.subject;
          if (!(!name || !email || !message || !validator.isEmail(email))) {
            _context.next = 4;
            break;
          }
          return _context.abrupt("return", res.status(400).json({
            error: "Invalid request payload"
          }));
        case 4:
          _context.next = 6;
          return sendEnquiry(req.body);
        case 6:
          sendEnquiryService = _context.sent;
          emailbody = {
            email: email,
            message: message,
            subject: subject,
            name: name
          };
          new Email(emailbody, "", "enquiry notification").sendEnquiry();
          return _context.abrupt("return", res.status(200).json(sendEnquiryService));
        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](0);
          logger.error("Enquiry Error:", _context.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (Enquiry)"
          });
        case 16:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 12]]);
  }));
  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/familyDetailsController.js":
/*!***********************************************************!*\
  !*** ./app/controllers/member/familyDetailsController.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/member/userProfile/familyDetailsService */ "./app/services/member/userProfile/familyDetailsService.js"),
  getFamilyDetailsByUserId = _require2.getFamilyDetailsByUserId,
  createFamilyDetails = _require2.createFamilyDetails,
  updateFamilyDetails = _require2.updateFamilyDetails,
  deleteFamilyDetails = _require2.deleteFamilyDetails,
  getFamilyListByUserId = _require2.getFamilyListByUserId;
exports.getFamilyDetailsByUserId = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var family;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getFamilyDetailsByUserId(req);
        case 3:
          family = _context.sent;
          return _context.abrupt("return", res.status(family.status).json(family.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getFamilyDetailsService Error:", _context.t0);
          res.status(500).json({
            error: "Internal server error (getFamilyDetailsService)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getFamilyListByUserId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var family;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getFamilyListByUserId(req);
        case 3:
          family = _context2.sent;
          return _context2.abrupt("return", res.status(family.status).json(family.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getFamilyListByUserId Error:", _context2.t0);
          res.status(500).json({
            error: "Internal server error (getFamilyListByUserId)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.createFamilyDetailsController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return createFamilyDetails(req);
        case 3:
          result = _context3.sent;
          return _context3.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("FamilyDetailsController Error:", error);
          res.status(500).json({
            message: "Internal server error (createFamilyDetails)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.updateFamilyDetailsController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return updateFamilyDetails(req);
        case 3:
          result = _context4.sent;
          return _context4.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("updateFamilyDetails Error:", _context4.t0);
          res.status(500).json({
            error: "Something went wrong please try again (updateFamilyDetails)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
exports.deleteFamilyDetailsController = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          _context5.next = 3;
          return deleteFamilyDetails(req);
        case 3:
          result = _context5.sent;
          return _context5.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context5.prev = 7;
          _context5.t0 = _context5["catch"](0);
          logger.error("deleteFamilyDetails Error:", _context5.t0);
          res.status(500).json({
            error: "Something went wrong please try again (deleteFamilyDetails)"
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 7]]);
  }));
  return function (_x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/orderHistoryController.js":
/*!**********************************************************!*\
  !*** ./app/controllers/member/orderHistoryController.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../services/member/orderHistoryService */ "./app/services/member/orderHistoryService.js"),
  GetOrderDetailsById = _require.GetOrderDetailsById,
  getTranscationDetails = _require.getTranscationDetails;
var _require2 = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require2.logger;
exports.getOrdersByUserIdType = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var orderResult;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return GetOrderDetailsById(req);
        case 3:
          orderResult = _context.sent;
          return _context.abrupt("return", res.status(orderResult.status).json(orderResult.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getOrdersByUserIdType Error:", _context.t0);
          res.status(500).json({
            success: false,
            error: "Internal server error (getOrdersByUserIdType)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getTranscationDetails = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var TransResult;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getTranscationDetails(req);
        case 3:
          TransResult = _context2.sent;
          return _context2.abrupt("return", res.status(TransResult.status).json(TransResult.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getTranscationDetails Error:", error);
          res.status(500).json({
            success: false,
            error: "Internal server error (getTranscationDetails)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/paymentController.js":
/*!*****************************************************!*\
  !*** ./app/controllers/member/paymentController.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var bodyParser = __webpack_require__(/*! body-parser */ "body-parser");
var _require = __webpack_require__(/*! ../../middlewares/logger */ "./app/middlewares/logger.js"),
  logger = _require.logger;
var stripeAPI = __webpack_require__(/*! ../../utils/stripe */ "./app/utils/stripe.js");
var _require2 = __webpack_require__(/*! ../../services/admin/userService */ "./app/services/admin/userService.js"),
  getUserByUserId = _require2.getUserByUserId;
exports.getCards = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var userId, customer, cards;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          userId = req.userId;
          _context.next = 4;
          return getUserByUserId(userId);
        case 4:
          customer = _context.sent;
          _context.prev = 5;
          _context.next = 8;
          return stripeAPI.paymentMethods.list({
            customer: customer._id,
            type: "card"
          });
        case 8:
          cards = _context.sent;
          res.status(200).json(cards.data);
          _context.next = 16;
          break;
        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](5);
          logger.error("getCards Error:", _context.t0);
          res.status(400).json({
            error: "an error occured, unable to get cards"
          });
        case 16:
          _context.next = 20;
          break;
        case 18:
          _context.prev = 18;
          _context.t1 = _context["catch"](0);
        case 20:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 18], [5, 12]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.paymentIntent = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var _req$body, bookingdetails, payment_method_types, amount, currency, description, receipt_email, shipping, paymentIntent;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _req$body = req.body, bookingdetails = _req$body.bookingdetails, payment_method_types = _req$body.payment_method_types, amount = _req$body.amount, currency = _req$body.currency, description = _req$body.description, receipt_email = _req$body.receipt_email, shipping = _req$body.shipping;
          _context2.prev = 1;
          _context2.next = 4;
          return stripeAPI.paymentIntents.create({
            bookingdetails: bookingdetails,
            amount: amount,
            currency: currency,
            description: description,
            payment_method_types: payment_method_types,
            receipt_email: receipt_email,
            shipping: shipping
          });
        case 4:
          paymentIntent = _context2.sent;
          res.status(200).json({
            clientSecret: paymentIntent.client_secret,
            id: paymentIntent.id
          });
          _context2.next = 12;
          break;
        case 8:
          _context2.prev = 8;
          _context2.t0 = _context2["catch"](1);
          logger.error("paymentIntent Error:", _context2.t0);
          res.status(400).json({
            error: "an error occured, unable to create payment intent"
          });
        case 12:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[1, 8]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.PaymentSetupIntent = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var userId, customer, setupIntent;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          userId = req.userId;
          _context3.next = 3;
          return getUserByUserId(userId);
        case 3:
          customer = _context3.sent;
          _context3.prev = 4;
          _context3.next = 7;
          return stripeAPI.setupIntents.create({
            customer: customer._id
          });
        case 7:
          setupIntent = _context3.sent;
          res.status(200).json(setupIntent);
          _context3.next = 15;
          break;
        case 11:
          _context3.prev = 11;
          _context3.t0 = _context3["catch"](4);
          logger.error("PaymentSetupIntent Error:", _context3.t0);
          res.status(400).json({
            error: "an error occured, unable to create setup intent"
          });
        case 15:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[4, 11]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.PaymentUpdateIntent = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var userId, paymentIntentId, customer, paymentIntent;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          userId = req.userId, paymentIntentId = req.body.paymentIntentId;
          _context4.next = 3;
          return getUserByUserId(userId);
        case 3:
          customer = _context4.sent;
          _context4.prev = 4;
          _context4.next = 7;
          return stripeAPI.paymentIntents.update(paymentIntentId, {
            customer: customer._id
          });
        case 7:
          paymentIntent = _context4.sent;
          res.status(200).json({
            clientSecret: paymentIntent.client_secret
          });
          _context4.next = 15;
          break;
        case 11:
          _context4.prev = 11;
          _context4.t0 = _context4["catch"](4);
          logger.error("PaymentUpdateIntent Error:", _context4.t0);
          res.status(400).json({
            error: "unable to update payment intent"
          });
        case 15:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[4, 11]]);
  }));
  return function (_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
exports.createCheckoutSession = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var domainUrl, _req$body2, line_items, customer_email, session;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.prev = 0;
          domainUrl = http://localhost:3000;
          _req$body2 = req.body, line_items = _req$body2.line_items, customer_email = _req$body2.customer_email; // check req body has line items and email
          if (!(!line_items || !customer_email)) {
            _context5.next = 5;
            break;
          }
          return _context5.abrupt("return", res.status(400).json({
            error: "missing required session parameters"
          }));
        case 5:
          _context5.next = 7;
          return stripeAPI.checkout.sessions.create({
            payment_method_types: ["card"],
            mode: "payment",
            line_items: line_items,
            customer_email: customer_email,
            success_url: "".concat(domainUrl, "/success?session_id={CHECKOUT_SESSION_ID}"),
            cancel_url: "".concat(domainUrl, "/canceled"),
            shipping_address_collection: {
              allowed_countries: ["GB", "US"]
            }
          });
        case 7:
          session = _context5.sent;
          res.status(200).json({
            sessionId: session.id
          });
          _context5.next = 15;
          break;
        case 11:
          _context5.prev = 11;
          _context5.t0 = _context5["catch"](0);
          logger.error("createCheckoutSession:", _context5.t0);
          res.status(500).json({
            error: "Internal server error (createCheckoutSession)"
          });
        case 15:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[0, 11]]);
  }));
  return function (_x9, _x10) {
    return _ref5.apply(this, arguments);
  };
}();
exports.getPaymentMethods = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {
    var currentUser, customer, cards;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          currentUser = req.currentUser;
          _context6.next = 3;
          return getCustomer(currentUser.uid);
        case 3:
          customer = _context6.sent;
          _context6.prev = 4;
          _context6.next = 7;
          return stripeAPI.paymentMethods.list({
            customer: customer.id,
            type: "card"
          });
        case 7:
          cards = _context6.sent;
          res.status(200).json(cards.data);
          _context6.next = 15;
          break;
        case 11:
          _context6.prev = 11;
          _context6.t0 = _context6["catch"](4);
          logger.error("getPaymentMethods:", _context6.t0);
          res.status(400).json({
            error: "an error occured, unable to get cards"
          });
        case 15:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[4, 11]]);
  }));
  return function (_x11, _x12) {
    return _ref6.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/sevaController.js":
/*!**************************************************!*\
  !*** ./app/controllers/member/sevaController.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/member/sevaService */ "./app/services/member/sevaService.js"),
  createBookings = _require2.createBookings,
  getSevaList = _require2.getSevaList,
  getSevaBookingDetailsByBookingType = _require2.getSevaBookingDetailsByBookingType;
exports.createBookingsController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return createBookings(req);
        case 3:
          result = _context.sent;
          return _context.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("createBookingsController Error:", error);
          res.status(500).json({
            success: false,
            error: "Internal server error (createBookings)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getSevaList = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getSevaList(req);
        case 3:
          serviceResult = _context2.sent;
          return _context2.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("getSevaList Error:", _context2.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getSevaList)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.getSevaListController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var serviceResult;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return getSevaBookingDetailsByBookingType(req);
        case 3:
          serviceResult = _context3.sent;
          return _context3.abrupt("return", res.status(serviceResult.status).json(serviceResult.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getSevaBookingDetailsController)"
          });
        case 10:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/userProfileController.js":
/*!*********************************************************!*\
  !*** ./app/controllers/member/userProfileController.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/member/userProfile/userProfileService */ "./app/services/member/userProfile/userProfileService.js"),
  getUserProfileByUserId = _require2.getUserProfileByUserId,
  createUserProfile = _require2.createUserProfile,
  updateUserProfile = _require2.updateUserProfile,
  deleteUserAndProfile = _require2.deleteUserAndProfile;
exports.getUserProfileByUserId = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var profile;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return getUserProfileByUserId(req.params.userId);
        case 3:
          profile = _context.sent;
          return _context.abrupt("return", res.status(profile.status).json(profile.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("getUserProfilesService Error:", _context.t0);
          res.status(500).json({
            error: "Internal server error (getUserProfilesService)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.createUserProfileController = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return createUserProfile(req);
        case 3:
          result = _context2.sent;
          return _context2.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          logger.error("createUserProfileController Error:", error);
          res.status(500).json({
            message: "Internal server error (createUserProfile)"
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.updateUserProfileController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return updateUserProfile(req);
        case 3:
          result = _context3.sent;
          return _context3.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](0);
          logger.error("updateProduct Error:", _context3.t0);
          res.status(500).json({
            error: "Something went wrong please try again (updateUserProfile)"
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 7]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
exports.deleteUserProfileController = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return deleteUserAndProfile(req);
        case 3:
          result = _context4.sent;
          return _context4.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](0);
          logger.error("updateProduct Error:", _context4.t0);
          res.status(500).json({
            error: "Something went wrong please try again (deleteUserProfile)"
          });
        case 11:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 7]]);
  }));
  return function (_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/volunteerController.js":
/*!*******************************************************!*\
  !*** ./app/controllers/member/volunteerController.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../services/member/volunteerService */ "./app/services/member/volunteerService.js"),
  createVolunteers = _require2.createVolunteers,
  getVolunteers = _require2.getVolunteers,
  updateVolunteer = _require2.updateVolunteer;
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
exports.createVolunteersController = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return createVolunteers(req);
        case 3:
          result = _context.sent;
          return _context.abrupt("return", res.status(result.status).json(result.data));
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          logger.error("createVolunteersController Error:", error);
          res.status(500).json({
            success: false,
            error: "Internal server error (createVolunteersController)"
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 7]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
exports.getVolunteersController = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var volunteerResult;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return getVolunteers(req);
        case 3:
          volunteerResult = _context2.sent;
          return _context2.abrupt("return", res.status(volunteerResult.status).json(volunteerResult.data));
        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2["catch"](0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (getVolunteers)"
          });
        case 10:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
exports.updateVolunteerStatusController = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var _volunteerResult$data, volunteerResult, VolunterObj;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return updateVolunteer(req);
        case 3:
          volunteerResult = _context3.sent;
          if ((volunteerResult === null || volunteerResult === void 0 || (_volunteerResult$data = volunteerResult.data.volunteer) === null || _volunteerResult$data === void 0 ? void 0 : _volunteerResult$data.approveStatus) == "approved") {
            VolunterObj = {
              name: volunteerResult === null || volunteerResult === void 0 ? void 0 : volunteerResult.data.volunteer.name,
              email: volunteerResult === null || volunteerResult === void 0 ? void 0 : volunteerResult.data.volunteer.email
            };
            SendApprovEmail(VolunterObj, "");
          }
          return _context3.abrupt("return", res.status(volunteerResult.status).json(volunteerResult.data));
        case 8:
          _context3.prev = 8;
          _context3.t0 = _context3["catch"](0);
          console.log(_context3.t0);
          res.status(500).json({
            success: false,
            error: "Something went wrong please try again (updateVolunteerStatusController)"
          });
        case 12:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[0, 8]]);
  }));
  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
var SendApprovEmail = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(user, activationLink) {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          new Email(user, activationLink, "volunteer approval", type = "volapprove").volunteerApprove();
        case 1:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function SendApprovEmail(_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();

/***/ }),

/***/ "./app/controllers/member/webhookController.js":
/*!*****************************************************!*\
  !*** ./app/controllers/member/webhookController.js ***!
  \*****************************************************/
/***/ (() => {

// // Import necessary modules
// const stripeAPI = require('../../utils/stripe')
// const sendEmail = require('../../utils/sendEmail')
// const { sendSMS } = require('../../utils/sendSMS')
// const { logger } = require('../../middlewares/logger')

// //testing purpose not added in real time please ignore this file as of now
// const webHookHandlers = {
//   'checkout.session.completed': async (data) => {
//     try {
//       console.log('Checkout completed successfully', data)
//       const customerEmail = 'shashikanth033@gmail.com'
//       const lineItems = {}

//       // Send SMS
//       const smsResult = await sendSMS('+918123192799', 'Payment succeeded')

//       // Send Email
//       const emailResult = await sendEmail(
//         customerEmail,
//         'Payment Confirmation',
//         'Thank you for your payment.',
//       )

//       // Update MongoDB
//       const mongoDBUpdateResult = await updateMongoDB(customerEmail, lineItems)

//     } catch (error) {
//       console.error('Error processing checkout.session.completed event:', error)
//     }
//   },

//   'payment_intent.succeeded': async (data) => {
//     try {
//       console.log('Payment succeeded', data)
//       // Get relevant data from the event
//       const paymentIntent = data

//       // Additional logic for successful payment intent
//     } catch (error) {
//       console.error('Error processing payment_intent.succeeded event:', error)
//     }
//   },

//   'payment_intent.payment_failed': async (data) => {
//     try {
//       console.log('Payment Failed', data)
//       // Get relevant data from the event
//       const paymentFailedIntent = data

//       // Additional logic for failed payment intent
//     } catch (error) {
//       console.error(
//         'Error processing payment_intent.payment_failed event:',
//         error,
//       )
//     }
//   },
//   // Handle other event types as needed
// }

// exports.handleWebhook = async (req, res) => {
//   const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET

//   const sig = req.headers['stripe-signature']
//   let event

//   try {
//     event = stripeAPI.webhooks.constructEvent(req.rawBody, sig, endpointSecret)
//   } catch (err) {
//     console.error('Webhook Error:', err.message)
//     return res.status(400).json({ error: `Webhook Error: ${err.message}` })
//   }

//   // Handle the event
//   const eventType = event.type
//   if (webHookHandlers[eventType]) {
//     await webHookHandlers[eventType](event)
//   } else {
//     // Unexpected event type
//     console.warn(`Unhandled webhook event type: ${eventType}`)
//   }

//   // Return a 200 response to acknowledge receipt of the event
//   res.json({ received: true })
// }

/***/ }),

/***/ "./app/middlewares/authJwt.js":
/*!************************************!*\
  !*** ./app/middlewares/authJwt.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var jwt = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
var config = __webpack_require__(/*! ../config/authConfig.js */ "./app/config/authConfig.js");
var db = __webpack_require__(/*! ../models/auth/index.js */ "./app/models/auth/index.js");
var User = db.user;
var Role = db.role;
verifyToken = function verifyToken(req, res, next) {
  var token = req.session.token;
  if (!token) {
    return res.status(403).send({
      message: "No token provided!"
    });
  }
  jwt.verify(token, config.secret, function (err, decoded) {
    if (err) {
      return res.status(401).send({
        message: "Unauthorized!"
      });
    }
    req.userId = decoded.id;
    next();
  });
};
isAdmin = function isAdmin(req, res, next) {
  try {
    User.findById(req.userId).exec(function (err, user) {
      if (err) {
        res.status(500).send({
          message: err
        });
        return;
      }
      if (!user) {
        res.status(500).send({
          success: false,
          message: "user error"
        });
        return;
      }
      Role.find({
        _id: {
          $in: user.roles
        }
      }, function (err, roles) {
        if (err) {
          res.status(500).send({
            message: err
          });
          return;
        }
        for (var i = 0; i < roles.length; i++) {
          if (roles[i].name === "admin") {
            next();
            return;
          }
        }
        res.status(403).send({
          message: "Require Admin Role!"
        });
        return;
      });
    });
  } catch (error) {
    res.status(500).send({
      message: "Something went wrong"
    });
  }
};
var authJwt = {
  verifyToken: verifyToken,
  isAdmin: isAdmin
};
module.exports = authJwt;

/***/ }),

/***/ "./app/middlewares/basicAuth.js":
/*!**************************************!*\
  !*** ./app/middlewares/basicAuth.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var config = __webpack_require__(/*! ../config/authConfig */ "./app/config/authConfig.js");
authenticate = function authenticate(req, res, next) {
  var authHeader = req.headers.authorization;
  if (!authHeader) {
    return res.status(401).json({
      error: "Unauthorized"
    });
  }
  var base64Credentials = authHeader.split(" ")[1];
  var credentials = Buffer.from(base64Credentials, "base64").toString("ascii");
  var _credentials$split = credentials.split(":"),
    _credentials$split2 = _slicedToArray(_credentials$split, 2),
    username = _credentials$split2[0],
    password = _credentials$split2[1];
  if (username === config.userName && password === config.password) {
    next();
  } else {
    res.status(401).json({
      error: "Unauthorized"
    });
  }
};
var basicAuth = {
  authenticate: authenticate
};
module.exports = basicAuth;

/***/ }),

/***/ "./app/middlewares/index.js":
/*!**********************************!*\
  !*** ./app/middlewares/index.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var authJwt = __webpack_require__(/*! ./authJwt */ "./app/middlewares/authJwt.js");
var verifySignUp = __webpack_require__(/*! ./verifySignUp */ "./app/middlewares/verifySignUp.js");
var basicAuth = __webpack_require__(/*! ./basicAuth */ "./app/middlewares/basicAuth.js");
var logger = __webpack_require__(/*! ./logger */ "./app/middlewares/logger.js");
module.exports = {
  authJwt: authJwt,
  basicAuth: basicAuth,
  verifySignUp: verifySignUp,
  logger: logger
};

/***/ }),

/***/ "./app/middlewares/logger.js":
/*!***********************************!*\
  !*** ./app/middlewares/logger.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! winston */ "winston"),
  createLogger = _require.createLogger,
  format = _require.format,
  transports = _require.transports;
var combine = format.combine,
  label = format.label,
  timestamp = format.timestamp,
  printf = format.printf;

// Make sure this exists
var LOG_FILE_PATH = "logs/error.log";
var errorLogs = new transports.File({
  filename: LOG_FILE_PATH,
  level: "error"
});
var infoLogs = new transports.File({
  filename: LOG_FILE_PATH,
  level: "info"
});
var console = new transports.Console();
var logFormat = printf(function (_ref) {
  var level = _ref.level,
    message = _ref.message,
    logLabel = _ref.label,
    logTimestamp = _ref.timestamp;
  return "".concat(logTimestamp, " [").concat(logLabel, "] ").concat(level, ": ").concat(message);
});
var logger = createLogger({
  level: ({"NODE_ENV":development,"BCRYPT_SALT":10,"EMAIL_FROM":srinivas@northgaze.com,"HOST":localhost,"DATABASE_NAME":client_db,"DBPORT":27017,"SERVERPORT":8080,"CLIENT_URL":http://localhost:3000,"SERVER_URL":http://localhost:8080,"STRIPE_SECRET_KEY":sk_test_w9FFlXYuNXBQAGbAMcbTfvUc,"STRIPE_PUBLIC_KEY":pk_test_kLXZAIgM9jW9flHREsbzTupH,"STRIPE_WEBHOOK_SECRET":whsec_7057daa4eb33db727887280e7c0f93917b387893812976790eb65ae7329cf338,"TWILIO_ACCOUNT_SID":AC165edf7f114aacef138978fa52a1f539,"TWILIO_AUTH_TOKEN":c0e67d325930e935703b56620e446af5,"TWILIO_PHONE_NUMBER":+19294941821,"SENDGRID_API_KEY":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}).LOG_LEVEL || "info",
  format: combine(label({
    label: development
  }), timestamp(), logFormat),
  transports: [errorLogs, infoLogs]
});
if (development === "production") {
  logger.remove(file);
  logger.remove(infoFile);
  logger.add(console);
}
module.exports = logger;

/***/ }),

/***/ "./app/middlewares/verifySignUp.js":
/*!*****************************************!*\
  !*** ./app/middlewares/verifySignUp.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var db = __webpack_require__(/*! ../models/auth */ "./app/models/auth/index.js");
var ROLES = db.ROLES;
var User = db.user;
checkDuplicateUsernameOrEmail = function checkDuplicateUsernameOrEmail(req, res, next) {
  // Username
  User.findOne({
    email: req.body.email
  }).exec(function (err, user) {
    if (err) {
      res.status(500).send({
        message: err
      });
      return;
    }
    if (user) {
      res.status(400).send({
        message: "Failed! Email is already in use!"
      });
      return;
    }

    // Email
    User.findOne({
      email: req.body.email
    }).exec(function (err, user) {
      if (err) {
        res.status(500).send({
          message: err
        });
        return;
      }
      if (user) {
        res.status(400).send({
          message: "Failed! Email is already in use!"
        });
        return;
      }
      next();
    });
  });
};
checkRolesExisted = function checkRolesExisted(req, res, next) {
  if (req.body.roles) {
    for (var i = 0; i < req.body.roles.length; i++) {
      if (!ROLES.includes(req.body.roles[i])) {
        res.status(400).send({
          message: "Failed! Role ".concat(req.body.roles[i], " does not exist!")
        });
        return;
      }
    }
  }
  next();
};
var verifySignUp = {
  checkDuplicateUsernameOrEmail: checkDuplicateUsernameOrEmail,
  checkRolesExisted: checkRolesExisted
};
module.exports = verifySignUp;

/***/ }),

/***/ "./app/models/admin/adminTranscationModel.js":
/*!***************************************************!*\
  !*** ./app/models/admin/adminTranscationModel.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var addressSchema = new Schema({
  billingAddress: String,
  billingCity: String,
  billingZipcode: String,
  state: String
});
var TranscationSchema = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  tabelRefId: {
    type: mongoose.Schema.Types.ObjectId
  },
  billingAddress: addressSchema,
  serviceName: {
    type: String,
    required: true
  },
  items: {
    type: [mongoose.Schema.Types.Mixed],
    "default": []
  },
  ticketId: {
    type: String,
    required: true
  },
  devoteeId: {
    type: Number
  },
  paymentMode: {
    type: Array
  },
  stripeReferenceId: {
    type: String
  },
  orderType: {
    type: String,
    required: true
  },
  amount: {
    type: Number,
    required: true
  },
  devoteeName: {
    type: String
  },
  devoteePhoneNumber: {
    type: String
  },
  devoteeEmail: {
    type: String
  },
  transStatus: {
    type: String
  },
  orderNotes: {
    type: String
  },
  createdAt: {
    type: Date,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("TranscationDetails", TranscationSchema);

/***/ }),

/***/ "./app/models/admin/donationModel.js":
/*!*******************************************!*\
  !*** ./app/models/admin/donationModel.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var AdminDonationTypeSchema = new Schema({
  donationType: {
    type: String
  },
  frequency: {
    type: String
  },
  denominations: {
    type: Array
  },
  description: {
    type: String
  },
  image: {
    type: String
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Admin_DonationType", AdminDonationTypeSchema);

/***/ }),

/***/ "./app/models/admin/eventModel.js":
/*!****************************************!*\
  !*** ./app/models/admin/eventModel.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var eventSchema = new Schema({
  name: {
    type: String
  },
  bookingPrice: {
    type: String
  },
  organizer: {
    type: String
  },
  organizerPhone: {
    type: String
  },
  organizerEmail: {
    type: String
  },
  startDate: {
    type: String
  },
  endDate: {
    type: String
  },
  venue: {
    type: String
  },
  description: {
    type: String
  },
  image: {
    type: String
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  },
  deleted: {
    type: Boolean,
    "default": false
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Event", eventSchema);

/***/ }),

/***/ "./app/models/admin/godModel.js":
/*!**************************************!*\
  !*** ./app/models/admin/godModel.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var GodSchema = new Schema({
  name: {
    type: String,
    required: true,
    unique: true
  },
  image: {
    type: Array
  },
  worshipDay: {
    type: Array,
    required: true
  },
  deleted: {
    type: Boolean,
    "default": false
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("God", GodSchema);

/***/ }),

/***/ "./app/models/admin/productModel.js":
/*!******************************************!*\
  !*** ./app/models/admin/productModel.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var ProductSchema = new Schema({
  name: {
    type: String,
    required: true,
    unique: true
  },
  price: {
    type: Number,
    required: true
  },
  discount: {
    type: Number
  },
  shortDescription: {
    type: String,
    required: true
  },
  fullDescription: {
    type: String,
    required: true
  },
  image: {
    type: String,
    required: true
  },
  categories: {
    type: Array
  },
  stock: {
    type: Number,
    required: true
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  },
  deleted: {
    type: Boolean,
    "default": false
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Product", ProductSchema);

/***/ }),

/***/ "./app/models/admin/serviceModel.js":
/*!******************************************!*\
  !*** ./app/models/admin/serviceModel.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var ServiceSchema = new Schema({
  godId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "God",
    required: true
  },
  godName: {
    type: String,
    ref: "God",
    required: true
  },
  serviceType: {
    type: String,
    required: true
  },
  serviceName: {
    type: String,
    required: true
  },
  image: {
    type: String
  },
  daysahead: {
    type: String
  },
  occurmonth: {
    type: Array
  },
  frequency: {
    type: String
  },
  bookingType: {
    type: String,
    required: true
  },
  price: {
    type: String,
    required: true
  },
  description: {
    type: String
  },
  deleted: {
    type: Boolean,
    "default": false
  },
  accountNumber: {
    type: String
  },
  isTaxable: {
    type: Boolean
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Service", ServiceSchema);

/***/ }),

/***/ "./app/models/admin/sevaModel.js":
/*!***************************************!*\
  !*** ./app/models/admin/sevaModel.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var AdminSevaBookingSchema = new Schema({
  sevaBookingType: {
    type: String
  },
  category: {
    type: String
  },
  name: {
    type: String
  },
  amount: {
    type: Number
  },
  description: {
    type: String
  },
  image: {
    type: String
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Admin_SevaBooking", AdminSevaBookingSchema);

/***/ }),

/***/ "./app/models/auth/index.js":
/*!**********************************!*\
  !*** ./app/models/auth/index.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
mongoose.Promise = global.Promise;
var db = {};
db.mongoose = mongoose;
db.user = __webpack_require__(/*! ./userModel */ "./app/models/auth/userModel.js");
db.role = __webpack_require__(/*! ./roleModel */ "./app/models/auth/roleModel.js");
db.ROLES = ["user", "admin"];
module.exports = db;

/***/ }),

/***/ "./app/models/auth/roleModel.js":
/*!**************************************!*\
  !*** ./app/models/auth/roleModel.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Role = mongoose.model("Role", new mongoose.Schema({
  name: String
}));
module.exports = Role;

/***/ }),

/***/ "./app/models/auth/tokenModel.js":
/*!***************************************!*\
  !*** ./app/models/auth/tokenModel.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var tokenSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    required: true,
    ref: "user"
  },
  token: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now,
    expires: 900
  }
});
module.exports = mongoose.model("Token", tokenSchema);

/***/ }),

/***/ "./app/models/auth/userModel.js":
/*!**************************************!*\
  !*** ./app/models/auth/userModel.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var User = mongoose.model("User", new mongoose.Schema({
  firstName: {
    type: String,
    required: true
  },
  lastName: String,
  email: {
    type: String,
    required: true,
    unique: true
  },
  devoteeId: {
    type: Number,
    unique: true
  },
  TermConcent: {
    type: Boolean,
    required: true
  },
  token: String,
  password: {
    type: String,
    required: true
  },
  countrycode: {
    type: String,
    required: true
  },
  IsPhoneActive: {
    type: Boolean
  },
  IsEmailActive: {
    type: Boolean
  },
  phonenumber: {
    type: String,
    required: true,
    unique: true
  },
  activationToken: String,
  activationTokenExpiry: {
    type: Date
  },
  createdDate: {
    type: Date,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  },
  deleted: {
    type: Boolean,
    "default": false
  },
  activated: Boolean,
  roles: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: "Role"
  }],
  viewRoles: {
    type: Array
  }
}));
module.exports = User;

/***/ }),

/***/ "./app/models/member/bookingHistory/bookingHistoryModel.js":
/*!*****************************************************************!*\
  !*** ./app/models/member/bookingHistory/bookingHistoryModel.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var addressSchema = new Schema({
  billingAddress: String,
  billingCity: String,
  billingZipcode: String,
  state: String
});
var itemSchema = new Schema({
  name: String,
  productId: String,
  quantity: Number,
  price: {
    type: Number,
    "default": 0
  }
});
var BookingSchema = new Schema(_defineProperty(_defineProperty(_defineProperty({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  OrderId: {
    type: String,
    required: true
  },
  devoteeId: {
    type: Number
  },
  paymentMethod: {
    type: String
  },
  paymentMode: {
    type: Array
  },
  StripeReferenceId: {
    type: String
  },
  orderType: {
    type: String,
    required: true
  },
  amount: {
    type: Number,
    required: true
  },
  Items: {
    type: [itemSchema],
    "default": []
  },
  billingAddress: addressSchema,
  OrderDate: {
    type: String,
    required: true
  },
  devoteeName: {
    type: String
  },
  devoteePhoneNumber: {
    type: String
  },
  devoteeEmail: {
    type: String
  },
  transStatus: {
    type: String
  },
  orderNotes: {
    type: String
  }
}, "OrderDate", {
  type: Date,
  required: true,
  "default": Date.now
}), "createdAt", {
  type: Date,
  "default": Date.now
}), "modifiedAt", {
  type: Date,
  "default": Date.now
}), {
  timestamps: true
});
module.exports = mongoose.model("ShopOrders", BookingSchema);

/***/ }),

/***/ "./app/models/member/bookingHistory/eventHistoryModel.js":
/*!***************************************************************!*\
  !*** ./app/models/member/bookingHistory/eventHistoryModel.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var addressSchema = new Schema({
  billingAddress: String,
  billingCity: String,
  billingZipcode: String,
  state: String
});
var ServiceSchema = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  eventId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Event",
    required: true
  },
  orderType: {
    type: String
  },
  eventName: {
    type: String
  },
  devoteeName: {
    type: String
  },
  devoteePhoneNumber: {
    type: String
  },
  venue: {
    type: String
  },
  devoteeEmail: {
    type: String
  },
  devoteeId: {
    type: Number
  },
  paymentMethod: {
    type: String
  },
  billingAddress: addressSchema,
  organizerPhone: {
    type: String
  },
  organizerEmail: {
    type: String
  },
  orderNotes: {
    type: String
  },
  stripeReferenceId: {
    type: String
  },
  amount: {
    type: Number
  },
  transStatus: {
    type: String
  },
  paymentMode: {
    type: Array
  },
  eventBookId: {
    type: String
  },
  organizer: {
    type: String
  },
  startDate: {
    type: String,
    required: true
  },
  endDate: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("EventBookingHistory", ServiceSchema);

/***/ }),

/***/ "./app/models/member/bookingHistory/serviceHistoryModel.js":
/*!*****************************************************************!*\
  !*** ./app/models/member/bookingHistory/serviceHistoryModel.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var addressSchema = new Schema({
  billingAddress: String,
  billingCity: String,
  billingZipcode: String,
  state: String
});
var ServiceSchema = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  orderType: {
    type: String
  },
  godName: {
    type: String
  },
  serviceType: {
    type: String
  },
  devoteeName: {
    type: String
  },
  devoteePhoneNumber: {
    type: String
  },
  devoteeEmail: {
    type: String
  },
  devoteeId: {
    type: Number
  },
  paymentMethod: {
    type: String
  },
  billingAddress: addressSchema,
  ServiceName: {
    type: String
  },
  NoOfPerson: {
    type: Number
  },
  orderNotes: {
    type: String
  },
  stripeReferenceId: {
    type: String
  },
  amount: {
    type: Number
  },
  transStatus: {
    type: String
  },
  paymentMode: {
    type: Array
  },
  ServiceBookId: {
    type: String
  },
  bookingDate: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("ServiceHistory", ServiceSchema);

/***/ }),

/***/ "./app/models/member/bookingHistory/sevaHistoryModel.js":
/*!**************************************************************!*\
  !*** ./app/models/member/bookingHistory/sevaHistoryModel.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var addressSchema = new Schema({
  billingAddress: String,
  billingCity: String,
  billingZipcode: String,
  state: String
});
var ServiceSchema = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  orderType: {
    type: String
  },
  sevaType: {
    type: String
  },
  devoteeName: {
    type: String
  },
  devoteePhoneNumber: {
    type: String
  },
  devoteeEmail: {
    type: String
  },
  devoteeId: {
    type: Number
  },
  paymentMethod: {
    type: String
  },
  billingAddress: addressSchema,
  sevaName: {
    type: String
  },
  NoOfPerson: {
    type: Number
  },
  orderNotes: {
    type: String
  },
  stripeReferenceId: {
    type: String
  },
  amount: {
    type: Number
  },
  transStatus: {
    type: String
  },
  paymentMode: {
    type: Array
  },
  sevaBookId: {
    type: String
  },
  bookingDate: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("SevaHistory", ServiceSchema);

/***/ }),

/***/ "./app/models/member/cartModel.js":
/*!****************************************!*\
  !*** ./app/models/member/cartModel.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var ObjectID = mongoose.Schema.Types.ObjectId;
var Schema = mongoose.Schema;
var cartSchema = new Schema({
  owner: {
    type: ObjectID,
    required: false,
    ref: "User"
  },
  sessionId: {
    type: String
  },
  totalProducts: {
    type: Number,
    "default": 0
  },
  totalQuantity: {
    type: Number,
    "default": 0
  },
  totalPrice: {
    type: Number,
    "default": 0
  },
  items: [{
    productId: {
      type: ObjectID,
      ref: "Product",
      required: true
    },
    subTotal: Number,
    name: String,
    discount: Number,
    image: String,
    quantity: {
      type: Number,
      required: true,
      // min: 1,
      "default": 0
    },
    price: {
      type: Number,
      "default": 0
    }
  }],
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
    // expires: 2400,
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Cart", cartSchema);

/***/ }),

/***/ "./app/models/member/donationModel.js":
/*!********************************************!*\
  !*** ./app/models/member/donationModel.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var addressSchema = new Schema({
  address1: String,
  address2: String,
  city: String,
  postalCode: String,
  province: String
});
var itemSchema = new Schema({
  name: String,
  description: String,
  quantity: Number,
  price: {
    type: Number,
    "default": 0
  },
  totalPrice: Number
});
var DonationSchema = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  donateTypeId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Admin_DonationType",
    required: true
  },
  donationType: {
    type: String
  },
  devoteeName: {
    type: String
  },
  devoteeId: {
    type: Number
  },
  prasadamOverEmail: {
    type: Boolean
  },
  paymentMethod: {
    type: String
  },
  donatedItems: {
    type: [itemSchema],
    "default": []
  },
  billingAddress: addressSchema,
  devoteeEmail: {
    type: String
  },
  frequency: {
    type: String
  },
  devoteePhoneNumber: {
    type: String
  },
  orderNotes: {
    type: String
  },
  stripeReferenceId: {
    type: String
  },
  amount: {
    type: Number
  },
  transStatus: {
    type: String
  },
  paymentMode: {
    type: Array
  },
  taxReceiptNo: {
    type: String
  },
  donationDate: {
    type: Date,
    required: true,
    "default": Date.now
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Donation", DonationSchema);

/***/ }),

/***/ "./app/models/member/enquiryModel.js":
/*!*******************************************!*\
  !*** ./app/models/member/enquiryModel.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var enquirySchema = new Schema({
  name: {
    type: String
  },
  email: {
    type: String,
    required: true
  },
  subject: {
    type: String
  },
  message: {
    type: String
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  }
});
module.exports = mongoose.model("Enquiry", enquirySchema);

/***/ }),

/***/ "./app/models/member/sevaModel.js":
/*!****************************************!*\
  !*** ./app/models/member/sevaModel.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var BookingSchema = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  bookingId: {
    type: String,
    required: true
  },
  category: {
    type: String,
    required: true
  },
  NoOfPerson: {
    type: Number
  },
  name: {
    type: String,
    required: true
  },
  amount: {
    type: Number,
    required: true
  },
  comments: {
    type: String
  },
  bookingDate: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Booking", BookingSchema);

/***/ }),

/***/ "./app/models/member/userProfile/counterModel.js":
/*!*******************************************************!*\
  !*** ./app/models/member/userProfile/counterModel.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var counterSchema = new mongoose.Schema({
  _id: {
    type: String,
    required: true
  },
  seq: {
    type: Number,
    "default": 0
  }
});
var Counter = mongoose.model("Counter", counterSchema);
module.exports = Counter;

/***/ }),

/***/ "./app/models/member/userProfile/deceasedDetailsModel.js":
/*!***************************************************************!*\
  !*** ./app/models/member/userProfile/deceasedDetailsModel.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var DeceasedPersonDetails = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  userProfileId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "UserProfile"
  },
  relationship: {
    type: String
  },
  personName: {
    type: String
  },
  masam: {
    type: String
  },
  deathDate: {
    type: String
  },
  tithi: {
    type: String
  },
  deathPlace: {
    type: String
  },
  paksha: {
    type: String
  },
  deathTime: {
    type: String
  },
  star: {
    type: String
  },
  gotram: {
    type: String
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("deceasedPersonDetails", DeceasedPersonDetails);

/***/ }),

/***/ "./app/models/member/userProfile/familyDetailsModel.js":
/*!*************************************************************!*\
  !*** ./app/models/member/userProfile/familyDetailsModel.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var FamilyDetailsSchema = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  userProfileId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "UserProfile"
  },
  relationship: {
    type: String
  },
  firstName: {
    type: String
  },
  lastName: {
    type: String
  },
  dateOfBirth: {
    type: String
  },
  star: {
    type: String
  },
  gotram: {
    type: String
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("familyDetails", FamilyDetailsSchema);

/***/ }),

/***/ "./app/models/member/userProfile/userProfileModel.js":
/*!***********************************************************!*\
  !*** ./app/models/member/userProfile/userProfileModel.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var homeAddressSchema = new Schema({
  address1: String,
  address2: String,
  city: String,
  postalCode: String,
  province: String
});
var billingAddressSchema = new Schema({
  address1: String,
  address2: String,
  city: String,
  postalCode: String,
  province: String
});
var familySchema = new Schema({
  relationship: String,
  firstName: String,
  lastName: String,
  email: String,
  mobileNumber: String,
  homeNumber: String,
  dateOfBirth: String,
  nationality: String,
  star: String,
  gotram: String,
  language: String
});
var deceasedAncestorsSchema = new Schema({
  relationship: String,
  personName: String,
  deathDate: String,
  deathTime: String,
  placeOfDeath: String,
  paksha: String,
  masam: String,
  star: String,
  gotram: String,
  language: String,
  tithi: String,
  tithiDetails: String
});
var UserProfileSchema = new Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true
  },
  firstName: {
    type: String,
    required: true
  },
  lastName: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true
  },
  mobileNumber: {
    type: Number,
    required: true
  },
  homeNumber: {
    type: Number
  },
  dateOfBirth: {
    type: String
  },
  nationality: {
    type: String
  },
  star: {
    type: String
  },
  gotram: {
    type: String
  },
  classification: {
    type: String
  },
  homeAddress: homeAddressSchema,
  billingAddress: billingAddressSchema,
  family: [familySchema],
  deceasedAncestors: [deceasedAncestorsSchema],
  isProfilecreated: {
    type: Boolean,
    "default": false
  },
  createdAt: {
    type: Date,
    required: true,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("UserProfile", UserProfileSchema);

/***/ }),

/***/ "./app/models/member/volunteerModel.js":
/*!*********************************************!*\
  !*** ./app/models/member/volunteerModel.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var Schema = mongoose.Schema;
var VoluteersSchema = new Schema({
  beforevolunteer: {
    type: Boolean,
    required: true
  },
  description: {
    type: String
  },
  address: {
    type: String,
    required: true
  },
  city: {
    type: String,
    required: true
  },
  state: {
    type: String,
    required: true
  },
  zipcode: {
    type: String,
    required: true
  },
  possibleDays: {
    type: Array,
    required: true
  },
  activityList: {
    type: Array
  },
  otheractivities: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true
  },
  islive: {
    type: Boolean,
    required: true
  },
  isveg: {
    type: Boolean,
    required: true
  },
  iswhatsupnumber: {
    type: Boolean
  },
  name: {
    type: String,
    required: true
  },
  phone: {
    type: String,
    required: true
  },
  approveStatus: {
    type: String
  },
  createdAt: {
    type: Date,
    "default": Date.now
  },
  modifiedAt: {
    type: Date,
    "default": Date.now
  }
}, {
  timestamps: true
});
module.exports = mongoose.model("Volunteers", VoluteersSchema);

/***/ }),

/***/ "./app/routes/admin/contentRoutes.js":
/*!*******************************************!*\
  !*** ./app/routes/admin/contentRoutes.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var controller = __webpack_require__(/*! ../../controllers/admin/contentController */ "./app/controllers/admin/contentController.js");
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var _require2 = __webpack_require__(/*! ../../utils/fileUpload */ "./app/utils/fileUpload.js"),
  upload = _require2.upload;
var staticFolder = upload("uploads/staticfile");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/content", controller.getStaticContentJson);
  app.post("/api/staticupload", [authJwt.verifyToken, authJwt.isAdmin], staticFolder.single("staticFile"), controller.uploadStaticFile);
};

/***/ }),

/***/ "./app/routes/admin/donationsRoutes.js":
/*!*********************************************!*\
  !*** ./app/routes/admin/donationsRoutes.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/admin/donationController */ "./app/controllers/admin/donationController.js");
var _require2 = __webpack_require__(/*! ../../utils/fileUpload */ "./app/utils/fileUpload.js"),
  upload = _require2.upload;
var donationFolder = upload("uploads/donations"); //donations folder path

module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.post("/api/donation-type", [authJwt.verifyToken, authJwt.isAdmin], donationFolder.single("image"), controller.addDonationTypeController);
  app.put("/api/donation-type/:id", [authJwt.verifyToken, authJwt.isAdmin], donationFolder.single("image"), controller.updateDonationTypeDetailsController);
  app.post("/api/donation-type/details",
  // [authJwt.verifyToken, authJwt.isAdmin],
  controller.getDonationTypesByFrequencyController);
  app["delete"]("/api/donation-type/:id", [authJwt.verifyToken, authJwt.isAdmin], controller.deleteDonationTypeDetailsController);
  app.get("/api/donation-type/:id",
  // [authJwt.verifyToken, authJwt.isAdmin],
  controller.getDonationTypeDetailsByIdController);
  app.get("/api/donations-type/:type",
  // [authJwt.verifyToken, authJwt.isAdmin],
  controller.getDonationTypeDetailsByTypeController);
};

/***/ }),

/***/ "./app/routes/admin/eventRoutes.js":
/*!*****************************************!*\
  !*** ./app/routes/admin/eventRoutes.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/admin/eventController */ "./app/controllers/admin/eventController.js");
var _require2 = __webpack_require__(/*! ../../utils/fileUpload */ "./app/utils/fileUpload.js"),
  upload = _require2.upload;
var imageFolder = upload("uploads/events"); //products folder path

module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/events", controller.getAllEventsController);
  app.get("/api/event/:id", controller.getEventByIdController);
  app.post("/api/events", [authJwt.verifyToken, authJwt.isAdmin], imageFolder.single("image"), controller.addEventsController);
  app.post("/api/events/filter", controller.getEventsByFilterController);
  app.put("/api/event/:id", [authJwt.verifyToken, authJwt.isAdmin], imageFolder.single("image"), controller.updateEventController);
  app.post("/api/event/delete/:id", [authJwt.verifyToken, authJwt.isAdmin], controller.deleteEventController);
  app.post("/api/event-booking", [authJwt.verifyToken], controller.bookEventController);
};

/***/ }),

/***/ "./app/routes/admin/godRoutes.js":
/*!***************************************!*\
  !*** ./app/routes/admin/godRoutes.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/admin/godController */ "./app/controllers/admin/godController.js");
var _require2 = __webpack_require__(/*! ../../utils/fileUpload */ "./app/utils/fileUpload.js"),
  upload = _require2.upload;
var godFolder = upload("uploads/gods"); //services folder path

module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/gods", controller.getAllGodsListController);
  app.get("/api/god/:id", controller.getGodDetailsByIdController);
  app.post("/api/god", [authJwt.verifyToken, authJwt.isAdmin], godFolder.single("image"), controller.addGodDetailsController);
  app.put("/api/god/:id", [authJwt.verifyToken, authJwt.isAdmin], godFolder.single("image"), controller.updateGodDetailsController);
  app.post("/api/god/delete/:id", [authJwt.verifyToken, authJwt.isAdmin], controller.deleteGodDetailsController);
};

/***/ }),

/***/ "./app/routes/admin/index.js":
/*!***********************************!*\
  !*** ./app/routes/admin/index.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var contentRoutes = __webpack_require__(/*! ./contentRoutes */ "./app/routes/admin/contentRoutes.js");
var donationsRoutes = __webpack_require__(/*! ./donationsRoutes */ "./app/routes/admin/donationsRoutes.js");
var eventsRoutes = __webpack_require__(/*! ./eventRoutes */ "./app/routes/admin/eventRoutes.js");
var godRoutes = __webpack_require__(/*! ./godRoutes */ "./app/routes/admin/godRoutes.js");
var productsRoutes = __webpack_require__(/*! ./productsRoutes */ "./app/routes/admin/productsRoutes.js");
var serviceRoutes = __webpack_require__(/*! ./serviceRoutes */ "./app/routes/admin/serviceRoutes.js");
var sevaRoutes = __webpack_require__(/*! ./sevaRoutes */ "./app/routes/admin/sevaRoutes.js");
var userRoutes = __webpack_require__(/*! ./userRoutes */ "./app/routes/admin/userRoutes.js");
function loadAdminRoutes(app) {
  contentRoutes(app);
  donationsRoutes(app);
  eventsRoutes(app);
  godRoutes(app);
  productsRoutes(app);
  serviceRoutes(app);
  sevaRoutes(app);
  userRoutes(app);
}
module.exports = loadAdminRoutes;

/***/ }),

/***/ "./app/routes/admin/productsRoutes.js":
/*!********************************************!*\
  !*** ./app/routes/admin/productsRoutes.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/admin/productController */ "./app/controllers/admin/productController.js");
var _require2 = __webpack_require__(/*! ../../utils/fileUpload */ "./app/utils/fileUpload.js"),
  upload = _require2.upload;
var productFolder = upload("uploads/products"); //products folder path

module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/products", controller.getAllProductsController);
  app.get("/api/product/:id", controller.getProductByIdController);
  app.post("/api/product", [authJwt.verifyToken, authJwt.isAdmin], productFolder.single("productimage"), controller.createProductController);
  app.put("/api/product/:id", [authJwt.verifyToken, authJwt.isAdmin], productFolder.single("productimage"), controller.updateProductController);
  app.post("/api/product/delete/:id", [authJwt.verifyToken, authJwt.isAdmin], controller.deleteProductController);
};

/***/ }),

/***/ "./app/routes/admin/serviceRoutes.js":
/*!*******************************************!*\
  !*** ./app/routes/admin/serviceRoutes.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/admin/serviceController */ "./app/controllers/admin/serviceController.js");
var _require2 = __webpack_require__(/*! ../../utils/fileUpload */ "./app/utils/fileUpload.js"),
  upload = _require2.upload;
var serviceFolder = upload("uploads/services");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/services", controller.getAllServicesController);
  app.get("/api/service/:godId", controller.getServicesByGodIdController);
  app.get("/api/services/:_id", [authJwt.verifyToken], controller.getServiceByServiceIdController);
  app.post("/api/service/:godId", [authJwt.verifyToken, authJwt.isAdmin], serviceFolder.single("image"), controller.addServiceDetailsController);
  app.put("/api/service/:godId/:serviceId", [authJwt.verifyToken, authJwt.isAdmin], serviceFolder.single("image"), controller.updateServiceDetailsController);
  app.put("/api/service/:serviceId", [authJwt.verifyToken, authJwt.isAdmin], controller.inActivateServiceByServiceIdController);
  app.put("/api/service/:godId", [authJwt.verifyToken, authJwt.isAdmin], controller.inActivateServiceByGodIdController);
  app.post("/api/service-booking", [authJwt.verifyToken], controller.createServiceBookController);
};

/***/ }),

/***/ "./app/routes/admin/sevaRoutes.js":
/*!****************************************!*\
  !*** ./app/routes/admin/sevaRoutes.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/admin/sevaController */ "./app/controllers/admin/sevaController.js");
var _require2 = __webpack_require__(/*! ../../utils/fileUpload */ "./app/utils/fileUpload.js"),
  upload = _require2.upload;
var sevaFolder = upload("uploads/seva"); //services folder path

module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.post("/api/seva/booking", [authJwt.verifyToken, authJwt.isAdmin], sevaFolder.single("image"), controller.addSevaBookingDetailsController);
  app.put("/api/seva/booking/:id", [authJwt.verifyToken, authJwt.isAdmin], sevaFolder.single("image"), controller.updateSevaBookingDetailsController);
  app.post("/api/seva/booking-details", [authJwt.verifyToken, authJwt.isAdmin], controller.getSevaBookingDetailsController);
  app["delete"]("/api/seva/booking/:id", [authJwt.verifyToken, authJwt.isAdmin], controller.deleteSevaBookingDetailsController);
  app.get("/api/seva/booking/:id", controller.getSevaBookingDetailsByIdController);
};

/***/ }),

/***/ "./app/routes/admin/userRoutes.js":
/*!****************************************!*\
  !*** ./app/routes/admin/userRoutes.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/admin/userController */ "./app/controllers/admin/userController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/users", [authJwt.verifyToken, authJwt.isAdmin], controller.getAllUsers);
  app.get("/api/:userId/user", [authJwt.verifyToken, authJwt.isAdmin], controller.getUserByUserId);
  app.post("/api/user", [authJwt.verifyToken, authJwt.isAdmin], controller.addUserByAdmin);
  app.put("/api/:userId/roles", [authJwt.verifyToken, authJwt.isAdmin], controller.updateUserRole);
  app.put("/api/:userId/activate", [authJwt.verifyToken, authJwt.isAdmin], controller.activateOrDeActivateUserByUserId);
};

/***/ }),

/***/ "./app/routes/auth/authRoutes.js":
/*!***************************************!*\
  !*** ./app/routes/auth/authRoutes.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  verifySignUp = _require.verifySignUp;
var controller = __webpack_require__(/*! ../../controllers/auth/authController */ "./app/controllers/auth/authController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });

  /** POST Methods */
  /**
   * @swagger
   * '/api/user/register':
   *  post:
   *     tags:
   *     - User Controller
   *     summary: Create a user
   *     requestBody:
   *      required: true
   *      content:
   *        application/json:
   *           schema:
   *            type: object
   *            required:
   *              - username
   *              - email
   *              - password
   *              - countrycode
   *              - phonenumber
   *            properties:
   *              username:
   *                type: string
   *                default: johndoe
   *              phonenumber:
   *                type: string
   *                default: 8123192799
   *              countrycode:
   *                type: string
   *                default: +91
   *              email:
   *                type: string
   *                default: johndoe@mail.com
   *              password:
   *                type: string
   *                default: johnDoe20!@
   *     responses:
   *      201:
   *        description: Created
   *      409:
   *        description: Conflict
   *      404:
   *        description: Not Found
   *      500:
   *        description: Server Error
   */
  app.post("/api/auth/signup", [verifySignUp.checkDuplicateUsernameOrEmail, verifySignUp.checkRolesExisted], controller.signup);
  app.get("/activate/:token", controller.activateEmail);
  app.post("/api/auth/signin", controller.signin);
  app.post("/api/auth/signout", controller.signout);
  app.post("/api/auth/requestResetPassword", controller.resetPasswordRequestController);
  app.post("/api/generateotp", controller.getOTP);
  app.post("/api/verifyotp", controller.verifyOTP);
  app.post("/api/auth/resetPassword", controller.resetPasswordController);
};

/***/ }),

/***/ "./app/routes/auth/index.js":
/*!**********************************!*\
  !*** ./app/routes/auth/index.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var authRoutes = __webpack_require__(/*! ./authRoutes */ "./app/routes/auth/authRoutes.js");
function loadAuthRoutes(app) {
  authRoutes(app);
}
module.exports = loadAuthRoutes;

/***/ }),

/***/ "./app/routes/member/cartRoutes.js":
/*!*****************************************!*\
  !*** ./app/routes/member/cartRoutes.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var controller = __webpack_require__(/*! ../../controllers/member/cartController */ "./app/controllers/member/cartController.js");
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/cart/:id", authJwt.verifyToken, controller.getCart);
  app.post("/api/cart", authJwt.verifyToken, controller.addCart);
  app.post("/api/checkout/addhistory", authJwt.verifyToken, controller.AddBookingHistory);
  app.get("/api/cart/delete/:productId/:userid/:type", authJwt.verifyToken, controller.deleteCart);
};

/***/ }),

/***/ "./app/routes/member/deceasedDetailsRoutes.js":
/*!****************************************************!*\
  !*** ./app/routes/member/deceasedDetailsRoutes.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/member/deceasedDetailsController */ "./app/controllers/member/deceasedDetailsController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/deceased/:userId/:id", [authJwt.verifyToken], controller.getDeceasedDetailsByUserId);
  app.get("/api/deceasedlist/:userId", [authJwt.verifyToken], controller.getDeceasedListByUserId);
  app.post("/api/deceased/:userId", [authJwt.verifyToken], controller.createDeceasedDetailsController);
  app.put("/api/deceased/:userId/:deceasedId", [authJwt.verifyToken], controller.updateDeceasedDetailsController);
  app["delete"]("/api/deceased/:userId/:deceasedId", [authJwt.verifyToken], controller.deleteDeceasedDetailsController);
};

/***/ }),

/***/ "./app/routes/member/donationRoutes.js":
/*!*********************************************!*\
  !*** ./app/routes/member/donationRoutes.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/member/donationController */ "./app/controllers/member/donationController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.post("/api/donation/:userId", [authJwt.verifyToken], controller.addDonationDetailsController);
  app.get("/api/donation/:userId", [authJwt.verifyToken], controller.getDonationDetailsByUserId);
  app.get("/api/donation/:userId/:donationId", [authJwt.verifyToken], controller.getDonationDetailsByDonationId);
};

/***/ }),

/***/ "./app/routes/member/enquiryRoutes.js":
/*!********************************************!*\
  !*** ./app/routes/member/enquiryRoutes.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var controller = __webpack_require__(/*! ../../controllers/member/enquiryController */ "./app/controllers/member/enquiryController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.post("/api/sendEnquiry", controller.sendEnquiryController);
};

/***/ }),

/***/ "./app/routes/member/familyDetailsRoutes.js":
/*!**************************************************!*\
  !*** ./app/routes/member/familyDetailsRoutes.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/member/familyDetailsController */ "./app/controllers/member/familyDetailsController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/family/:userId/:id", [authJwt.verifyToken], controller.getFamilyDetailsByUserId);
  app.get("/api/families/:userId", [authJwt.verifyToken], controller.getFamilyListByUserId);
  app.post("/api/family/:userId", [authJwt.verifyToken], controller.createFamilyDetailsController);
  app.put("/api/family/:userId/:familyId", [authJwt.verifyToken], controller.updateFamilyDetailsController);
  app["delete"]("/api/family/:userId/:familyId", [authJwt.verifyToken], controller.deleteFamilyDetailsController);
};

/***/ }),

/***/ "./app/routes/member/index.js":
/*!************************************!*\
  !*** ./app/routes/member/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var enquiryRoutes = __webpack_require__(/*! ./enquiryRoutes */ "./app/routes/member/enquiryRoutes.js");
var cartRoutes = __webpack_require__(/*! ./cartRoutes */ "./app/routes/member/cartRoutes.js");
var donationsRoutes = __webpack_require__(/*! ./donationRoutes */ "./app/routes/member/donationRoutes.js");
var sevaRoutes = __webpack_require__(/*! ./sevaRoutes */ "./app/routes/member/sevaRoutes.js");
var useProfileRoutes = __webpack_require__(/*! ./userProfileRoutes */ "./app/routes/member/userProfileRoutes.js");
var familyDetailsRoutes = __webpack_require__(/*! ./familyDetailsRoutes */ "./app/routes/member/familyDetailsRoutes.js");
var deceasedDetailsRoutes = __webpack_require__(/*! ./deceasedDetailsRoutes */ "./app/routes/member/deceasedDetailsRoutes.js");
var volunteerRoutes = __webpack_require__(/*! ./volunteerRoutes */ "./app/routes/member/volunteerRoutes.js");
var paymentRoutes = __webpack_require__(/*! ./paymentRoutes */ "./app/routes/member/paymentRoutes.js");
var orderHistoryRoutes = __webpack_require__(/*! ./orderHistoryRoutes */ "./app/routes/member/orderHistoryRoutes.js");
var webhookRoutes = __webpack_require__(/*! ./webhookRoutes */ "./app/routes/member/webhookRoutes.js");
function loadMemberRoutes(app) {
  enquiryRoutes(app);
  cartRoutes(app);
  donationsRoutes(app);
  sevaRoutes(app);
  useProfileRoutes(app);
  familyDetailsRoutes(app);
  deceasedDetailsRoutes(app);
  volunteerRoutes(app);
  paymentRoutes(app);
  orderHistoryRoutes(app);
  //webhookRoutes(app);
}
module.exports = loadMemberRoutes;

/***/ }),

/***/ "./app/routes/member/orderHistoryRoutes.js":
/*!*************************************************!*\
  !*** ./app/routes/member/orderHistoryRoutes.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/member/orderHistoryController */ "./app/controllers/member/orderHistoryController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/orders/:id/:type", controller.getOrdersByUserIdType);
  app.get("/api/getTranscation", controller.getTranscationDetails);
};

/***/ }),

/***/ "./app/routes/member/paymentRoutes.js":
/*!********************************************!*\
  !*** ./app/routes/member/paymentRoutes.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var PaymentController = __webpack_require__(/*! ../../controllers/member/paymentController */ "./app/controllers/member/paymentController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.post("/api/create-checkout-session", [authJwt.verifyToken], PaymentController.createCheckoutSession);
  app.post("/api/create-payment-intent", [authJwt.verifyToken], PaymentController.paymentIntent);
  app.post("/api/save-payment-method", [authJwt.verifyToken], PaymentController.PaymentSetupIntent);
  app.get("/api/get-payment-methods", [authJwt.verifyToken], PaymentController.getCards);
  app.put("/api/update-payment-intent", [authJwt.verifyToken], PaymentController.PaymentUpdateIntent);
};

/***/ }),

/***/ "./app/routes/member/sevaRoutes.js":
/*!*****************************************!*\
  !*** ./app/routes/member/sevaRoutes.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/member/sevaController */ "./app/controllers/member/sevaController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.post("/api/booking", [authJwt.verifyToken], controller.createBookingsController);
  app.get("/api/bookings", controller.getSevaList);
  app.get("/api/sevas", controller.getSevaListController);
};

/***/ }),

/***/ "./app/routes/member/userProfileRoutes.js":
/*!************************************************!*\
  !*** ./app/routes/member/userProfileRoutes.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/member/userProfileController */ "./app/controllers/member/userProfileController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/profile/:userId", [authJwt.verifyToken], controller.getUserProfileByUserId);
  app.post("/api/profile/:userId", [authJwt.verifyToken], controller.createUserProfileController);
  app.put("/api/profile/:userId", [authJwt.verifyToken], controller.updateUserProfileController);
  app["delete"]("/api/profile/:userId", [authJwt.verifyToken, authJwt.isAdmin], controller.deleteUserProfileController);
};

/***/ }),

/***/ "./app/routes/member/volunteerRoutes.js":
/*!**********************************************!*\
  !*** ./app/routes/member/volunteerRoutes.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var controller = __webpack_require__(/*! ../../controllers/member/volunteerController */ "./app/controllers/member/volunteerController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.post("/api/volunteers", controller.createVolunteersController);
  app.get("/api/volunteers", [authJwt.verifyToken, authJwt.isAdmin], controller.getVolunteersController);
  app.put("/api/volunteerapprove", [authJwt.verifyToken, authJwt.isAdmin], controller.updateVolunteerStatusController);
};

/***/ }),

/***/ "./app/routes/member/webhookRoutes.js":
/*!********************************************!*\
  !*** ./app/routes/member/webhookRoutes.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  authJwt = _require.authJwt;
var webhook = __webpack_require__(/*! ../../controllers/member/webhookController */ "./app/controllers/member/webhookController.js");
module.exports = function (app) {
  app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept");
    next();
  });
  app.get("/api/webhook", [authJwt.verifyToken, authJwt.isAdmin], webhook.handleWebhook);
};

/***/ }),

/***/ "./app/services/admin/donationService.js":
/*!***********************************************!*\
  !*** ./app/services/admin/donationService.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var DonationType = __webpack_require__(/*! ../../models/admin/donationModel */ "./app/models/admin/donationModel.js");
var _require = __webpack_require__(/*! ../../utils */ "./app/utils/index.js"),
  isNullOrUndefined = _require.isNullOrUndefined;
var _require2 = __webpack_require__(/*! ../../utils/constants */ "./app/utils/constants.js"),
  PUBLIC_URL = _require2.PUBLIC_URL;
var addDonationType = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var denominations, _data, imagePath, donationTypeData, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          denominations = JSON.parse(req.body.denominations);
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body))) {
            _context.next = 4;
            break;
          }
          _data = {
            success: false,
            message: "invalid request"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 400
          });
        case 4:
          imagePath = PUBLIC_URL + "uploads/donations/" + req.file.filename; // TODO:: update validation
          donationTypeData = {
            donationType: req.body.donationType,
            frequency: req.body.frequency,
            description: req.body.description,
            denominations: denominations,
            image: imagePath,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          _context.next = 8;
          return new DonationType(donationTypeData).save();
        case 8:
          data = {
            success: true,
            message: "donation type details added successfully"
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 10:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function addDonationType(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var getDonationTypesByFrequency = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var donationTypeDetails, data, _data2;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          if (!(req.body && req.body.frequency)) {
            _context2.next = 6;
            break;
          }
          _context2.next = 3;
          return DonationType.find({
            frequency: req.body.frequency
          });
        case 3:
          donationTypeDetails = _context2.sent;
          _context2.next = 9;
          break;
        case 6:
          _context2.next = 8;
          return DonationType.find({});
        case 8:
          donationTypeDetails = _context2.sent;
        case 9:
          if (donationTypeDetails) {
            _context2.next = 14;
            break;
          }
          data = {
            success: true,
            message: "donation type details doesn't exist"
          };
          return _context2.abrupt("return", {
            data: data,
            status: 404
          });
        case 14:
          _data2 = {
            success: true,
            donationTypeDetails: donationTypeDetails
          };
          return _context2.abrupt("return", {
            data: _data2,
            status: 200
          });
        case 16:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getDonationTypesByFrequency(_x3) {
    return _ref2.apply(this, arguments);
  };
}();
var updateDonationTypeDetails = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req) {
    var _req$file;
    var _data3, existingDonationType, _data4, denominations, _req$file2, imagePath, result, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body) || isNullOrUndefined(req.params.id))) {
            _context3.next = 3;
            break;
          }
          _data3 = {
            success: false,
            message: "invalid request"
          };
          return _context3.abrupt("return", {
            data: _data3,
            status: 400
          });
        case 3:
          _context3.next = 5;
          return DonationType.findOne({
            _id: req.params.id
          });
        case 5:
          existingDonationType = _context3.sent;
          if (existingDonationType) {
            _context3.next = 9;
            break;
          }
          _data4 = {
            success: false,
            message: "donation type details doesn't exist"
          };
          return _context3.abrupt("return", {
            data: _data4,
            status: 404
          });
        case 9:
          denominations = JSON.parse(req.body.denominations);
          req.body.denominations = denominations;
          if (isNullOrUndefined((_req$file = req.file) === null || _req$file === void 0 ? void 0 : _req$file.filename)) {
            req.body.image = existingDonationType.image;
          } else {
            imagePath = PUBLIC_URL + "uploads/donations/" + (req === null || req === void 0 || (_req$file2 = req.file) === null || _req$file2 === void 0 ? void 0 : _req$file2.filename);
            req.body.image = imagePath;
          }
          _context3.next = 14;
          return DonationType.findByIdAndUpdate(req.params.id, {
            $set: req.body
          }, {
            runValidators: true,
            "new": true
          });
        case 14:
          result = _context3.sent;
          data = {
            success: true,
            message: "donation type details updated successfully",
            result: result
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 17:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function updateDonationTypeDetails(_x4) {
    return _ref3.apply(this, arguments);
  };
}();
var deleteDonationTypeDetails = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {
    var _data5, existingDonationType, _data6, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.params.id))) {
            _context4.next = 3;
            break;
          }
          _data5 = {
            success: false,
            message: "invalid request"
          };
          return _context4.abrupt("return", {
            data: _data5,
            status: 400
          });
        case 3:
          _context4.next = 5;
          return DonationType.findOne({
            _id: req.params.id
          });
        case 5:
          existingDonationType = _context4.sent;
          if (existingDonationType) {
            _context4.next = 9;
            break;
          }
          _data6 = {
            success: false,
            message: "donation type details doesn't exist"
          };
          return _context4.abrupt("return", {
            data: _data6,
            status: 404
          });
        case 9:
          _context4.next = 11;
          return DonationType.deleteOne({
            _id: req.params.id
          });
        case 11:
          data = {
            success: true,
            message: "donation type details deleted successfully"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 13:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function deleteDonationTypeDetails(_x5) {
    return _ref4.apply(this, arguments);
  };
}();
var getDonationTypeDetailsById = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var _data7, donationType, _data8, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.params.id))) {
            _context5.next = 3;
            break;
          }
          _data7 = {
            success: false,
            message: "invalid request"
          };
          return _context5.abrupt("return", {
            data: _data7,
            status: 400
          });
        case 3:
          _context5.next = 5;
          return DonationType.findOne({
            _id: req.params.id
          });
        case 5:
          donationType = _context5.sent;
          if (donationType) {
            _context5.next = 9;
            break;
          }
          _data8 = {
            success: false,
            message: "donation type details not found"
          };
          return _context5.abrupt("return", {
            data: _data8,
            status: 404
          });
        case 9:
          data = {
            success: true,
            donationType: donationType
          };
          return _context5.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function getDonationTypeDetailsById(_x6, _x7) {
    return _ref5.apply(this, arguments);
  };
}();
var getDonationTypeDetailsByType = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {
    var _data9, donationType, _data10, data;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.params.type))) {
            _context6.next = 3;
            break;
          }
          _data9 = {
            success: false,
            message: "invalid request"
          };
          return _context6.abrupt("return", {
            data: _data9,
            status: 400
          });
        case 3:
          _context6.next = 5;
          return DonationType.findOne({
            donationType: req.params.type
          });
        case 5:
          donationType = _context6.sent;
          if (donationType) {
            _context6.next = 9;
            break;
          }
          _data10 = {
            success: false,
            message: "donation type details not found"
          };
          return _context6.abrupt("return", {
            data: _data10,
            status: 404
          });
        case 9:
          data = {
            success: true,
            donationType: donationType
          };
          return _context6.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return function getDonationTypeDetailsByType(_x8, _x9) {
    return _ref6.apply(this, arguments);
  };
}();
module.exports = {
  addDonationType: addDonationType,
  getDonationTypesByFrequency: getDonationTypesByFrequency,
  updateDonationTypeDetails: updateDonationTypeDetails,
  deleteDonationTypeDetails: deleteDonationTypeDetails,
  getDonationTypeDetailsByType: getDonationTypeDetailsByType,
  getDonationTypeDetailsById: getDonationTypeDetailsById
};

/***/ }),

/***/ "./app/services/admin/eventService.js":
/*!********************************************!*\
  !*** ./app/services/admin/eventService.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var validator = __webpack_require__(/*! validator */ "validator");
var User = __webpack_require__(/*! ../../models/auth/userModel */ "./app/models/auth/userModel.js");
var Event = __webpack_require__(/*! ../../models/admin/eventModel */ "./app/models/admin/eventModel.js");
var eventHistory = __webpack_require__(/*! ../../models/member/bookingHistory/eventHistoryModel */ "./app/models/member/bookingHistory/eventHistoryModel.js");
var _require = __webpack_require__(/*! ../../utils */ "./app/utils/index.js"),
  isNullOrUndefined = _require.isNullOrUndefined,
  isDateInPresentOrFuture = _require.isDateInPresentOrFuture,
  isValidDateDDMMYYYYFormat = _require.isValidDateDDMMYYYYFormat,
  convertStringToObjectId = _require.convertStringToObjectId,
  generateUniqueNumber = _require.generateUniqueNumber;
var _require2 = __webpack_require__(/*! ../../utils/constants */ "./app/utils/constants.js"),
  PUBLIC_URL = _require2.PUBLIC_URL;
var _require3 = __webpack_require__(/*! ../../utils/sendSMS */ "./app/utils/sendSMS.js"),
  sendSMS = _require3.sendSMS;
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var _require4 = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require4.logger;
var AdminTranscationModel = __webpack_require__(/*! ../../models/admin/adminTranscationModel */ "./app/models/admin/adminTranscationModel.js");
var getAllEvents = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var events;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return Event.find({
            deleted: false
          });
        case 2:
          events = _context.sent;
          return _context.abrupt("return", {
            success: true,
            events: events,
            count: events.length
          });
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getAllEvents() {
    return _ref.apply(this, arguments);
  };
}();
var getEventById = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var event;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return Event.findOne({
            _id: req.params.id
          });
        case 2:
          event = _context2.sent;
          return _context2.abrupt("return", {
            success: true,
            event: event
          });
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getEventById(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var addEvents = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req) {
    var event, imagePath;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          event = req.body;
          if (!(event.length < 1)) {
            _context3.next = 3;
            break;
          }
          return _context3.abrupt("return", {
            success: false,
            message: "No event found"
          });
        case 3:
          imagePath = PUBLIC_URL + "uploads/events/" + req.file.filename;
          req.body.image = imagePath;
          _context3.next = 7;
          return new Event({
            name: event.name,
            bookingPrice: event.bookingPrice,
            organizer: event.organizer,
            organizerPhone: event.organizerPhone,
            orgEmail: event.organizerEmail,
            startDate: event.startDate,
            endDate: event.endDate,
            venue: event.venue,
            image: event.image,
            description: event.description,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          }).save();
        case 7:
          return _context3.abrupt("return", {
            success: true,
            message: "Events added successfully"
          });
        case 8:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function addEvents(_x2) {
    return _ref3.apply(this, arguments);
  };
}();
var getEventsByDateFilter = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {
    var stDate, endDate, events;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(!req || !(req !== null && req !== void 0 && req.startDate) || !(req !== null && req !== void 0 && req.endDate))) {
            _context4.next = 2;
            break;
          }
          return _context4.abrupt("return", {
            success: false,
            message: "Bad Request"
          });
        case 2:
          stDate = convertToDate(req.startDate); // dd-mm-yyyy
          endDate = convertToDate(req.endDate); // dd-mm-yyyy
          _context4.next = 6;
          return Event.find({
            deleted: false,
            $and: [{
              startDate: {
                $gte: stDate.toLocaleDateString()
              }
            }, {
              endDate: {
                $lte: endDate.toLocaleDateString()
              }
            }]
          });
        case 6:
          events = _context4.sent;
          return _context4.abrupt("return", {
            events: events,
            count: events.length
          });
        case 8:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function getEventsByDateFilter(_x3) {
    return _ref4.apply(this, arguments);
  };
}();
var updateEvent = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req) {
    var _req$file;
    var existingEvent, _req$file2, imagePath, event;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return Event.findOne({
            _id: req.params.id,
            deleted: false
          });
        case 2:
          existingEvent = _context5.sent;
          if (existingEvent) {
            _context5.next = 5;
            break;
          }
          return _context5.abrupt("return", {
            success: false,
            message: "Event doesn't exists"
          });
        case 5:
          if (isNullOrUndefined((_req$file = req.file) === null || _req$file === void 0 ? void 0 : _req$file.filename)) {
            req.body.image = existingEvent.image;
          } else {
            imagePath = PUBLIC_URL + "uploads/events/" + (req === null || req === void 0 || (_req$file2 = req.file) === null || _req$file2 === void 0 ? void 0 : _req$file2.filename);
            req.body.image = imagePath;
          }
          _context5.next = 8;
          return Event.findByIdAndUpdate(req.params.id, {
            $set: req.body
          }, {
            runValidators: true,
            "new": true
          });
        case 8:
          event = _context5.sent;
          return _context5.abrupt("return", {
            success: true,
            message: "Event updated successfully",
            event: event
          });
        case 10:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function updateEvent(_x4) {
    return _ref5.apply(this, arguments);
  };
}();
var convertToDate = function convertToDate(dateString) {
  var _dateString$split = dateString.split("-"),
    _dateString$split2 = _slicedToArray(_dateString$split, 3),
    day = _dateString$split2[0],
    month = _dateString$split2[1],
    year = _dateString$split2[2];
  return new Date(year, month - 1, day);
};
var deleteEvent = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req) {
    var existingEvent, event;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.next = 2;
          return Event.findOne({
            _id: req.params.id,
            deleted: false
          });
        case 2:
          existingEvent = _context6.sent;
          if (existingEvent) {
            _context6.next = 5;
            break;
          }
          return _context6.abrupt("return", {
            success: false,
            message: "Event doesn't exists"
          });
        case 5:
          _context6.next = 7;
          return Event.findByIdAndUpdate(req.params.id, {
            $set: {
              deleted: true
            },
            modifiedAt: Date.now()
          });
        case 7:
          event = _context6.sent;
          return _context6.abrupt("return", {
            success: true,
            message: "Event deleted successfully",
            event: event
          });
        case 9:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return function deleteEvent(_x5) {
    return _ref6.apply(this, arguments);
  };
}();
var createBookings = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req) {
    var _data, user, _data2, _data3, toPhoneNumber, message, serviceShortName, serviceBookId, messageText, EmailObject, eventData, serHistory, savedService, lastInsertedId, adminTransData, data;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body) || isNullOrUndefined(req.body.userId))) {
            _context7.next = 3;
            break;
          }
          _data = {
            success: false,
            message: "invalid request"
          };
          return _context7.abrupt("return", {
            data: _data,
            status: 400
          });
        case 3:
          _context7.next = 5;
          return User.findOne({
            _id: req.body.userId,
            activated: true
          });
        case 5:
          user = _context7.sent;
          if (user) {
            _context7.next = 9;
            break;
          }
          _data2 = {
            success: false,
            message: "User not found"
          };
          return _context7.abrupt("return", {
            data: _data2,
            status: 404
          });
        case 9:
          if (convertStringToObjectId(req.body.userId).equals(user._id)) {
            _context7.next = 12;
            break;
          }
          _data3 = {
            success: false,
            message: "invalid request"
          };
          return _context7.abrupt("return", {
            data: _data3,
            status: 404
          });
        case 12:
          //send email and sms success or failur
          toPhoneNumber = "+918123192799"; // Replace with the recipient's phone number
          if (req.body.transStatus === "succeeded") {
            message = "Payment was successfull. Thank you for booking " + req.body.eventName;
          } else {
            message = "Payment was unsuccessfull. If amount debited it will refund to same account withing 3 to 4 days";
          }
          serviceShortName = "EVT";
          serviceBookId = serviceShortName + "_" + req.body.devoteeId + "/" + generateUniqueNumber();
          messageText = "Hello ".concat(req.body.devoteeName, ". ").concat(message, ". Booking Id:").concat(serviceBookId);
          sendSMS(toPhoneNumber, messageText);
          EmailObject = {
            name: req.body.devoteeName,
            email: req.body.devoteeEmail,
            message: message,
            bodyData: req.body,
            url: "http://localhost:3000/mybookings/list"
          };
          SendConfirmationEmail(EmailObject, "");
          eventData = {
            userId: user._id,
            eventBookId: serviceBookId,
            orderType: req.body.orderType,
            venue: req.body.venue,
            eventId: req.body.eventId,
            devoteeName: req.body.devoteeName,
            devoteeId: req.body.devoteeId,
            devoteeEmail: req.body.devoteeEmail,
            devoteePhoneNumber: req.body.devoteePhoneNumber,
            orderNotes: req.body.orderNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.amount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            paymentMethod: req.body.paymentMethod,
            eventName: req.body.eventName,
            startDate: req.body.startDate,
            endDate: req.body.endDate,
            organizer: req.body.organizer,
            organizerPhone: req.body.organizerPhone,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          serHistory = new eventHistory(eventData);
          _context7.next = 24;
          return serHistory.save();
        case 24:
          savedService = _context7.sent;
          lastInsertedId = savedService._id;
          adminTransData = {
            userId: user._id,
            tabelRefId: lastInsertedId,
            orderType: "events",
            serviceName: req.body.eventName,
            devoteeName: req.body.devoteeName,
            devoteeId: req.body.devoteeId,
            devoteeEmail: req.body.devoteeEmail,
            devoteePhoneNumber: req.body.devoteePhoneNumber,
            orderNotes: req.body.orderNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.amount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            ticketId: serviceBookId,
            items: [],
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          _context7.next = 29;
          return AdminTranscationModel.create(adminTransData);
        case 29:
          data = {
            success: true,
            message: "eventData details added successfully"
          };
          return _context7.abrupt("return", {
            data: data,
            status: 200
          });
        case 31:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return function createBookings(_x6) {
    return _ref7.apply(this, arguments);
  };
}();
var SendConfirmationEmail = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(user, activationLink) {
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          new Email(user, activationLink, "event booking email").eventConfirmation();
        case 1:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return function SendConfirmationEmail(_x7, _x8) {
    return _ref8.apply(this, arguments);
  };
}();
module.exports = {
  getAllEvents: getAllEvents,
  getEventById: getEventById,
  addEvents: addEvents,
  getEventsByDateFilter: getEventsByDateFilter,
  updateEvent: updateEvent,
  deleteEvent: deleteEvent,
  createBookings: createBookings
};

/***/ }),

/***/ "./app/services/admin/godService.js":
/*!******************************************!*\
  !*** ./app/services/admin/godService.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var God = __webpack_require__(/*! ../../models/admin/godModel */ "./app/models/admin/godModel.js");
var Service = __webpack_require__(/*! ../../models/admin/serviceModel */ "./app/models/admin/serviceModel.js");
var _require = __webpack_require__(/*! ../../utils/constants */ "./app/utils/constants.js"),
  allowedWorshipDays = _require.allowedWorshipDays,
  PUBLIC_URL = _require.PUBLIC_URL;
var _require2 = __webpack_require__(/*! ../../utils */ "./app/utils/index.js"),
  isNullOrUndefined = _require2.isNullOrUndefined;
var getAllGodsList = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var gods;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return God.find({
            deleted: false
          });
        case 2:
          gods = _context.sent;
          return _context.abrupt("return", {
            success: true,
            gods: gods,
            count: gods.length
          });
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getAllGodsList() {
    return _ref.apply(this, arguments);
  };
}();
var addGodDetails = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var workDays, isValid, _data, imagePath, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          workDays = JSON.parse(req.body.worshipDay);
          isValid = req && workDays && workDays.length > 0 && workDays.every(function (value) {
            return allowedWorshipDays.includes(value);
          });
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body.name) || !isValid)) {
            _context2.next = 5;
            break;
          }
          _data = {
            success: false,
            message: "invalid request"
          };
          return _context2.abrupt("return", {
            data: _data,
            status: 400
          });
        case 5:
          imagePath = PUBLIC_URL + "uploads/gods/" + req.file.filename;
          req.body.image = imagePath;
          _context2.next = 9;
          return new God({
            name: req.body.name,
            image: req.body.image,
            worshipDay: workDays,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          }).save();
        case 9:
          data = {
            success: true,
            message: "God details added successfully"
          };
          return _context2.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function addGodDetails(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var getGodDetailsById = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req) {
    var god, data, _data2;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return God.findOne({
            _id: req.params.id,
            deleted: false
          });
        case 2:
          god = _context3.sent;
          if (god) {
            _context3.next = 8;
            break;
          }
          data = {
            success: false,
            message: "God details doesn't exist"
          };
          return _context3.abrupt("return", {
            data: data,
            status: 404
          });
        case 8:
          _data2 = {
            success: true,
            god: god
          };
          return _context3.abrupt("return", {
            data: _data2,
            status: 200
          });
        case 10:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function getGodDetailsById(_x2) {
    return _ref3.apply(this, arguments);
  };
}();
var updateGodDetails = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {
    var _req$file, _req$body;
    var existingGod, workDays, _data3, _req$file2, imagePath, _req$body2, result, query, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return God.findOne({
            _id: req.params.id,
            deleted: false
          });
        case 2:
          existingGod = _context4.sent;
          workDays = JSON.parse(req.body.worshipDay);
          if (existingGod) {
            _context4.next = 7;
            break;
          }
          _data3 = {
            success: false,
            message: "God details doesn't exist"
          };
          return _context4.abrupt("return", {
            data: _data3,
            status: 404
          });
        case 7:
          if (isNullOrUndefined((_req$file = req.file) === null || _req$file === void 0 ? void 0 : _req$file.filename)) {
            req.body.image = existingGod.image;
          } else {
            imagePath = PUBLIC_URL + "uploads/gods/" + (req === null || req === void 0 || (_req$file2 = req.file) === null || _req$file2 === void 0 ? void 0 : _req$file2.filename);
            req.body.image = imagePath;
          }
          if (((_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.name) !== existingGod.name) {
            req.body.name = existingGod.name;
          } else {
            req.body.name = (_req$body2 = req.body) === null || _req$body2 === void 0 ? void 0 : _req$body2.name;
          }
          req.body.worshipDay = workDays;
          _context4.next = 12;
          return God.findByIdAndUpdate(req.params.id, {
            $set: req.body
          }, {
            runValidators: true,
            "new": true
          });
        case 12:
          result = _context4.sent;
          if (!(req.body && req.body.name && req.body.name !== null && existingGod.name !== req.body.name)) {
            _context4.next = 17;
            break;
          }
          query = {
            godId: req.params.id,
            deleted: false
          };
          _context4.next = 17;
          return Service.updateMany(query, {
            $set: {
              godName: req.body.name
            },
            modifiedAt: Date.now()
          });
        case 17:
          //
          data = {
            success: true,
            message: "God details updated successfully",
            result: result
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 19:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function updateGodDetails(_x3) {
    return _ref4.apply(this, arguments);
  };
}();
var deleteGodDetails = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req) {
    var existingGod, _data4, query, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return God.findOne({
            _id: req.params.id,
            deleted: false
          });
        case 2:
          existingGod = _context5.sent;
          if (existingGod) {
            _context5.next = 6;
            break;
          }
          _data4 = {
            success: false,
            message: "God details doesn't exist"
          };
          return _context5.abrupt("return", {
            data: _data4,
            status: 404
          });
        case 6:
          _context5.next = 8;
          return God.findByIdAndUpdate(req.params.id, {
            $set: {
              deleted: true
            },
            modifiedAt: Date.now()
          });
        case 8:
          query = {
            godId: req.params.id,
            deleted: false
          };
          _context5.next = 11;
          return Service.updateMany(query, {
            $set: {
              deleted: true
            },
            modifiedAt: Date.now()
          });
        case 11:
          data = {
            success: true,
            message: "God details deleted successfully"
          };
          return _context5.abrupt("return", {
            data: data,
            status: 200
          });
        case 13:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function deleteGodDetails(_x4) {
    return _ref5.apply(this, arguments);
  };
}();
module.exports = {
  getAllGodsList: getAllGodsList,
  addGodDetails: addGodDetails,
  getGodDetailsById: getGodDetailsById,
  updateGodDetails: updateGodDetails,
  deleteGodDetails: deleteGodDetails
};

/***/ }),

/***/ "./app/services/admin/productService.js":
/*!**********************************************!*\
  !*** ./app/services/admin/productService.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var Product = __webpack_require__(/*! ../../models/admin/productModel */ "./app/models/admin/productModel.js");
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var _require2 = __webpack_require__(/*! ../../utils/constants */ "./app/utils/constants.js"),
  PUBLIC_URL = _require2.PUBLIC_URL;
var _require3 = __webpack_require__(/*! ../../utils */ "./app/utils/index.js"),
  isNullOrUndefined = _require3.isNullOrUndefined;
var getAllProducts = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var products;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return Product.find({
            deleted: false
          });
        case 2:
          products = _context.sent;
          return _context.abrupt("return", {
            products: products,
            count: products.length
          });
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getAllProducts() {
    return _ref.apply(this, arguments);
  };
}();
var createProduct = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var imagePath, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          imagePath = PUBLIC_URL + "uploads/products/" + req.file.filename;
          req.body.image = imagePath;
          _context2.next = 4;
          return new Product({
            name: req.body.name,
            price: req.body.price,
            discount: req.body.discount,
            image: req.body.image,
            shortDescription: req.body.shortDescription,
            fullDescription: req.body.fullDescription,
            categories: req.body.categories,
            stock: req.body.stock,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          }).save();
        case 4:
          data = {
            success: true,
            message: "Product details added successfully"
          };
          return _context2.abrupt("return", {
            data: data,
            status: 200
          });
        case 6:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function createProduct(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var getProductById = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req) {
    var product, data, _data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return Product.findOne({
            _id: req.params.id,
            deleted: false
          });
        case 2:
          product = _context3.sent;
          if (product) {
            _context3.next = 8;
            break;
          }
          data = {
            success: false,
            message: "Product doesn't exist"
          };
          return _context3.abrupt("return", {
            data: data,
            status: 404
          });
        case 8:
          _data = {
            success: true,
            product: product
          };
          return _context3.abrupt("return", {
            data: _data,
            status: 200
          });
        case 10:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function getProductById(_x2) {
    return _ref3.apply(this, arguments);
  };
}();
var updateProduct = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {
    var _req$file;
    var existingProduct, _data2, _req$file2, imagePath, product, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return Product.findOne({
            _id: req.params.id,
            deleted: false
          });
        case 2:
          existingProduct = _context4.sent;
          if (existingProduct) {
            _context4.next = 6;
            break;
          }
          _data2 = {
            success: false,
            message: "Product doesn't exist"
          };
          return _context4.abrupt("return", {
            data: _data2,
            status: 404
          });
        case 6:
          if (isNullOrUndefined((_req$file = req.file) === null || _req$file === void 0 ? void 0 : _req$file.filename)) {
            req.body.image = existingProduct.image;
          } else {
            imagePath = PUBLIC_URL + "uploads/products/" + (req === null || req === void 0 || (_req$file2 = req.file) === null || _req$file2 === void 0 ? void 0 : _req$file2.filename);
            req.body.image = imagePath;
          }
          _context4.next = 9;
          return Product.findByIdAndUpdate(req.params.id, {
            $set: req.body
          }, {
            runValidators: true,
            "new": true
          });
        case 9:
          product = _context4.sent;
          data = {
            success: true,
            message: "Product updated successfully",
            product: product
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 12:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function updateProduct(_x3) {
    return _ref4.apply(this, arguments);
  };
}();
var deleteProduct = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req) {
    var existingProduct, _data3, product, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return Product.findOne({
            _id: req.params.id,
            deleted: false
          });
        case 2:
          existingProduct = _context5.sent;
          if (existingProduct) {
            _context5.next = 6;
            break;
          }
          _data3 = {
            success: false,
            message: "Product doesn't exist"
          };
          return _context5.abrupt("return", {
            data: _data3,
            status: 404
          });
        case 6:
          _context5.next = 8;
          return Product.findByIdAndUpdate(req.params.id, {
            $set: {
              deleted: true
            },
            modifiedAt: Date.now()
          });
        case 8:
          product = _context5.sent;
          data = {
            success: true,
            message: "Product deleted successfully",
            product: product
          };
          return _context5.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function deleteProduct(_x4) {
    return _ref5.apply(this, arguments);
  };
}();
module.exports = {
  getAllProducts: getAllProducts,
  createProduct: createProduct,
  getProductById: getProductById,
  updateProduct: updateProduct,
  deleteProduct: deleteProduct
};

/***/ }),

/***/ "./app/services/admin/servicesBookingService.js":
/*!******************************************************!*\
  !*** ./app/services/admin/servicesBookingService.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var Service = __webpack_require__(/*! ../../models/admin/serviceModel */ "./app/models/admin/serviceModel.js");
var God = __webpack_require__(/*! ../../models/admin/godModel */ "./app/models/admin/godModel.js");
var User = __webpack_require__(/*! ../../models/auth/userModel */ "./app/models/auth/userModel.js");
var ServiceHistory = __webpack_require__(/*! ../../models/member/bookingHistory/serviceHistoryModel */ "./app/models/member/bookingHistory/serviceHistoryModel.js");
var _require = __webpack_require__(/*! ../../utils/sendSMS */ "./app/utils/sendSMS.js"),
  sendSMS = _require.sendSMS;
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var AdminTranscationModel = __webpack_require__(/*! ../../models/admin/adminTranscationModel */ "./app/models/admin/adminTranscationModel.js");
var _require2 = __webpack_require__(/*! ../../utils/constants */ "./app/utils/constants.js"),
  allowedBookingTypes = _require2.allowedBookingTypes,
  allowedServiceTypes = _require2.allowedServiceTypes;
var _require3 = __webpack_require__(/*! ../../utils/index */ "./app/utils/index.js"),
  isNullOrUndefined = _require3.isNullOrUndefined,
  isDateInPresentOrFuture = _require3.isDateInPresentOrFuture,
  isValidDateDDMMYYYYFormat = _require3.isValidDateDDMMYYYYFormat,
  convertStringToObjectId = _require3.convertStringToObjectId,
  generateUniqueNumber = _require3.generateUniqueNumber;
var _require4 = __webpack_require__(/*! ../../utils/constants */ "./app/utils/constants.js"),
  PUBLIC_URL = _require4.PUBLIC_URL;
var getAllServices = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var services;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return Service.find({
            deleted: false
          });
        case 2:
          services = _context.sent;
          return _context.abrupt("return", {
            success: true,
            services: services,
            count: services.length
          });
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getAllServices() {
    return _ref.apply(this, arguments);
  };
}();
var getServicesByGodId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(godId) {
    var godDetails, _data, services, _data2, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return God.findOne({
            _id: godId,
            deleted: false
          });
        case 2:
          godDetails = _context2.sent;
          if (godDetails) {
            _context2.next = 6;
            break;
          }
          _data = {
            success: false,
            message: "God details not found"
          };
          return _context2.abrupt("return", {
            data: _data,
            status: 404
          });
        case 6:
          _context2.next = 8;
          return Service.find({
            godId: godId,
            deleted: false
          });
        case 8:
          services = _context2.sent;
          if (services) {
            _context2.next = 12;
            break;
          }
          _data2 = {
            success: false,
            message: "Services not found"
          };
          return _context2.abrupt("return", {
            data: _data2,
            status: 404
          });
        case 12:
          data = {
            success: true,
            services: services
          };
          return _context2.abrupt("return", {
            data: data,
            status: 200
          });
        case 14:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getServicesByGodId(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var getServiceByServiceId = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(serviceId) {
    var service, data, _data3;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return Service.findOne({
            _id: serviceId,
            deleted: false
          });
        case 2:
          service = _context3.sent;
          if (service) {
            _context3.next = 8;
            break;
          }
          data = {
            success: false,
            message: "Service doesn't exist"
          };
          return _context3.abrupt("return", {
            data: data,
            status: 404
          });
        case 8:
          _data3 = {
            success: true,
            service: service
          };
          return _context3.abrupt("return", {
            data: _data3,
            status: 200
          });
        case 10:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function getServiceByServiceId(_x2) {
    return _ref3.apply(this, arguments);
  };
}();
var addServiceDetails = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {
    var _req$body;
    var _data4, isValidServiceTypes, isValidBookingTypes, god, _data5, imagePath, _req$body2, workDays, serviceData, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body))) {
            _context4.next = 3;
            break;
          }
          _data4 = {
            success: false,
            message: "invalid request"
          };
          return _context4.abrupt("return", {
            data: _data4,
            status: 400
          });
        case 3:
          // validation for booking and service types
          isValidServiceTypes = req && req.body && !isNullOrUndefined(req.body.serviceType) && allowedServiceTypes.includes(req.body.serviceType);
          isValidBookingTypes = req && req.body && !isNullOrUndefined(req.body.bookingType) && allowedBookingTypes.includes(req.body.bookingType);
          _context4.next = 7;
          return God.findOne({
            _id: req.params.godId,
            deleted: false
          });
        case 7:
          god = _context4.sent;
          if (god) {
            _context4.next = 11;
            break;
          }
          _data5 = {
            success: false,
            message: "God Details not found"
          };
          return _context4.abrupt("return", {
            data: _data5,
            status: 404
          });
        case 11:
          imagePath = PUBLIC_URL + "uploads/services/" + req.file.filename;
          req.body.image = imagePath;
          if (req !== null && req !== void 0 && (_req$body = req.body) !== null && _req$body !== void 0 && _req$body.occurmonth) {
            workDays = JSON.parse(req === null || req === void 0 || (_req$body2 = req.body) === null || _req$body2 === void 0 ? void 0 : _req$body2.occurmonth);
            req.body.occurmonth = workDays;
          } else {
            req.body.occurmonth = [];
          }
          serviceData = _objectSpread(_objectSpread({
            godId: god._id,
            godName: god.name
          }, req.body), {}, {
            createdAt: Date.now(),
            modifiedAt: Date.now()
          });
          _context4.next = 17;
          return new Service(serviceData).save();
        case 17:
          data = {
            success: true,
            message: "Service details added successfully"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 19:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function addServiceDetails(_x3) {
    return _ref4.apply(this, arguments);
  };
}();
var updateServiceDetailsByGodId = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var _req$file, _req$body3;
    var god, _data6, _data7, existingServiceId, _data8, _req$file2, imagePath, _req$body4, workDays, serviceData, serviceDetails, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return God.findOne({
            _id: req.params.godId,
            deleted: false
          });
        case 2:
          god = _context5.sent;
          if (god) {
            _context5.next = 6;
            break;
          }
          _data6 = {
            success: false,
            message: "God details not found"
          };
          return _context5.abrupt("return", {
            data: _data6,
            status: 404
          });
        case 6:
          if (req.params.serviceId) {
            _context5.next = 9;
            break;
          }
          _data7 = {
            success: false,
            message: "Service detail invalid for this God"
          };
          return _context5.abrupt("return", {
            data: _data7,
            status: 404
          });
        case 9:
          _context5.next = 11;
          return Service.findOne({
            _id: req.params.serviceId,
            deleted: false
          });
        case 11:
          existingServiceId = _context5.sent;
          if (!(!existingServiceId || existingServiceId === null)) {
            _context5.next = 15;
            break;
          }
          _data8 = {
            success: false,
            message: "Service details doesn't exists for this god"
          };
          return _context5.abrupt("return", {
            data: _data8,
            status: 404
          });
        case 15:
          if (isNullOrUndefined((_req$file = req.file) === null || _req$file === void 0 ? void 0 : _req$file.filename)) {
            req.body.image = existingServiceId.image;
          } else {
            imagePath = PUBLIC_URL + "uploads/services/" + (req === null || req === void 0 || (_req$file2 = req.file) === null || _req$file2 === void 0 ? void 0 : _req$file2.filename);
            req.body.image = imagePath;
          }
          if (req !== null && req !== void 0 && (_req$body3 = req.body) !== null && _req$body3 !== void 0 && _req$body3.occurmonth) {
            workDays = JSON.parse(req === null || req === void 0 || (_req$body4 = req.body) === null || _req$body4 === void 0 ? void 0 : _req$body4.occurmonth);
            req.body.occurmonth = workDays;
          } else {
            req.body.occurmonth = [];
          }
          serviceData = _objectSpread({}, req.body);
          _context5.next = 20;
          return Service.findByIdAndUpdate(req.params.serviceId, {
            $set: serviceData
          }, {
            runValidators: true,
            "new": true
          });
        case 20:
          serviceDetails = _context5.sent;
          data = {
            success: true,
            message: "Service details updated successfully",
            serviceDetails: serviceDetails
          };
          return _context5.abrupt("return", {
            data: data,
            status: 200
          });
        case 23:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function updateServiceDetailsByGodId(_x4, _x5) {
    return _ref5.apply(this, arguments);
  };
}();
var inactivateServiceByServiceId = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {
    var _data9, existingServiceId, _data10, data;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          if (req.params.serviceId) {
            _context6.next = 3;
            break;
          }
          _data9 = {
            success: false,
            message: "Service detail invalid for this God"
          };
          return _context6.abrupt("return", {
            data: _data9,
            status: 404
          });
        case 3:
          _context6.next = 5;
          return Service.findOne({
            _id: req.params.serviceId,
            deleted: false
          });
        case 5:
          existingServiceId = _context6.sent;
          if (!(!existingServiceId || existingServiceId === null)) {
            _context6.next = 9;
            break;
          }
          _data10 = {
            success: false,
            message: "Service details doesn't exists"
          };
          return _context6.abrupt("return", {
            data: _data10,
            status: 404
          });
        case 9:
          _context6.next = 11;
          return Service.findByIdAndUpdate(req.params.serviceId, {
            $set: {
              deleted: true
            },
            modifiedAt: Date.now()
          }, {
            runValidators: true,
            "new": true
          });
        case 11:
          data = {
            success: true,
            message: "Service details inactivated successfully"
          };
          return _context6.abrupt("return", {
            data: data,
            status: 200
          });
        case 13:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return function inactivateServiceByServiceId(_x6, _x7) {
    return _ref6.apply(this, arguments);
  };
}();
var inactivateServiceByGodId = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(req, res) {
    var god, _data11, _data12, query, data;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return God.findOne({
            _id: req.params.godId,
            deleted: false
          });
        case 2:
          god = _context7.sent;
          if (god) {
            _context7.next = 6;
            break;
          }
          _data11 = {
            success: false,
            message: "God details not found"
          };
          return _context7.abrupt("return", {
            data: _data11,
            status: 404
          });
        case 6:
          if (req.params.godId) {
            _context7.next = 9;
            break;
          }
          _data12 = {
            success: false,
            message: "God details are invalid"
          };
          return _context7.abrupt("return", {
            data: _data12,
            status: 404
          });
        case 9:
          query = {
            godId: req.params.godId,
            deleted: false
          };
          _context7.next = 12;
          return Service.updateMany(query, {
            $set: {
              deleted: true
            },
            modifiedAt: Date.now()
          });
        case 12:
          data = {
            success: true,
            message: "Service inactivated successfully for the god details"
          };
          return _context7.abrupt("return", {
            data: data,
            status: 200
          });
        case 14:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return function inactivateServiceByGodId(_x8, _x9) {
    return _ref7.apply(this, arguments);
  };
}();
var createBookings = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(req, res) {
    var _data13, user, _data14, _data15, _data16, toPhoneNumber, message, serviceShortName, serviceBookId, messageText, EmailObject, serviceData, serHistory, savedService, lastInsertedId, adminTransData, data;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body) || isNullOrUndefined(req.body.userId || !isValidDateDDMMYYYYFormat(req.body.bookingDate)))) {
            _context8.next = 3;
            break;
          }
          _data13 = {
            success: false,
            message: "invalid request"
          };
          return _context8.abrupt("return", {
            data: _data13,
            status: 400
          });
        case 3:
          _context8.next = 5;
          return User.findOne({
            _id: req.body.userId,
            activated: true
          });
        case 5:
          user = _context8.sent;
          if (user) {
            _context8.next = 9;
            break;
          }
          _data14 = {
            success: false,
            message: "User not found"
          };
          return _context8.abrupt("return", {
            data: _data14,
            status: 404
          });
        case 9:
          if (isDateInPresentOrFuture(req.body.bookingDate)) {
            _context8.next = 12;
            break;
          }
          _data15 = {
            success: false,
            message: "invalid booking date"
          };
          return _context8.abrupt("return", {
            data: _data15,
            status: 400
          });
        case 12:
          if (convertStringToObjectId(req.body.userId).equals(user._id)) {
            _context8.next = 15;
            break;
          }
          _data16 = {
            success: false,
            message: "invalid request"
          };
          return _context8.abrupt("return", {
            data: _data16,
            status: 404
          });
        case 15:
          //send email and sms success or failur
          toPhoneNumber = "+918123192799"; // Replace with the recipient's phone number
          if (req.body.transStatus === "succeeded") {
            message = "Payment was successfull. Thank you for booking " + req.body.ServiceName;
          } else {
            message = "Payment was unsuccessfull. If amount debited it will refund to same account withing 3 to 4 days";
          }
          serviceShortName = "SER";
          serviceBookId = serviceShortName + "_" + req.body.devoteeId + "/" + generateUniqueNumber();
          messageText = "Hello ".concat(req.body.devoteeName, ". ").concat(message, ". Booking Id:").concat(serviceBookId);
          sendSMS(toPhoneNumber, messageText);
          EmailObject = {
            name: req.body.devoteeName,
            email: req.body.devoteeEmail,
            message: message,
            bodyData: req.body,
            url: "http://localhost:3000/mybookings/list"
          };
          SendConfirmationEmail(EmailObject, "");
          serviceData = {
            userId: user._id,
            ServiceBookId: serviceBookId,
            orderType: req.body.orderType,
            godName: req.body.godName,
            serviceType: req.body.serviceType,
            devoteeName: req.body.devoteeName,
            devoteeId: req.body.devoteeId,
            devoteeEmail: req.body.devoteeEmail,
            devoteePhoneNumber: req.body.devoteePhoneNumber,
            orderNotes: req.body.orderNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.amount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            paymentMethod: req.body.paymentMethod,
            ServiceName: req.body.ServiceName,
            NoOfPerson: req.body.NoOfPerson,
            bookingDate: req.body.bookingDate,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          serHistory = new ServiceHistory(serviceData);
          _context8.next = 27;
          return serHistory.save();
        case 27:
          savedService = _context8.sent;
          lastInsertedId = savedService._id;
          adminTransData = {
            userId: user._id,
            tabelRefId: lastInsertedId,
            orderType: "services",
            serviceName: req.body.ServiceName,
            devoteeName: req.body.devoteeName,
            devoteeId: req.body.devoteeId,
            devoteeEmail: req.body.devoteeEmail,
            devoteePhoneNumber: req.body.devoteePhoneNumber,
            orderNotes: req.body.orderNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.amount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            ticketId: serviceBookId,
            items: [],
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          _context8.next = 32;
          return AdminTranscationModel.create(adminTransData);
        case 32:
          data = {
            success: true,
            message: "serviceData details added successfully"
          };
          return _context8.abrupt("return", {
            data: data,
            status: 200
          });
        case 34:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return function createBookings(_x10, _x11) {
    return _ref8.apply(this, arguments);
  };
}();
var SendConfirmationEmail = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(user, activationLink) {
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          new Email(user, activationLink, "service booking email").serviceConfirmation();
        case 1:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return function SendConfirmationEmail(_x12, _x13) {
    return _ref9.apply(this, arguments);
  };
}();
module.exports = {
  getAllServices: getAllServices,
  getServicesByGodId: getServicesByGodId,
  addServiceDetails: addServiceDetails,
  updateServiceDetailsByGodId: updateServiceDetailsByGodId,
  inactivateServiceByServiceId: inactivateServiceByServiceId,
  inactivateServiceByGodId: inactivateServiceByGodId,
  getServiceByServiceId: getServiceByServiceId,
  createBookings: createBookings
};

/***/ }),

/***/ "./app/services/admin/sevaService.js":
/*!*******************************************!*\
  !*** ./app/services/admin/sevaService.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var SevaBooking = __webpack_require__(/*! ../../models/admin/sevaModel */ "./app/models/admin/sevaModel.js");
var _require = __webpack_require__(/*! ../../utils/constants */ "./app/utils/constants.js"),
  allowedSevaTypes = _require.allowedSevaTypes;
var _require2 = __webpack_require__(/*! ../../utils */ "./app/utils/index.js"),
  isNullOrUndefined = _require2.isNullOrUndefined;
var _require3 = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require3.logger;
var _require4 = __webpack_require__(/*! ../../utils/constants */ "./app/utils/constants.js"),
  PUBLIC_URL = _require4.PUBLIC_URL;
var addSevaBookingDetails = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var _data, imagePath, sevaBookingData, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body))) {
            _context.next = 3;
            break;
          }
          _data = {
            success: false,
            message: "invalid request"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 400
          });
        case 3:
          imagePath = PUBLIC_URL + "uploads/seva/" + req.file.filename;
          sevaBookingData = {
            sevaBookingType: req.body.sevaBookingType,
            name: req.body.name,
            category: req.body.category,
            amount: req.body.amount,
            availableSlot: req.body.availableSlot,
            description: req.body.description,
            image: imagePath,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          _context.next = 7;
          return new SevaBooking(sevaBookingData).save();
        case 7:
          data = {
            success: true,
            message: "sevaBooking details added successfully"
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function addSevaBookingDetails(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var getSevaBookingDetailsByBookingType = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var bookings, data, _data2;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          if (!(req.body && req.body.sevaBookingType)) {
            _context2.next = 6;
            break;
          }
          _context2.next = 3;
          return SevaBooking.find({
            sevaBookingType: req.body.sevaBookingType
          });
        case 3:
          bookings = _context2.sent;
          _context2.next = 9;
          break;
        case 6:
          _context2.next = 8;
          return SevaBooking.find({});
        case 8:
          bookings = _context2.sent;
        case 9:
          if (bookings) {
            _context2.next = 14;
            break;
          }
          data = {
            success: true,
            message: "Seva booking details doesn't exist"
          };
          return _context2.abrupt("return", {
            data: data,
            status: 404
          });
        case 14:
          _data2 = {
            success: true,
            bookings: bookings
          };
          return _context2.abrupt("return", {
            data: _data2,
            status: 200
          });
        case 16:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getSevaBookingDetailsByBookingType(_x3) {
    return _ref2.apply(this, arguments);
  };
}();
var updateSevaBookingDetails = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req) {
    var _req$file;
    var _data3, existingSevaBooking, _data4, _req$file2, imagePath, result, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body) || isNullOrUndefined(req.params.id))) {
            _context3.next = 3;
            break;
          }
          _data3 = {
            success: false,
            message: "invalid request"
          };
          return _context3.abrupt("return", {
            data: _data3,
            status: 400
          });
        case 3:
          _context3.next = 5;
          return SevaBooking.findOne({
            _id: req.params.id
          });
        case 5:
          existingSevaBooking = _context3.sent;
          if (existingSevaBooking) {
            _context3.next = 9;
            break;
          }
          _data4 = {
            success: false,
            message: "Seva booking details doesn't exist"
          };
          return _context3.abrupt("return", {
            data: _data4,
            status: 404
          });
        case 9:
          if (isNullOrUndefined((_req$file = req.file) === null || _req$file === void 0 ? void 0 : _req$file.filename)) {
            req.body.image = existingSevaBooking.image;
          } else {
            imagePath = PUBLIC_URL + "uploads/seva/" + (req === null || req === void 0 || (_req$file2 = req.file) === null || _req$file2 === void 0 ? void 0 : _req$file2.filename);
            req.body.image = imagePath;
          }
          _context3.next = 12;
          return SevaBooking.findByIdAndUpdate(req.params.id, {
            $set: req.body
          }, {
            runValidators: true,
            "new": true
          });
        case 12:
          result = _context3.sent;
          data = {
            success: true,
            message: "Seva booking details updated successfully",
            result: result
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 15:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function updateSevaBookingDetails(_x4) {
    return _ref3.apply(this, arguments);
  };
}();
var deleteSevaBookingDetails = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {
    var _data5, existingSevaBooking, _data6, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.params.id))) {
            _context4.next = 3;
            break;
          }
          _data5 = {
            success: false,
            message: "invalid request"
          };
          return _context4.abrupt("return", {
            data: _data5,
            status: 400
          });
        case 3:
          _context4.next = 5;
          return SevaBooking.findOne({
            _id: req.params.id
          });
        case 5:
          existingSevaBooking = _context4.sent;
          if (existingSevaBooking) {
            _context4.next = 9;
            break;
          }
          _data6 = {
            success: false,
            message: "Seva booking details doesn't exist"
          };
          return _context4.abrupt("return", {
            data: _data6,
            status: 404
          });
        case 9:
          _context4.next = 11;
          return SevaBooking.deleteOne({
            _id: req.params.id
          });
        case 11:
          data = {
            success: true,
            message: "Seva booking details deleted successfully"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 13:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function deleteSevaBookingDetails(_x5) {
    return _ref4.apply(this, arguments);
  };
}();
var getSevaBookingDetailsById = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var _data7, booking, _data8, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.params.id))) {
            _context5.next = 3;
            break;
          }
          _data7 = {
            success: false,
            message: "invalid request"
          };
          return _context5.abrupt("return", {
            data: _data7,
            status: 400
          });
        case 3:
          _context5.next = 5;
          return SevaBooking.findOne({
            _id: req.params.id
          });
        case 5:
          booking = _context5.sent;
          if (booking) {
            _context5.next = 9;
            break;
          }
          _data8 = {
            success: false,
            message: "Seva booking details not found"
          };
          return _context5.abrupt("return", {
            data: _data8,
            status: 404
          });
        case 9:
          data = {
            success: true,
            booking: booking
          };
          return _context5.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function getSevaBookingDetailsById(_x6, _x7) {
    return _ref5.apply(this, arguments);
  };
}();
module.exports = {
  addSevaBookingDetails: addSevaBookingDetails,
  getSevaBookingDetailsByBookingType: getSevaBookingDetailsByBookingType,
  updateSevaBookingDetails: updateSevaBookingDetails,
  deleteSevaBookingDetails: deleteSevaBookingDetails,
  getSevaBookingDetailsById: getSevaBookingDetailsById
};

/***/ }),

/***/ "./app/services/admin/userService.js":
/*!*******************************************!*\
  !*** ./app/services/admin/userService.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var User = __webpack_require__(/*! ../../models/auth/userModel */ "./app/models/auth/userModel.js");
var Role = __webpack_require__(/*! ../../models/auth/roleModel */ "./app/models/auth/roleModel.js");
var _require = __webpack_require__(/*! ../../utils/index */ "./app/utils/index.js"),
  isNullOrUndefined = _require.isNullOrUndefined;
var getAllUsers = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var users, _data, userViewData, _iterator, _step, usr, rolesDocument, _data2, roleNames, _data3, userData, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return User.find({
            deleted: false
          });
        case 2:
          users = _context.sent;
          if (!(!users || users.length === 0)) {
            _context.next = 6;
            break;
          }
          _data = {
            success: false,
            message: "Users details not found"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 404
          });
        case 6:
          userViewData = [];
          _iterator = _createForOfIteratorHelper(users);
          _context.prev = 8;
          _iterator.s();
        case 10:
          if ((_step = _iterator.n()).done) {
            _context.next = 29;
            break;
          }
          usr = _step.value;
          _context.next = 14;
          return Role.find({
            _id: {
              $in: usr.roles
            }
          });
        case 14:
          rolesDocument = _context.sent;
          if (rolesDocument) {
            _context.next = 18;
            break;
          }
          _data2 = {
            success: false,
            message: "Roles not found"
          };
          return _context.abrupt("return", {
            data: _data2,
            status: 400
          });
        case 18:
          roleNames = rolesDocument.map(function (item) {
            return item.name;
          });
          if (!(roleNames && roleNames.length > 0)) {
            _context.next = 23;
            break;
          }
          usr.viewRoles = roleNames;
          _context.next = 25;
          break;
        case 23:
          _data3 = {
            success: false,
            message: "Error or Roles invalid"
          };
          return _context.abrupt("return", {
            data: _data3,
            status: 500
          });
        case 25:
          userData = new User({
            _id: usr._id,
            firstName: usr.firstName,
            lastName: usr.lastName,
            email: usr.email,
            viewRoles: roleNames,
            roles: usr.roles,
            activated: usr.activated
          });
          userViewData.push(userData);
        case 27:
          _context.next = 10;
          break;
        case 29:
          _context.next = 34;
          break;
        case 31:
          _context.prev = 31;
          _context.t0 = _context["catch"](8);
          _iterator.e(_context.t0);
        case 34:
          _context.prev = 34;
          _iterator.f();
          return _context.finish(34);
        case 37:
          data = {
            success: true,
            userViewData: userViewData,
            count: userViewData.length
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 39:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[8, 31, 34, 37]]);
  }));
  return function getAllUsers() {
    return _ref.apply(this, arguments);
  };
}();
var getUserByUserId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(userId) {
    var user, _data4, rolesDocument, _data5, roleNames, _data6, userData, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return User.findOne({
            _id: userId
          });
        case 2:
          user = _context2.sent;
          if (user) {
            _context2.next = 6;
            break;
          }
          _data4 = {
            success: false,
            message: "User details not found"
          };
          return _context2.abrupt("return", {
            data: _data4,
            status: 404
          });
        case 6:
          _context2.next = 8;
          return Role.find({
            _id: {
              $in: user.roles
            }
          });
        case 8:
          rolesDocument = _context2.sent;
          if (rolesDocument) {
            _context2.next = 12;
            break;
          }
          _data5 = {
            success: false,
            message: "Roles not found"
          };
          return _context2.abrupt("return", {
            data: _data5,
            status: 400
          });
        case 12:
          roleNames = rolesDocument.map(function (item) {
            return item.name;
          });
          if (!(roleNames && roleNames.length > 0)) {
            _context2.next = 17;
            break;
          }
          user.roles = roleNames;
          _context2.next = 19;
          break;
        case 17:
          _data6 = {
            success: false,
            message: "Error or Roles invalid"
          };
          return _context2.abrupt("return", {
            data: _data6,
            status: 500
          });
        case 19:
          userData = new User({
            _id: user._id,
            firstName: user.firstName,
            lastName: user.lastName,
            phonenumber: user.phonenumber,
            email: user.email,
            viewRoles: roleNames,
            roles: user.roles,
            activated: user.activated
          });
          data = {
            success: true,
            userData: userData
          };
          return _context2.abrupt("return", {
            data: data,
            status: 200
          });
        case 22:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getUserByUserId(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var updateUserRole = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var _data7, isValidUserRoles, _data8, user, _data9, roles, rolesDocument, _data10, roleIds, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body))) {
            _context3.next = 3;
            break;
          }
          _data7 = {
            success: false,
            message: "invalid request"
          };
          return _context3.abrupt("return", {
            data: _data7,
            status: 400
          });
        case 3:
          isValidUserRoles = req.body && req.body.roles.length > 0;
          console.log(isValidUserRoles);
          if (isValidUserRoles) {
            _context3.next = 8;
            break;
          }
          _data8 = {
            success: false,
            message: "invalid user roles in request"
          };
          return _context3.abrupt("return", {
            data: _data8,
            status: 400
          });
        case 8:
          _context3.next = 10;
          return User.findOne({
            _id: req.params.userId
          });
        case 10:
          user = _context3.sent;
          if (user) {
            _context3.next = 14;
            break;
          }
          _data9 = {
            success: false,
            message: "User not found"
          };
          return _context3.abrupt("return", {
            data: _data9,
            status: 404
          });
        case 14:
          // find role ID by role name
          roles = req.body.roles;
          _context3.next = 17;
          return Role.find({
            name: {
              $in: roles
            }
          });
        case 17:
          rolesDocument = _context3.sent;
          if (rolesDocument) {
            _context3.next = 21;
            break;
          }
          _data10 = {
            success: false,
            message: "invalid roles in request"
          };
          return _context3.abrupt("return", {
            data: _data10,
            status: 400
          });
        case 21:
          roleIds = rolesDocument.map(function (item) {
            return item._id;
          });
          if (!(roleIds && roleIds.length > 0)) {
            _context3.next = 25;
            break;
          }
          _context3.next = 25;
          return User.findByIdAndUpdate(req.params.userId, {
            $set: {
              roles: roleIds
            },
            modifiedAt: Date.now()
          }, {
            runValidators: true,
            "new": true
          });
        case 25:
          data = {
            success: true,
            message: "User role updated successfully"
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 27:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function updateUserRole(_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();
var activateOrDeActivateUserByUserId = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var _data11, user, _data12, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.params) || isNullOrUndefined(req.body) || isNullOrUndefined(req.params.userId))) {
            _context4.next = 3;
            break;
          }
          _data11 = {
            success: false,
            message: "invalid request"
          };
          return _context4.abrupt("return", {
            data: _data11,
            status: 400
          });
        case 3:
          _context4.next = 5;
          return User.findOne({
            _id: req.params.userId,
            deleted: false
          });
        case 5:
          user = _context4.sent;
          if (user) {
            _context4.next = 9;
            break;
          }
          _data12 = {
            success: false,
            message: "User not found"
          };
          return _context4.abrupt("return", {
            data: _data12,
            status: 404
          });
        case 9:
          _context4.next = 11;
          return User.findByIdAndUpdate(req.params.userId, {
            $set: {
              activated: req.body.activated
            },
            modifiedAt: Date.now()
          }, {
            runValidators: true,
            "new": true
          });
        case 11:
          data = {
            success: true,
            message: "User activate status is updated successfully"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 13:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function activateOrDeActivateUserByUserId(_x4, _x5) {
    return _ref4.apply(this, arguments);
  };
}();
module.exports = {
  getAllUsers: getAllUsers,
  getUserByUserId: getUserByUserId,
  updateUserRole: updateUserRole,
  activateOrDeActivateUserByUserId: activateOrDeActivateUserByUserId
};

/***/ }),

/***/ "./app/services/auth/authService.js":
/*!******************************************!*\
  !*** ./app/services/auth/authService.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var JWT = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
var User = __webpack_require__(/*! ../../models/auth/userModel */ "./app/models/auth/userModel.js");
var Token = __webpack_require__(/*! ../../models/auth/tokenModel */ "./app/models/auth/tokenModel.js");
var otpModel = __webpack_require__(/*! ../../models/auth/tokenModel */ "./app/models/auth/tokenModel.js");
var crypto = __webpack_require__(/*! crypto */ "crypto");
var bcrypt = __webpack_require__(/*! bcryptjs */ "bcryptjs");
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var bcryptSalt = 10;
var clientURL = process.env.CLIENT_URL;
var _require = __webpack_require__(/*! ../../utils */ "./app/utils/index.js"),
  generateRandomOtp = _require.generateRandomOtp;
var requestPasswordReset = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(email) {
    var user, _data, token, resetToken, hash, link, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return User.findOne({
            email: email
          });
        case 2:
          user = _context.sent;
          if (user) {
            _context.next = 6;
            break;
          }
          _data = {
            success: false,
            message: "User not found"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 404
          });
        case 6:
          _context.next = 8;
          return Token.findOne({
            userId: user._id
          });
        case 8:
          token = _context.sent;
          if (!token) {
            _context.next = 12;
            break;
          }
          _context.next = 12;
          return token.deleteOne();
        case 12:
          resetToken = crypto.randomBytes(32).toString("hex");
          _context.next = 15;
          return bcrypt.hash(resetToken, Number(bcryptSalt));
        case 15:
          hash = _context.sent;
          _context.next = 18;
          return new Token({
            userId: user._id,
            token: hash,
            createdAt: Date.now()
          }).save();
        case 18:
          link = "".concat(http://localhost:3000, "/passwordReset?token=").concat(resetToken, "&id=").concat(user._id);
          new Email(user, link, "Reset password link").sendPasswordReset();
          data = {
            success: true,
            message: link
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 22:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function requestPasswordReset(_x) {
    return _ref.apply(this, arguments);
  };
}();
var resetPassword = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(userId, token, password) {
    var passwordResetToken, isValid, hash, user;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return Token.findOne({
            userId: userId
          });
        case 2:
          passwordResetToken = _context2.sent;
          if (passwordResetToken) {
            _context2.next = 5;
            break;
          }
          return _context2.abrupt("return", {
            success: false,
            message: "Invalid or expired password reset token",
            status: 404
          });
        case 5:
          _context2.next = 7;
          return bcrypt.compare(token, passwordResetToken.token);
        case 7:
          isValid = _context2.sent;
          if (isValid) {
            _context2.next = 10;
            break;
          }
          return _context2.abrupt("return", {
            success: false,
            message: "Invalid or expired password reset token",
            status: 404
          });
        case 10:
          _context2.next = 12;
          return bcrypt.hash(password, Number(bcryptSalt));
        case 12:
          hash = _context2.sent;
          _context2.next = 15;
          return User.updateOne({
            _id: userId
          }, {
            $set: {
              password: hash
            }
          }, {
            "new": true
          });
        case 15:
          _context2.next = 17;
          return User.findById({
            _id: userId
          });
        case 17:
          user = _context2.sent;
          new Email(user, "", "Reset password successfull").resetPassword();
          _context2.next = 21;
          return passwordResetToken.deleteOne();
        case 21:
          return _context2.abrupt("return", {
            success: true,
            message: "Password reset successfull",
            status: 200
          });
        case 22:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function resetPassword(_x2, _x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var generateandSaveOTP = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(phoneNumber) {
    var otp, otpDocument, data, _data2;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return otpModel.deleteMany({
            phoneNumber: phoneNumber
          });
        case 2:
          otp = generateRandomOtp();
          otpDocument = new otpModel({
            phoneNumber: phoneNumber,
            otp: otp
          });
          _context3.prev = 4;
          _context3.next = 7;
          return otpDocument.save();
        case 7:
          data = {
            success: true,
            otp: otp,
            message: "otp inserted"
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
          _context3.prev = 11;
          _context3.t0 = _context3["catch"](4);
          _data2 = {
            success: false,
            message: _context3.t0
          };
          return _context3.abrupt("return", {
            data: _data2,
            status: 500
          });
        case 15:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[4, 11]]);
  }));
  return function generateandSaveOTP(_x5) {
    return _ref3.apply(this, arguments);
  };
}();
var VerifyOTP = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(phoneNumber, userOTP) {
    var otpDocument, data, _data3, _data4;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return otpModel.findOne({
            phoneNumber: phoneNumber,
            otp: userOTP
          }).exec();
        case 2:
          otpDocument = _context4.sent;
          _context4.prev = 3;
          if (!otpDocument) {
            _context4.next = 13;
            break;
          }
          _context4.next = 7;
          return User.findOneAndUpdate({
            phonenumber: phoneNumber
          }, {
            $set: {
              IsPhoneActive: true
            }
          }, {
            runValidators: true,
            "new": true
          });
        case 7:
          _context4.next = 9;
          return otpDocument.remove();
        case 9:
          data = {
            success: true,
            otpStatus: true,
            message: "valid"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 13:
          _data3 = {
            success: false,
            otpStatus: false,
            message: "Invalid OTP"
          };
          return _context4.abrupt("return", {
            data: _data3,
            status: 404
          });
        case 15:
          _context4.next = 22;
          break;
        case 17:
          _context4.prev = 17;
          _context4.t0 = _context4["catch"](3);
          console.log(_context4.t0);
          _data4 = {
            success: false,
            message: _context4.t0
          };
          return _context4.abrupt("return", {
            data: _data4,
            status: 500
          });
        case 22:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[3, 17]]);
  }));
  return function VerifyOTP(_x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();
module.exports = {
  requestPasswordReset: requestPasswordReset,
  resetPassword: resetPassword,
  generateandSaveOTP: generateandSaveOTP,
  VerifyOTP: VerifyOTP
};

/***/ }),

/***/ "./app/services/member/cartService.js":
/*!********************************************!*\
  !*** ./app/services/member/cartService.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var Product = __webpack_require__(/*! ../../models/member/cartModel */ "./app/models/member/cartModel.js");
var _require = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var BookingHistoryModel = __webpack_require__(/*! ../../models/member/bookingHistory/bookingHistoryModel */ "./app/models/member/bookingHistory/bookingHistoryModel.js");
var User = __webpack_require__(/*! ../../models/auth/userModel */ "./app/models/auth/userModel.js");
var _require2 = __webpack_require__(/*! ../../utils/index */ "./app/utils/index.js"),
  isNullOrUndefined = _require2.isNullOrUndefined,
  generateUniqueNumber = _require2.generateUniqueNumber;
var _require3 = __webpack_require__(/*! ../../utils/sendSMS */ "./app/utils/sendSMS.js"),
  sendSMS = _require3.sendSMS;
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var AdminTranscationModel = __webpack_require__(/*! ../../models/admin/adminTranscationModel */ "./app/models/admin/adminTranscationModel.js");
var addCart = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req) {
    var owner, _req$body, productId, quantity, cart, product, name, images, price, image, itemIndex, newCart;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          owner = req.user._id;
          _req$body = req.body, productId = _req$body.productId, quantity = _req$body.quantity;
          _context.next = 4;
          return Cart.findOne({
            owner: owner
          });
        case 4:
          cart = _context.sent;
          _context.next = 7;
          return Product.findOne({
            _id: productId
          });
        case 7:
          product = _context.sent;
          if (!product) {
            res.status(404).send({
              message: "product not found"
            });
          }
          name = product.name, images = product.images, price = product.price;
          image = images[0]; //If cart already exists for user,
          if (!cart) {
            _context.next = 20;
            break;
          }
          itemIndex = cart.items.findIndex(function (item) {
            return item.productId == productId;
          }); //check if product exists or not
          if (itemIndex > -1) {
            cart.items[itemIndex].quantity += quantity;
          } else {
            cart.items.push({
              productId: productId,
              name: name,
              image: image,
              quantity: quantity,
              price: price
            });
          }
          cart.bill = cart.items.reduce(function (acc, curr) {
            return acc + curr.quantity * curr.price;
          }, 0);
          _context.next = 17;
          return cart.save();
        case 17:
          res.status(200).send(cart);
          _context.next = 24;
          break;
        case 20:
          _context.next = 22;
          return Cart.create({
            owner: owner,
            items: [{
              productId: productId,
              name: name,
              image: image,
              quantity: quantity,
              price: price
            }],
            bill: quantity * price
          });
        case 22:
          newCart = _context.sent;
          return _context.abrupt("return", res.status(201).send(newCart));
        case 24:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function addCart(_x) {
    return _ref.apply(this, arguments);
  };
}();
var AddBookingHistory = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var _data, user, _data2, toPhoneNumber, message, OrderId, messageText, EmailObject, ShopData, serHistory, savedService, lastInsertedId, adminTransData, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body))) {
            _context2.next = 3;
            break;
          }
          _data = {
            success: false,
            message: "invalid request"
          };
          return _context2.abrupt("return", {
            data: _data,
            status: 400
          });
        case 3:
          _context2.next = 5;
          return User.findOne({
            _id: req.body.userId,
            activated: true
          });
        case 5:
          user = _context2.sent;
          if (user) {
            _context2.next = 9;
            break;
          }
          _data2 = {
            success: false,
            message: "User not found"
          };
          return _context2.abrupt("return", {
            data: _data2,
            status: 404
          });
        case 9:
          //send email and sms success or failur
          toPhoneNumber = "+918123192799"; // Replace with the recipient's phone number
          if (req.body.transStatus === "succeeded") {
            message = "Payment was successfull. Thank you for purchasing";
          } else {
            message = "Payment was unsuccessfull. If amount debited it will refund to same account withing 3 to 4 days";
          }
          OrderId = "Prod_" + req.body.devoteeId + "/" + generateUniqueNumber();
          messageText = "Hello ".concat(req.body.devoteeName, ". ").concat(message, ". Order Id:").concat(OrderId);
          sendSMS(toPhoneNumber, messageText);
          EmailObject = {
            name: req.body.devoteeName,
            email: req.body.devoteeEmail,
            message: message,
            bodyData: req.body,
            url: "http://localhost:3000/mybookings/list"
          };
          SendConfirmationEmail(EmailObject, "");
          ShopData = {
            userId: req.body.userId,
            OrderId: OrderId,
            devoteeId: req.body.devoteeId,
            orderType: req.body.orderType,
            amount: req.body.amount,
            Items: req.body.Items,
            billingAddress: req.body.billingAddress,
            devoteeName: req.body.devoteeName,
            devoteePhoneNumber: req.body.devoteePhoneNumber,
            devoteeEmail: req.body.devoteeEmail,
            transStatus: req.body.transStatus,
            stripeReferenceId: req.body.stripeReferenceId,
            paymentMode: req.body.paymentMode,
            orderNotes: req.body.orderNotes,
            OrderDate: Date.now(),
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          serHistory = new BookingHistoryModel(ShopData);
          _context2.next = 20;
          return serHistory.save();
        case 20:
          savedService = _context2.sent;
          lastInsertedId = savedService._id;
          adminTransData = {
            userId: user._id,
            tabelRefId: lastInsertedId,
            orderType: "shoporders",
            serviceName: "Products",
            devoteeName: req.body.devoteeName,
            devoteeId: req.body.devoteeId,
            devoteeEmail: req.body.devoteeEmail,
            devoteePhoneNumber: req.body.devoteePhoneNumber,
            orderNotes: req.body.orderNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.amount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            ticketId: OrderId,
            items: req.body.Items,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          _context2.next = 25;
          return AdminTranscationModel.create(adminTransData);
        case 25:
          data = {
            success: true,
            message: "Shop details added successfully"
          };
          return _context2.abrupt("return", {
            data: data,
            status: 200
          });
        case 27:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function AddBookingHistory(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var SendConfirmationEmail = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(user, activationLink) {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          new Email(user, activationLink, "shopping confirmation email").ShopConfirmation();
        case 1:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function SendConfirmationEmail(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();
module.exports = {
  addCart: addCart,
  AddBookingHistory: AddBookingHistory
};

/***/ }),

/***/ "./app/services/member/donationService.js":
/*!************************************************!*\
  !*** ./app/services/member/donationService.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var User = __webpack_require__(/*! ../../models/auth/userModel */ "./app/models/auth/userModel.js");
var MasterDonation = __webpack_require__(/*! ../../models/admin/donationModel */ "./app/models/admin/donationModel.js");
var Donation = __webpack_require__(/*! ../../models/member/donationModel */ "./app/models/member/donationModel.js");
var AdminTranscationModel = __webpack_require__(/*! ../../models/admin/adminTranscationModel */ "./app/models/admin/adminTranscationModel.js");
var _require = __webpack_require__(/*! ../../utils/index */ "./app/utils/index.js"),
  isNullOrUndefined = _require.isNullOrUndefined,
  generateUniqueNumber = _require.generateUniqueNumber;
var _require2 = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require2.logger;
var _require3 = __webpack_require__(/*! ../../utils/sendSMS */ "./app/utils/sendSMS.js"),
  sendSMS = _require3.sendSMS;
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var addDonationDetails = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var _data, isValidDonationTypes, _data2, user, donationTypeDetails, _data3, _data4, totalPrice, toPhoneNumber, message, taxReceipt, messageText, EmailObject, donationDetails, donationHistory, savedDonate, lastInsertedId, adminTransData, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body) || isNullOrUndefined(req.params.userId))) {
            _context.next = 3;
            break;
          }
          _data = {
            success: false,
            message: "invalid request"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 400
          });
        case 3:
          isValidDonationTypes = req && req.body && !isNullOrUndefined(req.body.donationType);
          if (isValidDonationTypes) {
            _context.next = 7;
            break;
          }
          _data2 = {
            success: false,
            message: "invalid donationType in request"
          };
          return _context.abrupt("return", {
            data: _data2,
            status: 400
          });
        case 7:
          _context.next = 9;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 9:
          user = _context.sent;
          _context.next = 12;
          return MasterDonation.findOne({
            _id: req.body.donateTypeId
          });
        case 12:
          donationTypeDetails = _context.sent;
          if (user) {
            _context.next = 16;
            break;
          }
          _data3 = {
            success: false,
            message: "User not found"
          };
          return _context.abrupt("return", {
            data: _data3,
            status: 404
          });
        case 16:
          if (donationTypeDetails) {
            _context.next = 19;
            break;
          }
          _data4 = {
            success: false,
            message: "No donation type found"
          };
          return _context.abrupt("return", {
            data: _data4,
            status: 404
          });
        case 19:
          //when donate grocery items this come to picture or else by default zero price
          totalPrice = 0;
          if (!isNullOrUndefined(req.body.donatedItems) && req.body.donatedItems.length > 0) {
            req.body.donatedItems.forEach(function (item) {
              totalPrice += item.price;
            });
          }

          //send email and sms success or failur
          toPhoneNumber = "+918123192799"; // Replace with the recipient's phone number
          if (req.body.transStatus === "succeeded") {
            message = "Payment was successfull. Thank you for donating to " + req.body.donationType;
          } else {
            message = "Payment was unsuccessfull. If amount debited it will refund to same account withing 3 to 4 days";
          }
          taxReceipt = "Dont_" + generateUniqueNumber();
          messageText = "Hello ".concat(req.body.donorName, ". ").concat(message, ". Receipt no:").concat(taxReceipt);
          sendSMS(toPhoneNumber, messageText);
          EmailObject = {
            name: req.body.donorName,
            email: req.body.donorEmail,
            message: message,
            bodyData: req.body,
            url: "http://localhost:3000/mydonations/list"
          };
          SendConfirmationEmail(EmailObject, "");
          donationDetails = {
            userId: user._id,
            donateTypeId: donationTypeDetails === null || donationTypeDetails === void 0 ? void 0 : donationTypeDetails._id,
            donationType: req.body.donationType,
            devoteeName: req.body.donorName,
            devoteeId: req.body.devoteeId,
            prasadamOverEmail: req.body.prasadamOverEmail,
            devoteeEmail: req.body.donorEmail,
            frequency: req.body.frequency,
            devoteePhoneNumber: req.body.donorPhoneNumber,
            orderNotes: req.body.donorNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.donatedAmount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            taxReceiptNo: taxReceipt,
            donationDate: Date.now(),
            donatedItems: req.body.donatedItems,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          donationHistory = new Donation(donationDetails);
          _context.next = 32;
          return donationHistory.save();
        case 32:
          savedDonate = _context.sent;
          lastInsertedId = savedDonate._id;
          adminTransData = {
            userId: user._id,
            tabelRefId: lastInsertedId,
            orderType: "donations",
            serviceName: req.body.donationType,
            devoteeName: req.body.donorName,
            devoteeId: req.body.devoteeId,
            devoteeEmail: req.body.donorEmail,
            devoteePhoneNumber: req.body.donorPhoneNumber,
            orderNotes: req.body.donorNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.donatedAmount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            ticketId: taxReceipt,
            items: req.body.donatedItems,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          _context.next = 37;
          return AdminTranscationModel.create(adminTransData);
        case 37:
          data = {
            success: true,
            message: "Donation details added successfully"
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 39:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function addDonationDetails(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var getDonationDetailsByUserId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var _data5, user, _data6, donations, _data7, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.params.userId))) {
            _context2.next = 3;
            break;
          }
          _data5 = {
            success: false,
            message: "invalid request"
          };
          return _context2.abrupt("return", {
            data: _data5,
            status: 400
          });
        case 3:
          _context2.next = 5;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 5:
          user = _context2.sent;
          if (user) {
            _context2.next = 9;
            break;
          }
          _data6 = {
            success: false,
            message: "User not found"
          };
          return _context2.abrupt("return", {
            data: _data6,
            status: 404
          });
        case 9:
          _context2.next = 11;
          return Donation.find({
            userId: req.params.userId
          });
        case 11:
          donations = _context2.sent;
          if (donations) {
            _context2.next = 15;
            break;
          }
          _data7 = {
            success: false,
            message: "Donation details not found"
          };
          return _context2.abrupt("return", {
            data: _data7,
            status: 404
          });
        case 15:
          data = {
            success: true,
            donations: donations
          };
          return _context2.abrupt("return", {
            data: data,
            status: 200
          });
        case 17:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getDonationDetailsByUserId(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var getDonationDetailsByDonationId = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var _data8, user, _data9, donationDetails, _data10, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.params.donationId) || isNullOrUndefined(req.params.userId))) {
            _context3.next = 3;
            break;
          }
          _data8 = {
            success: false,
            message: "invalid request"
          };
          return _context3.abrupt("return", {
            data: _data8,
            status: 400
          });
        case 3:
          _context3.next = 5;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 5:
          user = _context3.sent;
          if (user) {
            _context3.next = 9;
            break;
          }
          _data9 = {
            success: false,
            message: "User not found"
          };
          return _context3.abrupt("return", {
            data: _data9,
            status: 404
          });
        case 9:
          _context3.next = 11;
          return Donation.find({
            _id: req.params.donationId
          });
        case 11:
          donationDetails = _context3.sent;
          if (donationDetails) {
            _context3.next = 15;
            break;
          }
          _data10 = {
            success: false,
            message: "Donation details not found"
          };
          return _context3.abrupt("return", {
            data: _data10,
            status: 404
          });
        case 15:
          data = {
            success: true,
            donationDetails: donationDetails
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 17:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function getDonationDetailsByDonationId(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
var SendConfirmationEmail = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(user, activationLink) {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          new Email(user, activationLink, "donation email book").donationConfirmation();
        case 1:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function SendConfirmationEmail(_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
module.exports = {
  addDonationDetails: addDonationDetails,
  getDonationDetailsByUserId: getDonationDetailsByUserId,
  getDonationDetailsByDonationId: getDonationDetailsByDonationId
};

/***/ }),

/***/ "./app/services/member/enquiryService.js":
/*!***********************************************!*\
  !*** ./app/services/member/enquiryService.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var Enquiry = __webpack_require__(/*! ../../models/member/enquiryModel */ "./app/models/member/enquiryModel.js");
var sendEnquiry = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req) {
    var name, email, subject, message;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          name = req.name, email = req.email, subject = req.subject, message = req.message;
          _context.next = 3;
          return new Enquiry({
            name: name,
            email: email,
            subject: subject,
            message: message,
            createdAt: Date.now()
          }).save();
        case 3:
          return _context.abrupt("return", {
            success: true,
            message: "Enquiry form submitted successfully"
          });
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function sendEnquiry(_x) {
    return _ref.apply(this, arguments);
  };
}();
module.exports = {
  sendEnquiry: sendEnquiry
};

/***/ }),

/***/ "./app/services/member/orderHistoryService.js":
/*!****************************************************!*\
  !*** ./app/services/member/orderHistoryService.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var BookingHistoryModel = __webpack_require__(/*! ../../models/member/bookingHistory/bookingHistoryModel */ "./app/models/member/bookingHistory/bookingHistoryModel.js");
var ServiceHistoryModel = __webpack_require__(/*! ../../models/member/bookingHistory/serviceHistoryModel */ "./app/models/member/bookingHistory/serviceHistoryModel.js");
var SevaHistoryModel = __webpack_require__(/*! ../../models/member/bookingHistory/sevaHistoryModel */ "./app/models/member/bookingHistory/sevaHistoryModel.js");
var EventHistoryModel = __webpack_require__(/*! ../../models/member/bookingHistory/eventHistoryModel */ "./app/models/member/bookingHistory/eventHistoryModel.js");
var AdminTranscationModel = __webpack_require__(/*! ../../models/admin/adminTranscationModel */ "./app/models/admin/adminTranscationModel.js");
var _require = __webpack_require__(/*! ../../utils/index */ "./app/utils/index.js"),
  isNullOrUndefined = _require.isNullOrUndefined;
var GetOrderDetailsById = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req) {
    var data, orders, _data, _data2;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body))) {
            _context.next = 3;
            break;
          }
          data = {
            success: false,
            message: "invalid request"
          };
          return _context.abrupt("return", {
            data: data,
            status: 400
          });
        case 3:
          if (!(req.params.type === "shop-orders")) {
            _context.next = 7;
            break;
          }
          _context.next = 6;
          return BookingHistoryModel.find({
            userId: req.params.id
          });
        case 6:
          orders = _context.sent;
        case 7:
          if (!(req.params.type === "services")) {
            _context.next = 11;
            break;
          }
          _context.next = 10;
          return ServiceHistoryModel.find({
            userId: req.params.id
          });
        case 10:
          orders = _context.sent;
        case 11:
          if (!(req.params.type === "seva")) {
            _context.next = 15;
            break;
          }
          _context.next = 14;
          return SevaHistoryModel.find({
            userId: req.params.id
          });
        case 14:
          orders = _context.sent;
        case 15:
          if (!(req.params.type === "events")) {
            _context.next = 19;
            break;
          }
          _context.next = 18;
          return EventHistoryModel.find({
            userId: req.params.id
          });
        case 18:
          orders = _context.sent;
        case 19:
          if (orders) {
            _context.next = 24;
            break;
          }
          _data = {
            success: false,
            message: "Order details doesn't exist"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 404
          });
        case 24:
          _data2 = {
            success: true,
            orders: orders
          };
          return _context.abrupt("return", {
            data: _data2,
            status: 200
          });
        case 26:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function GetOrderDetailsById(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getTranscationDetails = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var query, queryFilter, startDate, endDate, orders, data, _data3, _data4;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          query = req.query; // Build the filter object based on your requirements
          queryFilter = {}; // Example: Add filters to the query object
          if (query.ticketId) {
            queryFilter.ticketId = query.ticketId;
          }
          if (query.devoteeId) {
            queryFilter.devoteeId = query.devoteeId;
          }
          if (query.serviceName) {
            queryFilter.serviceName = query.serviceName;
          }
          if (query.devoteePhoneNumber) {
            queryFilter.devoteePhoneNumber = query.devoteePhoneNumber;
          }
          if (query.devoteeName) {
            queryFilter.devoteeName = query.devoteeName;
          }
          if (query.createdAt) {
            // Assuming createdAt is a string in the format 'YYYY-MM-DD'
            startDate = new Date("".concat(query.createdAt, "T00:00:00.000Z"));
            endDate = new Date("".concat(query.createdAt, "T23:59:59.999Z")); // Add date range to the query
            queryFilter.createdAt = {
              $gte: startDate,
              $lte: endDate
            };
          }

          // Fetch transaction details based on the constructed query
          _context2.next = 11;
          return AdminTranscationModel.find(queryFilter);
        case 11:
          orders = _context2.sent;
          if (!(!orders || orders.length === 0)) {
            _context2.next = 17;
            break;
          }
          data = {
            success: false,
            message: "Transaction data doesn't exist for the given filters.",
            reports: []
          };
          return _context2.abrupt("return", {
            data: data,
            status: 404
          });
        case 17:
          _data3 = {
            success: true,
            reports: orders
          };
          return _context2.abrupt("return", {
            data: _data3,
            status: 200
          });
        case 19:
          _context2.next = 25;
          break;
        case 21:
          _context2.prev = 21;
          _context2.t0 = _context2["catch"](0);
          _data4 = {
            success: false,
            error: _context2.t0
          };
          return _context2.abrupt("return", {
            data: _data4,
            status: 500
          });
        case 25:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 21]]);
  }));
  return function getTranscationDetails(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
module.exports = {
  GetOrderDetailsById: GetOrderDetailsById,
  getTranscationDetails: getTranscationDetails
};

/***/ }),

/***/ "./app/services/member/sevaService.js":
/*!********************************************!*\
  !*** ./app/services/member/sevaService.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var User = __webpack_require__(/*! ../../models/auth/userModel */ "./app/models/auth/userModel.js");
var SevaHistory = __webpack_require__(/*! ../../models/member/bookingHistory/sevaHistoryModel */ "./app/models/member/bookingHistory/sevaHistoryModel.js");
var SevaBooking = __webpack_require__(/*! ../../models/member/sevaModel */ "./app/models/member/sevaModel.js");
var SevaAdminModel = __webpack_require__(/*! ../../models/admin/sevaModel */ "./app/models/admin/sevaModel.js");
var _require = __webpack_require__(/*! ../../utils/index */ "./app/utils/index.js"),
  isNullOrUndefined = _require.isNullOrUndefined,
  isDateInPresentOrFuture = _require.isDateInPresentOrFuture,
  isValidDateDDMMYYYYFormat = _require.isValidDateDDMMYYYYFormat,
  convertStringToObjectId = _require.convertStringToObjectId,
  generateUniqueNumber = _require.generateUniqueNumber;
var _require2 = __webpack_require__(/*! ../../utils/sendSMS */ "./app/utils/sendSMS.js"),
  sendSMS = _require2.sendSMS;
var Email = __webpack_require__(/*! ../../utils/sendEmail */ "./app/utils/sendEmail.js");
var _require3 = __webpack_require__(/*! ../../middlewares */ "./app/middlewares/index.js"),
  logger = _require3.logger;
var AdminTranscationModel = __webpack_require__(/*! ../../models/admin/adminTranscationModel */ "./app/models/admin/adminTranscationModel.js");
var createBookings = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var _data, user, _data2, _data3, _data4, toPhoneNumber, message, serviceShortName, serviceBookId, messageText, EmailObject, SevaData, sevaHistory, savedSeva, lastInsertedId, adminTransData, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body) || isNullOrUndefined(req.body.userId || !isValidDateDDMMYYYYFormat(req.body.bookingDate)))) {
            _context.next = 3;
            break;
          }
          _data = {
            success: false,
            message: "invalid request"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 400
          });
        case 3:
          _context.next = 5;
          return User.findOne({
            _id: req.body.userId,
            activated: true
          });
        case 5:
          user = _context.sent;
          if (user) {
            _context.next = 9;
            break;
          }
          _data2 = {
            success: false,
            message: "User not found"
          };
          return _context.abrupt("return", {
            data: _data2,
            status: 404
          });
        case 9:
          if (isDateInPresentOrFuture(req.body.bookingDate)) {
            _context.next = 12;
            break;
          }
          _data3 = {
            success: false,
            message: "invalid booking date"
          };
          return _context.abrupt("return", {
            data: _data3,
            status: 400
          });
        case 12:
          if (convertStringToObjectId(req.body.userId).equals(user._id)) {
            _context.next = 15;
            break;
          }
          _data4 = {
            success: false,
            message: "invalid request"
          };
          return _context.abrupt("return", {
            data: _data4,
            status: 404
          });
        case 15:
          //send email and sms success or failur
          toPhoneNumber = "+918123192799"; // Replace with the recipient's phone number
          if (req.body.transStatus === "succeeded") {
            message = "Payment was successfull. Thank you for booking " + req.body.sevaName;
          } else {
            message = "Payment was unsuccessfull. If amount debited it will refund to same account withing 3 to 4 days";
          }
          serviceShortName = "SEV";
          serviceBookId = serviceShortName + "_" + req.body.devoteeId + "/" + generateUniqueNumber();
          messageText = "Hello ".concat(req.body.devoteeName, ". ").concat(message, ". Booking Id:").concat(serviceBookId);
          sendSMS(toPhoneNumber, messageText);
          EmailObject = {
            name: req.body.devoteeName,
            email: req.body.devoteeEmail,
            message: message,
            bodyData: req.body,
            url: "http://localhost:3000/mybookings/list"
          };
          SendConfirmationEmail(EmailObject, "");
          SevaData = {
            userId: user._id,
            sevaBookId: serviceBookId,
            orderType: req.body.orderType,
            sevaType: req.body.sevaType,
            devoteeName: req.body.devoteeName,
            devoteeId: req.body.devoteeId,
            devoteeEmail: req.body.devoteeEmail,
            devoteePhoneNumber: req.body.devoteePhoneNumber,
            orderNotes: req.body.orderNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.amount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            paymentMethod: req.body.paymentMethod,
            sevaName: req.body.sevaName,
            NoOfPerson: req.body.NoOfPerson,
            bookingDate: req.body.bookingDate,
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          sevaHistory = new SevaHistory(SevaData);
          _context.next = 27;
          return sevaHistory.save();
        case 27:
          savedSeva = _context.sent;
          lastInsertedId = savedSeva._id;
          adminTransData = {
            userId: user._id,
            tabelRefId: lastInsertedId,
            orderType: "sevas",
            serviceName: req.body.sevaName,
            devoteeName: req.body.devoteeName,
            devoteeId: req.body.devoteeId,
            devoteeEmail: req.body.devoteeEmail,
            devoteePhoneNumber: req.body.devoteePhoneNumber,
            orderNotes: req.body.orderNotes,
            billingAddress: req.body.billingAddress,
            stripeReferenceId: req.body.stripeReferenceId,
            amount: req.body.amount,
            transStatus: req.body.transStatus,
            paymentMode: req.body.paymentMode,
            ticketId: serviceBookId,
            items: [],
            createdAt: Date.now(),
            modifiedAt: Date.now()
          };
          _context.next = 32;
          return AdminTranscationModel.create(adminTransData);
        case 32:
          data = {
            success: true,
            message: "SevaData details added successfully"
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 34:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function createBookings(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var SendConfirmationEmail = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(user, activationLink) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          new Email(user, activationLink, "seva booking email").sevaConfirmation();
        case 1:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function SendConfirmationEmail(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var getSevaList = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var bookings, data, _data5;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return SevaBooking.find({});
        case 2:
          bookings = _context3.sent;
          if (bookings) {
            _context3.next = 8;
            break;
          }
          data = {
            success: false,
            message: "Seva details doesn't exist"
          };
          return _context3.abrupt("return", {
            data: data,
            status: 404
          });
        case 8:
          _data5 = {
            success: true,
            bookings: bookings
          };
          return _context3.abrupt("return", {
            data: _data5,
            status: 200
          });
        case 10:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function getSevaList() {
    return _ref3.apply(this, arguments);
  };
}();
var getSevaBookingDetailsByBookingType = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {
    var bookings, data, _data6;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(req.body && req.body.sevaBookingType)) {
            _context4.next = 6;
            break;
          }
          _context4.next = 3;
          return SevaBooking.find({
            sevaBookingType: req.body.sevaBookingType
          });
        case 3:
          bookings = _context4.sent;
          _context4.next = 9;
          break;
        case 6:
          _context4.next = 8;
          return SevaAdminModel.find({});
        case 8:
          bookings = _context4.sent;
        case 9:
          if (bookings) {
            _context4.next = 14;
            break;
          }
          data = {
            success: true,
            message: "Seva booking details doesn't exist"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 404
          });
        case 14:
          _data6 = {
            success: true,
            bookings: bookings
          };
          return _context4.abrupt("return", {
            data: _data6,
            status: 200
          });
        case 16:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function getSevaBookingDetailsByBookingType(_x5) {
    return _ref4.apply(this, arguments);
  };
}();
module.exports = {
  createBookings: createBookings,
  getSevaList: getSevaList,
  getSevaBookingDetailsByBookingType: getSevaBookingDetailsByBookingType
};

/***/ }),

/***/ "./app/services/member/userProfile/deceasedDetailsService.js":
/*!*******************************************************************!*\
  !*** ./app/services/member/userProfile/deceasedDetailsService.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var DeceasedDetails = __webpack_require__(/*! ../../../models/member/userProfile/deceasedDetailsModel */ "./app/models/member/userProfile/deceasedDetailsModel.js");
var User = __webpack_require__(/*! ../../../models/auth/userModel */ "./app/models/auth/userModel.js");
var getDeceasedDetailsByUserId = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req) {
    var user, _data, deceased, _data2, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context.sent;
          if (user) {
            _context.next = 6;
            break;
          }
          _data = {
            success: false,
            message: "User not found"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 404
          });
        case 6:
          _context.next = 8;
          return DeceasedDetails.findOne({
            userId: req.params.userId,
            _id: req.params.id
          });
        case 8:
          deceased = _context.sent;
          if (deceased) {
            _context.next = 12;
            break;
          }
          _data2 = {
            success: true,
            deceased: deceased,
            message: "User Deceased not available"
          };
          return _context.abrupt("return", {
            data: _data2,
            status: 200
          });
        case 12:
          data = {
            success: true,
            deceased: deceased
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getDeceasedDetailsByUserId(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getDeceasedListByUserId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var user, _data3, deceasedlist, _data4, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context2.sent;
          if (user) {
            _context2.next = 6;
            break;
          }
          _data3 = {
            success: false,
            message: "User not found"
          };
          return _context2.abrupt("return", {
            data: _data3,
            status: 404
          });
        case 6:
          _context2.next = 8;
          return DeceasedDetails.find({
            userId: req.params.userId
          });
        case 8:
          deceasedlist = _context2.sent;
          if (deceasedlist) {
            _context2.next = 12;
            break;
          }
          _data4 = {
            success: true,
            families: DeceasedDetails,
            message: "User Deceased not available"
          };
          return _context2.abrupt("return", {
            data: _data4,
            status: 200
          });
        case 12:
          data = {
            success: true,
            deceasedlist: deceasedlist
          };
          return _context2.abrupt("return", {
            data: data,
            status: 200
          });
        case 14:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getDeceasedListByUserId(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var createDeceasedDetails = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var user, _data5, DeceasedData, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context3.sent;
          if (user) {
            _context3.next = 6;
            break;
          }
          _data5 = {
            success: false,
            message: "User not found"
          };
          return _context3.abrupt("return", {
            data: _data5,
            status: 404
          });
        case 6:
          DeceasedData = _objectSpread(_objectSpread({
            userId: user._id
          }, req.body), {}, {
            createdAt: Date.now(),
            modifiedAt: Date.now()
          });
          _context3.next = 9;
          return new DeceasedDetails(DeceasedData).save();
        case 9:
          data = {
            success: true,
            message: "Deceased Details Created successfully"
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function createDeceasedDetails(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();
var updateDeceasedDetails = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var user, _data6, _data7, existingDeceasedId, _data8, DeceasedData, DeceasedList, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context4.sent;
          if (user) {
            _context4.next = 6;
            break;
          }
          _data6 = {
            success: false,
            message: "User not found"
          };
          return _context4.abrupt("return", {
            data: _data6,
            status: 404
          });
        case 6:
          if (req.params.deceasedId) {
            _context4.next = 9;
            break;
          }
          _data7 = {
            success: false,
            message: "Deceased detail invalid for this user"
          };
          return _context4.abrupt("return", {
            data: _data7,
            status: 404
          });
        case 9:
          _context4.next = 11;
          return DeceasedDetails.findOne({
            _id: req.params.deceasedId
          });
        case 11:
          existingDeceasedId = _context4.sent;
          if (!(!existingDeceasedId || existingDeceasedId === null)) {
            _context4.next = 15;
            break;
          }
          _data8 = {
            success: false,
            message: "Deceased Details doesn't exists for this user"
          };
          return _context4.abrupt("return", {
            data: _data8,
            status: 404
          });
        case 15:
          DeceasedData = _objectSpread({}, req.body);
          _context4.next = 18;
          return DeceasedDetails.findByIdAndUpdate(req.params.deceasedId, {
            $set: DeceasedData
          }, {
            runValidators: true,
            "new": true
          });
        case 18:
          DeceasedList = _context4.sent;
          data = {
            success: true,
            message: "DeceasedDetails updated successfully"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 21:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function updateDeceasedDetails(_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();
var deleteDeceasedDetails = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var user, _data9, _data10, existingDeceasedId, _data11, Deceased, _data12, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context5.sent;
          if (user) {
            _context5.next = 6;
            break;
          }
          _data9 = {
            success: false,
            message: "User not found"
          };
          return _context5.abrupt("return", {
            data: _data9,
            status: 404
          });
        case 6:
          if (req.params.deceasedId) {
            _context5.next = 9;
            break;
          }
          _data10 = {
            success: false,
            message: "Deceased detail invalid for this user"
          };
          return _context5.abrupt("return", {
            data: _data10,
            status: 404
          });
        case 9:
          _context5.next = 11;
          return DeceasedDetails.findOne({
            _id: req.params.deceasedId
          });
        case 11:
          existingDeceasedId = _context5.sent;
          if (!(!existingDeceasedId || existingDeceasedId === null)) {
            _context5.next = 15;
            break;
          }
          _data11 = {
            success: false,
            message: "Deceased Details doesn't exists for this user"
          };
          return _context5.abrupt("return", {
            data: _data11,
            status: 404
          });
        case 15:
          _context5.next = 17;
          return DeceasedDetails.deleteOne({
            _id: req.params.deceasedId
          });
        case 17:
          Deceased = _context5.sent;
          if (Deceased) {
            _context5.next = 21;
            break;
          }
          _data12 = {
            success: false,
            message: "Deceased details doesn't exists"
          };
          return _context5.abrupt("return", {
            data: _data12,
            status: 404
          });
        case 21:
          data = {
            success: true,
            message: "Deceased Details deleted successfully"
          };
          return _context5.abrupt("return", {
            data: data,
            status: 200
          });
        case 23:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function deleteDeceasedDetails(_x7, _x8) {
    return _ref5.apply(this, arguments);
  };
}();
module.exports = {
  getDeceasedDetailsByUserId: getDeceasedDetailsByUserId,
  createDeceasedDetails: createDeceasedDetails,
  updateDeceasedDetails: updateDeceasedDetails,
  deleteDeceasedDetails: deleteDeceasedDetails,
  getDeceasedListByUserId: getDeceasedListByUserId
};

/***/ }),

/***/ "./app/services/member/userProfile/familyDetailsService.js":
/*!*****************************************************************!*\
  !*** ./app/services/member/userProfile/familyDetailsService.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var FamilyDetails = __webpack_require__(/*! ../../../models/member/userProfile/familyDetailsModel */ "./app/models/member/userProfile/familyDetailsModel.js");
var User = __webpack_require__(/*! ../../../models/auth/userModel */ "./app/models/auth/userModel.js");
var getFamilyDetailsByUserId = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req) {
    var user, _data, familyDetails, _data2, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context.sent;
          if (user) {
            _context.next = 6;
            break;
          }
          _data = {
            success: false,
            message: "User not found"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 404
          });
        case 6:
          _context.next = 8;
          return FamilyDetails.findOne({
            userId: req.params.userId,
            _id: req.params.id
          });
        case 8:
          familyDetails = _context.sent;
          if (familyDetails) {
            _context.next = 12;
            break;
          }
          _data2 = {
            success: true,
            family: family,
            message: "User family not available"
          };
          return _context.abrupt("return", {
            data: _data2,
            status: 200
          });
        case 12:
          data = {
            success: true,
            familyDetails: familyDetails
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getFamilyDetailsByUserId(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getFamilyListByUserId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {
    var user, _data3, familyDetails, _data4, data;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context2.sent;
          if (user) {
            _context2.next = 6;
            break;
          }
          _data3 = {
            success: false,
            message: "User not found"
          };
          return _context2.abrupt("return", {
            data: _data3,
            status: 404
          });
        case 6:
          _context2.next = 8;
          return FamilyDetails.find({
            userId: req.params.userId
          });
        case 8:
          familyDetails = _context2.sent;
          if (familyDetails) {
            _context2.next = 12;
            break;
          }
          _data4 = {
            success: true,
            families: familyDetails,
            message: "User family not available"
          };
          return _context2.abrupt("return", {
            data: _data4,
            status: 200
          });
        case 12:
          data = {
            success: true,
            familyDetails: familyDetails
          };
          return _context2.abrupt("return", {
            data: data,
            status: 200
          });
        case 14:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getFamilyListByUserId(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var createFamilyDetails = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var user, _data5, familyData, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context3.sent;
          if (user) {
            _context3.next = 6;
            break;
          }
          _data5 = {
            success: false,
            message: "User not found"
          };
          return _context3.abrupt("return", {
            data: _data5,
            status: 404
          });
        case 6:
          familyData = _objectSpread(_objectSpread({
            userId: user._id
          }, req.body), {}, {
            createdAt: Date.now(),
            modifiedAt: Date.now()
          });
          _context3.next = 9;
          return new FamilyDetails(familyData).save();
        case 9:
          data = {
            success: true,
            message: "Family Details Created successfully"
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function createFamilyDetails(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();
var updateFamilyDetails = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var user, _data6, _data7, existingFamilyId, _data8, familyData, familyDetails, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context4.sent;
          if (user) {
            _context4.next = 6;
            break;
          }
          _data6 = {
            success: false,
            message: "User not found"
          };
          return _context4.abrupt("return", {
            data: _data6,
            status: 404
          });
        case 6:
          if (req.params.familyId) {
            _context4.next = 9;
            break;
          }
          _data7 = {
            success: false,
            message: "family detail invalid for this user"
          };
          return _context4.abrupt("return", {
            data: _data7,
            status: 404
          });
        case 9:
          _context4.next = 11;
          return FamilyDetails.findOne({
            _id: req.params.familyId
          });
        case 11:
          existingFamilyId = _context4.sent;
          if (!(!existingFamilyId || existingFamilyId === null)) {
            _context4.next = 15;
            break;
          }
          _data8 = {
            success: false,
            message: "Family Details doesn't exists for this user"
          };
          return _context4.abrupt("return", {
            data: _data8,
            status: 404
          });
        case 15:
          familyData = _objectSpread({}, req.body);
          _context4.next = 18;
          return FamilyDetails.findByIdAndUpdate(req.params.familyId, {
            $set: familyData
          }, {
            runValidators: true,
            "new": true
          });
        case 18:
          familyDetails = _context4.sent;
          data = {
            success: true,
            message: "FamilyDetails updated successfully"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 21:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function updateFamilyDetails(_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();
var deleteFamilyDetails = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
    var user, _data9, _data10, existingFamilyId, _data11, family, _data12, data;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context5.sent;
          if (user) {
            _context5.next = 6;
            break;
          }
          _data9 = {
            success: false,
            message: "User not found"
          };
          return _context5.abrupt("return", {
            data: _data9,
            status: 404
          });
        case 6:
          if (req.params.familyId) {
            _context5.next = 9;
            break;
          }
          _data10 = {
            success: false,
            message: "family detail invalid for this user"
          };
          return _context5.abrupt("return", {
            data: _data10,
            status: 404
          });
        case 9:
          _context5.next = 11;
          return FamilyDetails.findOne({
            _id: req.params.familyId
          });
        case 11:
          existingFamilyId = _context5.sent;
          if (!(!existingFamilyId || existingFamilyId === null)) {
            _context5.next = 15;
            break;
          }
          _data11 = {
            success: false,
            message: "Family Details doesn't exists for this user"
          };
          return _context5.abrupt("return", {
            data: _data11,
            status: 404
          });
        case 15:
          _context5.next = 17;
          return FamilyDetails.deleteOne({
            _id: req.params.familyId
          });
        case 17:
          family = _context5.sent;
          if (family) {
            _context5.next = 21;
            break;
          }
          _data12 = {
            success: false,
            message: "Family details doesn't exists"
          };
          return _context5.abrupt("return", {
            data: _data12,
            status: 404
          });
        case 21:
          data = {
            success: true,
            message: "Family Details deleted successfully"
          };
          return _context5.abrupt("return", {
            data: data,
            status: 200
          });
        case 23:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function deleteFamilyDetails(_x7, _x8) {
    return _ref5.apply(this, arguments);
  };
}();
module.exports = {
  getFamilyDetailsByUserId: getFamilyDetailsByUserId,
  createFamilyDetails: createFamilyDetails,
  updateFamilyDetails: updateFamilyDetails,
  deleteFamilyDetails: deleteFamilyDetails,
  getFamilyListByUserId: getFamilyListByUserId
};

/***/ }),

/***/ "./app/services/member/userProfile/userProfileService.js":
/*!***************************************************************!*\
  !*** ./app/services/member/userProfile/userProfileService.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var UserProfile = __webpack_require__(/*! ../../../models/auth/userModel */ "./app/models/auth/userModel.js");
var FamilyDetails = __webpack_require__(/*! ../../../models/member/userProfile/familyDetailsModel */ "./app/models/member/userProfile/familyDetailsModel.js");
var User = __webpack_require__(/*! ../../../models/auth/userModel */ "./app/models/auth/userModel.js");
var getUserProfileByUserId = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(userId) {
    var user, _data, profile, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return User.findOne({
            _id: userId,
            activated: true
          });
        case 2:
          user = _context.sent;
          if (user) {
            _context.next = 6;
            break;
          }
          _data = {
            success: false,
            message: "User not found"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 404
          });
        case 6:
          _context.next = 8;
          return UserProfile.findOne({
            userId: userId
          });
        case 8:
          profile = _context.sent;
          data = {
            success: true,
            profile: profile
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getUserProfileByUserId(_x) {
    return _ref.apply(this, arguments);
  };
}();
var createUserProfile = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {
    var user, data, existingProfile, profileData, profile, _data2, _profileData, _data3;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context2.sent;
          if (user) {
            _context2.next = 6;
            break;
          }
          data = {
            success: false,
            message: "User not found"
          };
          return _context2.abrupt("return", {
            data: data,
            status: 404
          });
        case 6:
          _context2.next = 8;
          return UserProfile.findOne({
            userId: user._id
          });
        case 8:
          existingProfile = _context2.sent;
          req.body.isProfilecreated = true;
          if (!existingProfile) {
            _context2.next = 19;
            break;
          }
          profileData = _objectSpread({}, req.body);
          _context2.next = 14;
          return UserProfile.updateOne({
            userId: req.params.userId
          }, {
            $set: profileData
          }, {
            runValidators: true,
            "new": true
          });
        case 14:
          profile = _context2.sent;
          _data2 = {
            success: true,
            message: "User profile updated successfully",
            profile: profile
          };
          return _context2.abrupt("return", {
            data: _data2,
            status: 200
          });
        case 19:
          _profileData = _objectSpread(_objectSpread({
            userId: user._id,
            firstName: user.firstName,
            email: user.email
          }, req.body), {}, {
            createdAt: Date.now(),
            modifiedAt: Date.now()
          });
          _context2.next = 22;
          return new UserProfile(_profileData).save();
        case 22:
          _data3 = {
            success: true,
            message: "User Profile Created successfully"
          };
          return _context2.abrupt("return", {
            data: _data3,
            status: 200
          });
        case 24:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function createUserProfile(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();
var updateUserProfile = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {
    var user, _data4, profileData, profile, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context3.sent;
          if (user) {
            _context3.next = 6;
            break;
          }
          _data4 = {
            success: false,
            message: "User not found"
          };
          return _context3.abrupt("return", {
            data: _data4,
            status: 404
          });
        case 6:
          profileData = _objectSpread({}, req.body);
          _context3.next = 9;
          return UserProfile.updateOne({
            userId: req.params.userId
          }, {
            $set: profileData
          }, {
            runValidators: true,
            "new": true
          });
        case 9:
          profile = _context3.sent;
          data = {
            success: true,
            message: "User profile updated successfully",
            profile: profile
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 12:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function updateUserProfile(_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();
var deleteUserAndProfile = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {
    var user, deletedUser, _data5, profile, _data6, data;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return User.findOne({
            _id: req.params.userId,
            activated: true
          });
        case 2:
          user = _context4.sent;
          _context4.next = 5;
          return User.findByIdAndDelete(req.params.userId);
        case 5:
          deletedUser = _context4.sent;
          if (!(!user || !deletedUser)) {
            _context4.next = 9;
            break;
          }
          _data5 = {
            success: false,
            message: "User not found"
          };
          return _context4.abrupt("return", {
            data: _data5,
            status: 404
          });
        case 9:
          _context4.next = 11;
          return UserProfile.deleteOne({
            userId: req.params.userId
          });
        case 11:
          profile = _context4.sent;
          if (profile) {
            _context4.next = 15;
            break;
          }
          _data6 = {
            success: false,
            message: "Profile doesn't exists for this user"
          };
          return _context4.abrupt("return", {
            data: _data6,
            status: 404
          });
        case 15:
          _context4.next = 17;
          return FamilyDetails.deleteOne({
            userId: req.params.userId
          });
        case 17:
          data = {
            success: true,
            message: "User profile & family details deleted successfully"
          };
          return _context4.abrupt("return", {
            data: data,
            status: 200
          });
        case 19:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function deleteUserAndProfile(_x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();
module.exports = {
  getUserProfileByUserId: getUserProfileByUserId,
  createUserProfile: createUserProfile,
  updateUserProfile: updateUserProfile,
  deleteUserAndProfile: deleteUserAndProfile
};

/***/ }),

/***/ "./app/services/member/volunteerService.js":
/*!*************************************************!*\
  !*** ./app/services/member/volunteerService.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var Volunteers = __webpack_require__(/*! ../../models/member/volunteerModel */ "./app/models/member/volunteerModel.js");
var _require = __webpack_require__(/*! ../../utils/index */ "./app/utils/index.js"),
  isNullOrUndefined = _require.isNullOrUndefined;
var createVolunteers = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {
    var _data, VolunteerData, data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(isNullOrUndefined(req) || isNullOrUndefined(req.body))) {
            _context.next = 3;
            break;
          }
          _data = {
            success: false,
            message: "invalid request"
          };
          return _context.abrupt("return", {
            data: _data,
            status: 400
          });
        case 3:
          req.body.approveStatus = null;
          VolunteerData = _objectSpread(_objectSpread({}, req.body), {}, {
            createdAt: Date.now(),
            modifiedAt: Date.now()
          });
          _context.next = 7;
          return new Volunteers(VolunteerData).save();
        case 7:
          data = {
            success: true,
            message: "Volunteers details saved successfully"
          };
          return _context.abrupt("return", {
            data: data,
            status: 200
          });
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function createVolunteers(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var getVolunteers = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var volunteers, data, _data2;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return Volunteers.find({});
        case 2:
          volunteers = _context2.sent;
          if (volunteers) {
            _context2.next = 8;
            break;
          }
          data = {
            success: false,
            message: "Volunteers details doesn't exist"
          };
          return _context2.abrupt("return", {
            data: data,
            status: 404
          });
        case 8:
          _data2 = {
            success: true,
            volunteers: volunteers
          };
          return _context2.abrupt("return", {
            data: _data2,
            status: 200
          });
        case 10:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getVolunteers() {
    return _ref2.apply(this, arguments);
  };
}();
var updateVolunteer = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req) {
    var existingVolunteer, _data3, newStatus, volunteer, data;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return Volunteers.findOne({
            _id: req.body._id
          });
        case 2:
          existingVolunteer = _context3.sent;
          if (existingVolunteer) {
            _context3.next = 6;
            break;
          }
          _data3 = {
            success: false,
            message: "Volunteer doesn't exist"
          };
          return _context3.abrupt("return", {
            data: _data3,
            status: 404
          });
        case 6:
          newStatus = req.body.status;
          _context3.next = 9;
          return Volunteers.findByIdAndUpdate(req.body._id, {
            $set: {
              approveStatus: newStatus
            }
          }, {
            runValidators: true,
            "new": true
          });
        case 9:
          volunteer = _context3.sent;
          data = {
            success: true,
            message: "Volunteer updated successfully",
            volunteer: volunteer
          };
          return _context3.abrupt("return", {
            data: data,
            status: 200
          });
        case 12:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function updateVolunteer(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
module.exports = {
  createVolunteers: createVolunteers,
  getVolunteers: getVolunteers,
  updateVolunteer: updateVolunteer
};

/***/ }),

/***/ "./app/utils/bookingIdGenerator.js":
/*!*****************************************!*\
  !*** ./app/utils/bookingIdGenerator.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var crypto = __webpack_require__(/*! crypto */ "crypto");
var generateUniqueBookingId = function generateUniqueBookingId() {
  var timestamp = Date.now().toString();
  // Generate a random number (6 digits)
  var randomPart = crypto.randomBytes(3).toString("hex").toUpperCase();
  var ticketId = timestamp + randomPart;
  return ticketId.slice(-6);
};
module.exports = {
  generateUniqueBookingId: generateUniqueBookingId
};

/***/ }),

/***/ "./app/utils/constants.js":
/*!********************************!*\
  !*** ./app/utils/constants.js ***!
  \********************************/
/***/ ((module) => {

var allowedWorshipDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
var allowedUserRoles = ["user", "admin"];
var allowedBookingTypes = ["Regular", "Pre-Booking"];
var allowedServiceTypes = ["Archana", "Homam", "Pooja", "Seva"];
var allowedDonationTypes = ["Grocery", "Other"];
var PUBLIC_URL = http://localhost:8080;
module.exports = {
  allowedUserRoles: allowedUserRoles,
  allowedWorshipDays: allowedWorshipDays,
  allowedDonationTypes: allowedDonationTypes,
  allowedBookingTypes: allowedBookingTypes,
  allowedServiceTypes: allowedServiceTypes,
  PUBLIC_URL: PUBLIC_URL
};

/***/ }),

/***/ "./app/utils/dataHelper.js":
/*!*********************************!*\
  !*** ./app/utils/dataHelper.js ***!
  \*********************************/
/***/ ((module) => {

var isNullOrUndefined = function isNullOrUndefined(value) {
  return value === null || value === undefined;
};
module.exports = {
  isNullOrUndefined: isNullOrUndefined
};

/***/ }),

/***/ "./app/utils/dateHelper.js":
/*!*********************************!*\
  !*** ./app/utils/dateHelper.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var _require = __webpack_require__(/*! date-fns */ "date-fns"),
  parse = _require.parse,
  isValid = _require.isValid;
var isValidDateDDMMYYYYFormat = function isValidDateDDMMYYYYFormat(dateString) {
  if (!dateString) {
    return false;
  }
  var parsedDate = parse(dateString, "dd/MM/yyyy", new Date());

  // Check if the parsed date is a valid date
  return isValid(parsedDate);
};
var isDateInPresentOrFuture = function isDateInPresentOrFuture(dateString) {
  var _dateString$split$map = dateString.split("/").map(Number),
    _dateString$split$map2 = _slicedToArray(_dateString$split$map, 3),
    day = _dateString$split$map2[0],
    month = _dateString$split$map2[1],
    year = _dateString$split$map2[2];
  if (isNaN(day) || isNaN(month) || isNaN(year)) {
    return false;
  }
  var inputDate = new Date(year, month - 1, day);
  var currentDate = new Date();

  // Check if the input date is greater than or equal to the current date
  return inputDate >= currentDate;
};
var getCurrentDate = function getCurrentDate() {
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, "0");
  var mm = String(today.getMonth() + 1).padStart(2, "0"); // January is 0!
  var yy = String(today.getFullYear());
  return "".concat(dd, "-").concat(mm, "-").concat(yy);
};
module.exports = {
  isValidDateDDMMYYYYFormat: isValidDateDDMMYYYYFormat,
  isDateInPresentOrFuture: isDateInPresentOrFuture,
  getCurrentDate: getCurrentDate
};

/***/ }),

/***/ "./app/utils/fileUpload.js":
/*!*********************************!*\
  !*** ./app/utils/fileUpload.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var multer = __webpack_require__(/*! multer */ "multer");
var fs = __webpack_require__(/*! fs */ "fs");
var path = __webpack_require__(/*! path */ "path");
var upload = function upload(folder) {
  return multer({
    storage: getStorage(folder)
  });
};

// Function to dynamically set Multer storage
var getStorage = function getStorage(imageFolder) {
  var storage = multer.diskStorage({
    destination: function destination(req, file, cb) {
      cb(null, "./" + imageFolder);
    },
    filename: function filename(req, file, cb) {
      if (imageFolder === "uploads/services") {
        var extension = path.extname(file.originalname);
        var serviceName = req.body.serviceName.replace(/\s/g, "").toLowerCase();
        var filename = "".concat(req.body.godId, "_").concat(serviceName).concat(extension);
        cb(null, filename);
      } else if (imageFolder === "uploads/gods") {
        var _extension = path.extname(file.originalname);
        var godName = req.body.name.replace(/\s/g, "").toLowerCase();
        var _filename = "".concat(godName).concat(_extension);
        cb(null, _filename);
      } else if (imageFolder === "uploads/staticfile") {
        var originalName = file.originalname;
        var filePath = path.join("uploads/staticfile", originalName);
        fs.access(filePath, fs.constants.F_OK, function (err) {
          if (!err) {
            var timestamp = new Date().toISOString().replace(/[-:.]/g, "");
            var newName = "".concat(timestamp, "_").concat(originalName);
            fs.renameSync(filePath, path.join("uploads/staticfile", newName));
            cb(null, originalName);
          } else {
            cb(null, originalName);
          }
        });
      } else {
        cb(null, file.originalname);
      }
    }
  });
  return storage;
};
module.exports = {
  upload: upload
};

/***/ }),

/***/ "./app/utils/index.js":
/*!****************************!*\
  !*** ./app/utils/index.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! ./dateHelper */ "./app/utils/dateHelper.js"),
  isValidDateDDMMYYYYFormat = _require.isValidDateDDMMYYYYFormat,
  isDateInPresentOrFuture = _require.isDateInPresentOrFuture,
  getCurrentDate = _require.getCurrentDate;
var _require2 = __webpack_require__(/*! ./dataHelper */ "./app/utils/dataHelper.js"),
  isNullOrUndefined = _require2.isNullOrUndefined,
  concatenateNames = _require2.concatenateNames;
var _require3 = __webpack_require__(/*! ./uuidGenerator */ "./app/utils/uuidGenerator.js"),
  generateUniqueKey = _require3.generateUniqueKey,
  generateUniqueNumber = _require3.generateUniqueNumber,
  generateRandomOtp = _require3.generateRandomOtp,
  generateRandomPassword = _require3.generateRandomPassword;
var _require4 = __webpack_require__(/*! ./bookingIdGenerator */ "./app/utils/bookingIdGenerator.js"),
  generateUniqueBookingId = _require4.generateUniqueBookingId;
var _require5 = __webpack_require__(/*! ./mongoUtils */ "./app/utils/mongoUtils.js"),
  convertStringToObjectId = _require5.convertStringToObjectId;
var _require6 = __webpack_require__(/*! ./fileUpload */ "./app/utils/fileUpload.js"),
  getStorage = _require6.getStorage;
module.exports = {
  isValidDateDDMMYYYYFormat: isValidDateDDMMYYYYFormat,
  isDateInPresentOrFuture: isDateInPresentOrFuture,
  isNullOrUndefined: isNullOrUndefined,
  concatenateNames: concatenateNames,
  generateRandomPassword: generateRandomPassword,
  generateRandomOtp: generateRandomOtp,
  generateUniqueNumber: generateUniqueNumber,
  getCurrentDate: getCurrentDate,
  generateUniqueKey: generateUniqueKey,
  generateUniqueBookingId: generateUniqueBookingId,
  convertStringToObjectId: convertStringToObjectId,
  getStorage: getStorage
};

/***/ }),

/***/ "./app/utils/mongoUtils.js":
/*!*********************************!*\
  !*** ./app/utils/mongoUtils.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _require = __webpack_require__(/*! mongodb */ "mongodb"),
  ObjectId = _require.ObjectId;
var convertStringToObjectId = function convertStringToObjectId(str) {
  try {
    return new ObjectId(str);
  } catch (error) {
    // Handle invalid ObjectId
    console.error("Invalid ObjectId:", error.message);
    return null;
  }
};
module.exports = {
  convertStringToObjectId: convertStringToObjectId
};

/***/ }),

/***/ "./app/utils/sendEmail.js":
/*!********************************!*\
  !*** ./app/utils/sendEmail.js ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var handlebars = __webpack_require__(/*! handlebars */ "handlebars");
var fs = __webpack_require__(/*! fs */ "fs");
var path = __webpack_require__(/*! path */ "path");
var _require = __webpack_require__(/*! ../utils */ "./app/utils/index.js"),
  getCurrentDate = _require.getCurrentDate;

//send grid
var sgMail = __webpack_require__(/*! @sendgrid/mail */ "@sendgrid/mail");
sgMail.setApiKey(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);
module.exports = /*#__PURE__*/function () {
  function Email(user, url, title) {
    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "login";
    _classCallCheck(this, Email);
    this.to = user === null || user === void 0 ? void 0 : user.email;
    this.url = url;
    this.subject = user === null || user === void 0 ? void 0 : user.subject;
    this.customerName = user === null || user === void 0 ? void 0 : user.name;
    this.customerEmail = user === null || user === void 0 ? void 0 : user.email;
    this.currentdate = getCurrentDate;
    this.message = user === null || user === void 0 ? void 0 : user.message;
    this.bodyData = user === null || user === void 0 ? void 0 : user.bodyData;
    this.title = title;
    this.from = "<".concat(srinivas@northgaze.com, ">");
    this.name = user === null || user === void 0 ? void 0 : user.name;
  }
  _createClass(Email, [{
    key: "newTransport",
    value: function newTransport() {
      return sgMail;
    }
  }, {
    key: "registerPartials",
    value: function registerPartials() {
      var absoluteHeaderPath = path.resolve(__dirname, "../views/email/maillayout/header.handlebars");
      handlebars.registerPartial("header", fs.readFileSync(absoluteHeaderPath, "utf8"));
      var absoluteFooterPath = path.resolve(__dirname, "../views/email/maillayout/footer.handlebars");
      handlebars.registerPartial("footer", fs.readFileSync(absoluteFooterPath, "utf8"));
    }

    // Send the actual email
  }, {
    key: "send",
    value: function () {
      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(template, subject, role) {
        var headerTemplateSource, footerTemplateSource, MainContentSource, mainContentTemplate, emailHtml, mailOptions;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.registerPartials();
              headerTemplateSource = handlebars.partials["header"];
              footerTemplateSource = handlebars.partials["footer"];
              MainContentSource = fs.readFileSync("".concat(__dirname, "/../views/email/").concat(role, "/").concat(template, ".handlebars"), "utf8");
              mainContentTemplate = handlebars.compile(MainContentSource, {
                partials: {
                  header: headerTemplateSource,
                  footer: footerTemplateSource
                }
              });
              emailHtml = mainContentTemplate(this); // 2) Define email options
              mailOptions = {
                from: this.from,
                to: this.to,
                subject: subject,
                html: emailHtml
              };
              _context.next = 9;
              return sgMail.send(mailOptions);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function send(_x, _x2, _x3) {
        return _send.apply(this, arguments);
      }
      return send;
    }()
  }, {
    key: "sendEnquiry",
    value: function () {
      var _sendEnquiry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.send("sendEnquiry", "Enquiry notification", "member");
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function sendEnquiry() {
        return _sendEnquiry.apply(this, arguments);
      }
      return sendEnquiry;
    }()
  }, {
    key: "sendWelcome",
    value: function () {
      var _sendWelcome = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.send("welcome", "Welcome to the Sai Sathya Narayana Temple!", "member");
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function sendWelcome() {
        return _sendWelcome.apply(this, arguments);
      }
      return sendWelcome;
    }()
  }, {
    key: "sendPasswordReset",
    value: function () {
      var _sendPasswordReset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.send("requestResetPassword", "Reset password link", "auth");
            case 2:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function sendPasswordReset() {
        return _sendPasswordReset.apply(this, arguments);
      }
      return sendPasswordReset;
    }()
  }, {
    key: "verifyEmailAddress",
    value: function () {
      var _verifyEmailAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.send("verifyEmail", "Verify your email address to activate your account", "auth");
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function verifyEmailAddress() {
        return _verifyEmailAddress.apply(this, arguments);
      }
      return verifyEmailAddress;
    }()
  }, {
    key: "adminRegistrationConfirm",
    value: function () {
      var _adminRegistrationConfirm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.send("adminRegister", "Admin registration confirmation email", "auth");
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function adminRegistrationConfirm() {
        return _adminRegistrationConfirm.apply(this, arguments);
      }
      return adminRegistrationConfirm;
    }()
  }, {
    key: "donationConfirmation",
    value: function () {
      var _donationConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.send("donationSuccess", "Donation confirmation email", "member");
            case 2:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function donationConfirmation() {
        return _donationConfirmation.apply(this, arguments);
      }
      return donationConfirmation;
    }()
  }, {
    key: "ShopConfirmation",
    value: function () {
      var _ShopConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.send("shopSuccess", "Purchasing confirmation email");
            case 2:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function ShopConfirmation() {
        return _ShopConfirmation.apply(this, arguments);
      }
      return ShopConfirmation;
    }()
  }, {
    key: "serviceConfirmation",
    value: function () {
      var _serviceConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.send("serviceSuccess", "Service confirmation email", "member");
            case 2:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function serviceConfirmation() {
        return _serviceConfirmation.apply(this, arguments);
      }
      return serviceConfirmation;
    }()
  }, {
    key: "sevaConfirmation",
    value: function () {
      var _sevaConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.send("sevaSuccess", "Seva confirmation email", "member");
            case 2:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function sevaConfirmation() {
        return _sevaConfirmation.apply(this, arguments);
      }
      return sevaConfirmation;
    }()
  }, {
    key: "eventConfirmation",
    value: function () {
      var _eventConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.send("eventSuccess", "Event booking confirmation email", "member");
            case 2:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function eventConfirmation() {
        return _eventConfirmation.apply(this, arguments);
      }
      return eventConfirmation;
    }()
  }, {
    key: "resetPassword",
    value: function () {
      var _resetPassword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return this.send("resetPassword", "password has been reset succesfully", "member");
            case 2:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function resetPassword() {
        return _resetPassword.apply(this, arguments);
      }
      return resetPassword;
    }()
  }, {
    key: "volunteerApprove",
    value: function () {
      var _volunteerApprove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return this.send("volunteerapprove", "Your volunteer request submission status", "member");
            case 2:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function volunteerApprove() {
        return _volunteerApprove.apply(this, arguments);
      }
      return volunteerApprove;
    }()
  }]);
  return Email;
}();

/***/ }),

/***/ "./app/utils/sendSMS.js":
/*!******************************!*\
  !*** ./app/utils/sendSMS.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// smsService.js
var twilio = __webpack_require__(/*! twilio */ "twilio");
(__webpack_require__(/*! dotenv */ "dotenv").config)();
var accountSid = AC165edf7f114aacef138978fa52a1f539;
var authToken = c0e67d325930e935703b56620e446af5;
var twilioNumber = +19294941821;
var client = new twilio(accountSid, authToken);
var sendSMS = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(to, message) {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return client.messages.create({
            body: message,
            from: twilioNumber,
            to: to
          });
        case 3:
          result = _context.sent;
          console.log("SMS sent with SID: ".concat(result.sid));
          return _context.abrupt("return", result.sid);
        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](0);
          console.error("Error sending SMS:", _context.t0.message);
          throw _context.t0;
        case 12:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 8]]);
  }));
  return function sendSMS(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
module.exports = {
  sendSMS: sendSMS
};

/***/ }),

/***/ "./app/utils/stripe.js":
/*!*****************************!*\
  !*** ./app/utils/stripe.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var stripe = __webpack_require__(/*! stripe */ "stripe")(sk_test_w9FFlXYuNXBQAGbAMcbTfvUc);
module.exports = stripe;

/***/ }),

/***/ "./app/utils/uuidGenerator.js":
/*!************************************!*\
  !*** ./app/utils/uuidGenerator.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uuid = __webpack_require__(/*! uuid */ "uuid");
var generateUniqueKey = function generateUniqueKey() {
  return uuid.v4();
};
var generateUniqueNumber = function generateUniqueNumber() {
  var currentYear = new Date().getFullYear();
  var randomSixDigitNumber = Math.floor(100000 + Math.random() * 900000);
  var uniqueNumber = "".concat(currentYear, "/").concat(randomSixDigitNumber);
  return uniqueNumber;
};
var generateRandomOtp = function generateRandomOtp() {
  var otp = Math.floor(100000 + Math.random() * 900000);
  return otp.toString();
};
function generateRandomPassword() {
  var length = 8;
  var charset = "0123456789";
  var password = "";
  for (var i = 0; i < length; i++) {
    var randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
}
module.exports = {
  generateUniqueKey: generateUniqueKey,
  generateUniqueNumber: generateUniqueNumber,
  generateRandomOtp: generateRandomOtp,
  generateRandomPassword: generateRandomPassword
};

/***/ }),

/***/ "./dbConnections.js":
/*!**************************!*\
  !*** ./dbConnections.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// dbConnection.js
var mongoose = __webpack_require__(/*! mongoose */ "mongoose");
var _require = __webpack_require__(/*! ./app/middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var dbConfig = __webpack_require__(/*! ./app/config/dbConfig */ "./app/config/dbConfig.js");
function connectToMongoDB() {
  return _connectToMongoDB.apply(this, arguments);
}
function _connectToMongoDB() {
  _connectToMongoDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var dbConnection;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return mongoose.connect("mongodb://".concat(dbConfig.HOST, ":").concat(dbConfig.PORT, "/").concat(dbConfig.DB), {
            useNewUrlParser: true,
            useUnifiedTopology: true
          });
        case 3:
          // Check if connected to the database
          dbConnection = mongoose.connection;
          dbConnection.on("connected", function () {
            logger.info("Connected to the database");
          });
          dbConnection.on("error", function (err) {
            logger.error("Error connecting to the database", err);
          });
          logger.info("Database connection established");
          _context.next = 13;
          break;
        case 9:
          _context.prev = 9;
          _context.t0 = _context["catch"](0);
          logger.error("Failed to connect to the database", _context.t0);
          process.exit(1);
        case 13:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 9]]);
  }));
  return _connectToMongoDB.apply(this, arguments);
}
module.exports = connectToMongoDB;

/***/ }),

/***/ "./swaggerDef.js":
/*!***********************!*\
  !*** ./swaggerDef.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var swaggerJSDoc = __webpack_require__(/*! swagger-jsdoc */ "swagger-jsdoc");
var options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "NorthGaze Apis",
      version: "1.0.0",
      description: "NorthGaze Apis"
    }
  },
  // API specifications
  apis: ["./app/routes/*.js"] // Path to your route files
};
var swaggerSpec = swaggerJSDoc(options);
module.exports = swaggerSpec;

/***/ }),

/***/ "@sendgrid/mail":
/*!*********************************!*\
  !*** external "@sendgrid/mail" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@sendgrid/mail");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("bcryptjs");

/***/ }),

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("body-parser");

/***/ }),

/***/ "compression":
/*!******************************!*\
  !*** external "compression" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("compression");

/***/ }),

/***/ "cookie-session":
/*!*********************************!*\
  !*** external "cookie-session" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("cookie-session");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("cors");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "date-fns":
/*!***************************!*\
  !*** external "date-fns" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("date-fns");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("dotenv");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("express");

/***/ }),

/***/ "express-async-errors":
/*!***************************************!*\
  !*** external "express-async-errors" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = require("express-async-errors");

/***/ }),

/***/ "express-mongo-sanitize":
/*!*****************************************!*\
  !*** external "express-mongo-sanitize" ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("express-mongo-sanitize");

/***/ }),

/***/ "handlebars":
/*!*****************************!*\
  !*** external "handlebars" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("handlebars");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("jsonwebtoken");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("mongodb");

/***/ }),

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("mongoose");

/***/ }),

/***/ "multer":
/*!*************************!*\
  !*** external "multer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("multer");

/***/ }),

/***/ "stripe":
/*!*************************!*\
  !*** external "stripe" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stripe");

/***/ }),

/***/ "swagger-jsdoc":
/*!********************************!*\
  !*** external "swagger-jsdoc" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("swagger-jsdoc");

/***/ }),

/***/ "swagger-ui-express":
/*!*************************************!*\
  !*** external "swagger-ui-express" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("swagger-ui-express");

/***/ }),

/***/ "twilio":
/*!*************************!*\
  !*** external "twilio" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("twilio");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("uuid");

/***/ }),

/***/ "validator":
/*!****************************!*\
  !*** external "validator" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("validator");

/***/ }),

/***/ "winston":
/*!**************************!*\
  !*** external "winston" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("winston");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*******************!*\
  !*** ./server.js ***!
  \*******************/
__webpack_require__(/*! express-async-errors */ "express-async-errors");
(__webpack_require__(/*! dotenv */ "dotenv").config)();
var express = __webpack_require__(/*! express */ "express");
var bodyParser = __webpack_require__(/*! body-parser */ "body-parser");
var cors = __webpack_require__(/*! cors */ "cors");
var path = __webpack_require__(/*! path */ "path");
var mongoSanitize = __webpack_require__(/*! express-mongo-sanitize */ "express-mongo-sanitize");
var compression = __webpack_require__(/*! compression */ "compression");
var cookieSession = __webpack_require__(/*! cookie-session */ "cookie-session");
var _require = __webpack_require__(/*! ./app/middlewares */ "./app/middlewares/index.js"),
  logger = _require.logger;
var loadAdminRoutes = __webpack_require__(/*! ./app/routes/admin */ "./app/routes/admin/index.js");
var loadMemberRoutes = __webpack_require__(/*! ./app/routes/member */ "./app/routes/member/index.js");
var loadAuthRoutes = __webpack_require__(/*! ./app/routes/auth */ "./app/routes/auth/index.js");
var swaggerUi = __webpack_require__(/*! swagger-ui-express */ "swagger-ui-express");
var swaggerSpec = __webpack_require__(/*! ./swaggerDef */ "./swaggerDef.js");
var connectToMongoDB = __webpack_require__(/*! ./dbConnections */ "./dbConnections.js");
var app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
}));

//white listed only respective origin
app.use(cors({
  credentials: true,
  origin: "http://localhost:3000"
}));
app.use("/uploads", express["static"](path.join(__dirname, "uploads")));
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));
app.use(authenticate);
app.use(cookieSession({
  name: "client-session",
  keys: ["COOKIE_SECRET"],
  httpOnly: true
}));
app.use(express.json({
  verify: function verify(req, res, buffer) {
    return req["rawBody"] = buffer;
  }
}));
app.use(mongoSanitize());
app.use(compression());
connectToMongoDB();
loadAdminRoutes(app);
loadAuthRoutes(app);
loadMemberRoutes(app);

//when not found any URL
app.all("*", function (req, res) {
  res.status(404).json({
    status: "fail",
    success: false,
    message: "Can't find ".concat(req.originalUrl, " on this server")
  });
});

// set port, listen for requests
var PORT = 8080 || 0;
app.listen(PORT, function () {
  logger.info("Running Node.js version ".concat(process.version));
});
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,